{
  "url": "https://docs.mongodb.com/stitch/",
  "includeInGlobalSearch": false,
  "documents": [{
      "slug": "/authentication.html",
      "title": "Authentication \u2014 MongoDB Stitch (Beta)",
      "text": "Authentication\u00b6 This section provides information regarding the various authentication methods supported by MongoDB Stitch. Email/Password Authentication Google Authentication Facebook Authentication Custom Authentication \u2190 Values Email/Password Authentication \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/clients.html",
      "title": "APIs \u2014 MongoDB Stitch (Beta)",
      "text": "APIs\u00b6 JavaScript API Android API iOS API \u2190 Custom Authentication Tutorials \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started.html",
      "title": "Getting Started \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started\u00b6 Create Stitch App\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. Simple HTML Page Tutorial\u00b6 This application uses a JavaScript Stitch client to add comments to a blog post. It illustrates many of the basic features of Stitch. Please complete this tutorial before diving into the ToDo tutorials. The remainder of the getting started section contains tutorials that demonstrate how to create a MongoDB Stitch app and use MongoDB Stitch to integrate various services for an application. ToDo Tutorials\u00b6 The ToDo application maintains a personal todo list. Tutorial Description ToDo (Web App) Integrate with the following services: Google/Facebook user authentication services MongoDB service Twilio service ToDo (Android App) Integrate with the following services: Google/Facebook user authentication services MongoDB service Build Your First Stitch App Overview Create the HTML page Create an Atlas cluster Initialize MongoDB Stitch app Turn on anonymous authentication Add the MongoDB Stitch JavaScript SDK to our HTML page Initiate a client connection Display comments Set up our comments collection Allow anyone to read comments Add a form for creating comments Completed blog.html Next Steps ToDo (Web App) Prerequisites Procedure Log into Atlas. Create an Atlas cluster. Add a MongoDB Stitch application. Configure the MongoDB service. Review the rules for todo.items collection. Read Rule Write Rule Validation Rule Allow All Other Fields Filters Add authentication information. Facebook Google Download the ToDo application. Update index.js with your App Id. Install application dependencies. Start the application. Open a browser to http://localhost:8001/ to access the ToDo app. Next Steps Integrate ToDo with Twilio Prerequisites Procedure Go to your ToDo app in MongoDB Stitch. Add the todo.users collection to the MongoDB service. Review the rules for todo.users collection. Read Rule Write Rule Validation Rule Filters Add your Twilio phone number as a defined value. Define a named pipeline. Add a Twilio service to your ToDo app. Configure tw1 service. Configure tw1 service Incoming Webhooks. Configure tw1 service rule. Create a Messaging Service in Twilio. Run the ToDo application. Associate a phone number with your login id. Add todo items via Twilio. ToDo (Android App) Prerequisites Procedure Log into Atlas. Create an Atlas cluster. Add a MongoDB Stitch application. Configure the MongoDB service. Review the rules for todo.items collection. Read Rule Write Rule Validation Rule Allow All Other Fields Filters Add authentication information in MongoDB Stitch. Facebook Google Download the ToDo Android application source. Open the project in Android Studio. Update project with your MongoDB Stitch App ID. Update project with your Facebook App ID. Review MongoDB Stitch connection logic in application source file. Run the todo app. ToDo (iOS App) Prerequisites Procedure Log into Atlas. Create an Atlas cluster. Add a MongoDB Stitch application. Configure the MongoDB service. Review the rules for todo.items collection. Read Rule Write Rule Validation Rule Allow All Other Fields Filters Add authentication information in MongoDB Stitch. Facebook Google Download the ToDo iOS application source. Open the project in Xcode. Update Xcode project with your MongoDB Stitch App ID. Update project with your Facebook App ID. Add Google .plist file. Review MongoDB Stitch connection logic in application source file. Run the todo app. PlateSpace Tutorial (Web App) Prerequisites Procedure A. Create a MongoDB Stitch App Log into Atlas. Create an Atlas cluster. Add a MongoDB Stitch application. B. Define Pipelines Define a named pipeline userHasMoreThanOneReview. Define a named pipeline userHasSingleReview. Define a named pipeline geoNear. Define a named pipeline aggregateRestaurant. Define a named pipeline updateRatings. C. Define Rules Add rules for each collection the MongoDB service must access. Review the rules for platespace.restaurants collection. Review the rules for platespace.reviewsRatings collection. D. Set Up Facebook Auth Set up an app in Facebook. Retrieve the App ID and App Secret for your Facebook app. Configure MongoDB Stitch for Facebook Authentication. E. Set Up Anonymous Auth Click Authentication in the left side navigation in the MongoDB Stitch console. Enable Anonymous Authentication. F. Download the PlateSpace Application Source G. Populate the restaurants Collection from Yelp. Create a new Yelp app. Get an auth token for your Yelp app. Edit the config.js file with your Yelp token. Edit the config.js file with your Atlas cluster connection info. Add IP Address to your Atlas cluster\u2019s IP Whitelist. Load data into restaurants collection. H. Set Up and Run PlateSpace App Go to the PlateSpace web app directory. Ensure MongoDB Stitch SDK library is a dependency for the project. Update the application configuration with your MongoDB Stitch App Id. Review code to connect to MongoDB Stitch. Review code to authenticate application users. Review code to access the MongoDB service and collections. Review code to excute pipelines. Review code to query a collection. Run the PlateSpace Web application. Collection Information Additional Information PlateSpace Tutorial (Android App) Prerequisites Procedure A. Create a MongoDB Stitch App Log into Atlas. Create an Atlas cluster. Add a MongoDB Stitch application. B. Define Pipelines Define a named pipeline userHasMoreThanOneReview. Define a named pipeline userHasSingleReview. Define a named pipeline geoNear. Define a named pipeline aggregateRestaurant. Define a named pipeline updateRatings. C. Define Rules Add rules for each collection the MongoDB service must access. Review the rules for platespace.restaurants collection. Review the rules for platespace.reviewsRatings collection. D. Set Up Facebook Auth Set up an app in Facebook. Retrieve the App ID and App Secret for your Facebook app. Configure MongoDB Stitch for Facebook Authentication. E. Set Up Anonymous Auth Click Authentication in the left side navigation in the MongoDB Stitch console. Enable Anonymous Authentication. F. Download the PlateSpace Application Source G. Populate the restaurants Collection from Yelp. Create a new Yelp app. Get an auth token for your Yelp app. Edit the config.js file with your Yelp token. Edit the config.js file with your Atlas cluster connection info. Add IP Address to your Atlas cluster\u2019s IP Whitelist. Load data into restaurants collection. H. Set Up and Run PlateSpace App Add MongoDB Stitch SDK library as a dependency for the project. Review code to connect to MongoDB Stitch. Review code to authenticate application users. Review code to query a collection and execute pipelines. Run the application. Collection Information \u2190 MongoDB Stitch Build Your First Stitch App \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/index.html",
      "title": "MongoDB Stitch \u2014 MongoDB Stitch (Beta)",
      "text": "MongoDB Stitch\u00b6 MongoDB Stitch is a backend as a service that provides an HTTP API to MongoDB, integration with other services, and a declarative rules infrastructure which spans database and service actions. MongoDB Stitch can: \u27a4 Add a Feature to an Existing Application For existing applications, MongoDB Stitch can facilitate the addition of new features. For example, you can use MongoDB Stitch to: Add commenting to a blog (See Build Your First Stitch App). Add reviews to an e-commerce site Providing richer user profile by allowing users to upload photos. \u27a4 Control How You Expose Data to Users or Anonymous Users For existing Atlas clusters, you can easily and safely expose data to new users or application. For example, you can: Give users an easy way to read their own data (See ToDo Web App). Easily build admin pages exposing anonymous stats to admin users. Display a leaderboard. \u27a4 Integrate with Services If you are not ready to adopt the full functionality of MongoDB Stitch, you can just use MongoDB Stitch to make integrating with services easier. For example: Accept text messages from Twilio and insert into MongoDB (See Integrate ToDo with Twilio). Create a pipeline for GitHub commits to send to XXX and store in MongoDB Send a message to Slack when specific data changes in your database. \u27a4 Be the Full Backend for Your Application Use MongoDB Stitch to be the full backend for your application. For example: Build a Yelp clone (See PlateSpace Web App). Full blog Getting Started Build Your First Stitch App ToDo (Web App) Integrate ToDo with Twilio ToDo (Android App) ToDo (iOS App) PlateSpace Tutorial (Web App) PlateSpace Tutorial (Android App) Examples on GitHub Services MongoDB Service MongoDB Rules Amazon S3 Amazon SES Push Notifications Twilio Service HTTP Service Slack Service Mailgun Service Rules MongoDB Service Rules MongoDB Service Read Rule MongoDB Service Write Rule MongoDB Service Validation MongoDB Service Filters Amazon S3 Service Rules Amazon SES Service Rules GCM Service Rules HTTP Service Rules Twilio Service Rules Slack Service Rules Mailgun Service Rules Pipelines Built-In Actions Named Pipelines MongoDB Service Actions Amazon SES Service Actions Amazon S3 Service Actions Twilio Service Actions HTTP Service Actions Slack Service Actions Mailgun Service Actions Expansions Values Named Pipelines Authentication Email/Password Authentication Google Authentication Facebook Authentication Custom Authentication APIs JavaScript API Android API iOS API Tutorials MongoDB Javascript Tutorial Amazon S3 JavaScript Tutorial HTTP Integration with SendGrid Slack Javascript Tutorial MongoDB Android Tutorial HTTP Android Tutorial Twilio Android Tutorial Getting Started \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": ["MongoDB", "Stitch", "Documentation manual"]
    },
    {
      "slug": "/pipelines.html",
      "title": "Pipelines \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines\u00b6 On this page Service Actions Clients Examples MongoDB Stitch provides the ability to define a sequence of actions to perform as a pipeline. Pipelines are written in simple JSON. Pipelines can be constructed in the UI and referenced by name in code, or coded directly with SDKs. Pipelines can use expansions to pass information from one stage to another or incorporate information from outside the pipeline stage Information can be passed from one stage to another with let. Information about requesting user can be incorporated with %%user. Global variables can be defined in Stitch and referenced with %%values. Information about the current or prior state of a document or field can be incorporated through MongoDB expansions. Some services like Twilio can execute a pipeline as a response to an incoming webhook. A pipeline consists of stages. Pipeline stages are executed in order. Each stage specifies an action to perform via a service. Each stage passes its output on as input for the next stage, and the final result, if any, is returned to the application client. A pipeline can consist of stages that use different MongoDB Stitch services. Syntactically, a pipeline consists of an array of documents, one document per stage. Each document specifies a service, an action, and any required arguments for the action. Optionally, you can also define variables to use in the arguments. [ { \"service\": <servicename>, \"action\": <action>, \"args\": <argument document>, \"let\": <variable document> }, ... }] Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. Service Actions\u00b6 Built In Actions\u00b6 Action Description match Filters its input documents. literal Explicitly defines its output documents. expr Evaluates an expression against each input document and outputs the evaluated documents. project Determines which fields to include or exclude in the output documents. null Does nothing and outputs nothing. binary Decodes base64 or hexadecimal encoded data and outputs as binary data stream. encode Encodes incoming binary data into specified format. MongoDB Service Actions\u00b6 Action Description find Queries a collection in MongoDB. insert Inserts the stage\u2019s input documents into the specified MongoDB collection. update Modifies one or more documents in a MongoDB collection. aggregate Executes an aggregation pipeline. delete Deletes documents from a MongoDB collection. Amazon S3 Service Actions\u00b6 Action Description put Uploads a binary data to an S3 bucket. signPolicy Generates a document that contains the policy, signature, and accessKeyId, which you can use to issue a POST request directly to S3. Amazon SES Service Actions\u00b6 Action Description send Sends an email message to a specified address. Twilio Service Actions\u00b6 Action Description send Sends an email message to a specified address. HTTP Service Actions\u00b6 Action Description get Corresponds to the HTTP method GET. post Corresponds to the HTTP method POST. put Corresponds to the HTTP method PUT. delete Corresponds to the HTTP method DELETE. head Corresponds to the HTTP method HEAD. patch Corresponds to the HTTP method PATCH. Slack Service Actions\u00b6 Action Description post Sends a Slack message to a specified channel. Clients\u00b6 You can call the pipeline from your application client to execute the pipeline. JavaScript SDK\u00b6 To execute a pipeline, use the StitchClient.executePipeline() method. For example: stitchClient.executePipeline([ { \"service\":\"\",\"action\":\"literal\", \"args\":{ \"items\":[ {\"customer\":\"A\",\"item\": \"oranges\",\"qty\":10}, {\"customer\":\"B\",\"item\":\"grapes\", \"qty\": 50}, {\"customer\":\"A\",\"item\": \"oranges\",\"qty\":10}, {\"customer\":\"B\",\"item\":\"apples\", \"qty\": 10} ] } }, { \"service\":\"mongodb-atlas\",\"action\":\"insert\",\"args\":{\"database\":\"my_db\",\"collection\":\"orders\"} } ]); Android SDK\u00b6 To execute a pipeline, use the StitchClient.executePipeline() method.For example: final List<PipelineStage> pipeline = new ArrayList<>(); final Map<String, Object> binaryStage = new HashMap<>(); binaryStage.put(\"encoding\", \"base64\"); binaryStage.put(\"data\", Base64.encodeToString(text.getBytes(), Base64.DEFAULT)); pipeline.add(new PipelineStage(\"binary\", binaryStage)); stitchClient.executePipeline(pipeline).addOnCompleteListener( //... ); The Debug Console\u00b6 The MongoDB Stitch console provides a facility for testing pipelines in the Debug Console. You can reach the Debug Console through the admin console\u2019s left-side navigation. To use the Debug Console for testing pipelines, select an application user for the pipeline to run as at the top of the screen, then assemble your pipeline stages with the form inputs. Examples\u00b6 Built-In Actions\u00b6 A very simple pipeline is one with a single stage in which the built-in literal action returns an array of items. [ { \"action\": \"literal\", \"args\": { \"items\": [ { \"type\": \"apples\", \"qty\": 25 }, { \"type\": \"oranges\", \"qty\": 50 } ] } } ] The above pipeline returns the following to the client: [ { \"type\": \"apples\", \"qty\": { \"$numberDouble\": \"25\" } }, { \"type\": \"oranges\", \"qty\": { \"$numberDouble\": \"50\" } } ] Note When using the literal action, the args object must include an array called items. The MongoDB Service\u00b6 In order to use the MongoDB service in a pipeline stage, you must have rules set up for each namespace included in the operation. The following example uses a collection called cars in a database called vehicles, with the following documents: { \"_id\": 1, \"make\": \"Honda\", \"model\": \"Accord\", \"doors\": 4 } { \"_id\": 2, \"make\": \"Ford\", \"model\": \"Mustang\", \"doors\": 2 } { \"_id\": 3, \"make\": \"Toyota\", \"model\": \"Camry\", \"doors\": 4 } The following pipeline uses the service mdb1 to find 2-door cars, then uses the built-in project action to display only the make and model fields. [ { \"service\": \"mdb1\" \"action\": \"find\", \"args\": { \"collection\": \"cars\", \"database\": \"vehicles\", \"query\": { \"doors\": 2 } }, }, { \"action\": \"project\", \"args\": { \"projection\": { \"make\": 1, \"model\": 1 } } } ] The above pipeline returns the following array to the client: [ { \"make\": \"Ford\", \"model\": \"Mustang\" } ] Binary Stages\u00b6 One use case for a MongoDB Stitch application could be to allow users to upload binary data to an Amazon S3 bucket. You can accomplish this in a pipeline which uses the S3 service and the built-in binary action. The following example takes a hex-encoded string and decodes it to binary. The binary data passes to the next stage, which uses a put action to upload it to an S3 bucket. [ { \"action\": \"binary\", \"args\": { \"data\": \"68656c6c6f\", \"encoding\": \"hex\" } }, { \"service\": \"my-s3-service\", \"action\": \"put\", \"args\": { \"contentType\": \"text/plain\", \"acl\": \"public-read\", \"bucket\": \"my-bucket-name\", \"key\": \"test-object\" } } ] The document returned to the client has the following form: { \"location\": \"https://my-bucket-name.s3-us-west-2.amazonaws.com/test-object\" } Note In the above example, the key argument to the S3 service represents the path to the object in the S3 bucket, relative to server root. It must not begin with /. To take binary data and convert it to an encoded string, use the built-in encode action. The following pipeline stage accepts incoming binary data until EOF is reached and returns it as a single document. { \"action\": \"encode\", \"args\": { \"encoding\": \"base64\" } } The output document has the following form: { data: \"<encoded data>\"} The Twilio Service\u00b6 The following example uses a MongoDB database called people and a collection called users with the following documents: { \"_id\" : 1, \"name\" : \"Amos\", \"city\" : \"Boston\", \"phone\" : \"+15558907614\" } { \"_id\" : 2, \"name\" : \"Barbara\", \"city\" : \"Atlanta\", \"phone\" : \"+15558340186\" } { \"_id\" : 3, \"name\" : \"Chet\", \"city\" : \"Boston\", \"phone\" : \"+15553528799\" } The following pipeline combines a find call to a MongoDB service called mongodb-atlas with a send call to a Twilio service called tw1. It sends a text message to all the users who meet the specified criteria. The first stage retrieves all documents with Boston in the city field and passes them on to the next stage. The second stage uses a let statement to iterate over all the documents passed to it from the first stage. The %%item expansion holds the data for each document as it passes through, and the %%vars expansion makes the %%item data available to the stage arguments. [ { \"service\": \"mongodb-atlas\" \"action\": \"find\", \"args\": { \"database\": \"people\", \"collection\": \"users\", \"query\": { \"city\": \"Boston\" } } }, { \"service\": \"tw1\", \"action\": \"send\", \"let\": { \"toPhone\": \"%%item.phone\" }, \"args\": { \"to\": \"%%vars.toPhone\", \"from\": \"+15553776250\", \"body\": \"Looks like rain today. Bring an umbrella!\" } } ] The two users from Boston receive a text message via Twilio. A successful pipeline response returns an empty array to the client. Built-In Actions Named Pipelines MongoDB Service Actions Amazon SES Service Actions Amazon S3 Service Actions Twilio Service Actions HTTP Service Actions Slack Service Actions Mailgun Service Actions \u2190 Mailgun Service Rules Built-In Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules.html",
      "title": "Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules\u00b6 Specify rules to provide control over the actions for a service. Service rules can limit which service actions can be executed and how they can be executed. Rules are written in a simple, declarative manner that maps to standard JSON. Rules can call expansions or pipelines for increased flexibility. Rules use familiar syntax from the MongoDB query language. MongoDB rules can ensure the following at the document or field level: Data can be read by a client or request (read). Data can be written by a client or request(write). Data is valid when it conforms to chosen guidelines (validation). For details on the rules for specific service, see: MongoDB Service Rules MongoDB Service Read Rule MongoDB Service Write Rule MongoDB Service Validation MongoDB Service Filters Amazon S3 Service Rules Amazon SES Service Rules GCM Service Rules HTTP Service Rules Twilio Service Rules Slack Service Rules Mailgun Service Rules \u2190 Mailgun Service MongoDB Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/search.html",
      "title": "Search \u2014 MongoDB Stitch (Beta)",
      "text": "Search $('#fallback').hide(); // hide unnecessary text if we are displaying search results if ((function getParameterByName(name) { name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\"); var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"), results = regex.exec(location.search); return results == null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \")); })('query')) { $('.search-header').hide(); } Please activate JavaScript to enable the search functionality. From here you can view your search results. Enter your search words into the box at the top right of the page and press \"Enter\". Note that the search function will automatically search for all of the words. Pages containing fewer words won't appear in the result list. \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services.html",
      "title": "Services \u2014 MongoDB Stitch (Beta)",
      "text": "Services\u00b6 You can integrate MongoDB Stitch with Atlas cluster and partner services to facilitate the execution of common actions. For example: Authenticate users with Facebook or Google. Send e-mails, text messages, or slack messages. Send Push notifications through GCM. Store files in S3. Use our HTTP service to integrate with other services and APIs. You integrate an Atlas cluster with MongoDB Stitch during the creation of the MongoDB Stitch application. For details on the services, see: MongoDB Service MongoDB Rules Amazon S3 Amazon SES Push Notifications Twilio Service HTTP Service Slack Service Mailgun Service \u2190 PlateSpace Tutorial (Android App) MongoDB Service \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/tutorials.html",
      "title": "Tutorials \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials\u00b6 The following tutorials are available: JavaScript App Amazon S3 Integration HTTP Integration with SendGrid MongoDB Integration PlateSpace Tutorial (Web App) Slack Integration Android App MongoDB Integration Twilio Integration HTTP Integration with AWS Lambda PlateSpace Tutorial (Android App) MongoDB Javascript Tutorial Amazon S3 JavaScript Tutorial HTTP Integration with SendGrid Slack Javascript Tutorial MongoDB Android Tutorial HTTP Android Tutorial Twilio Android Tutorial \u2190 APIs Integrate the MongoDB Service into a Web Application using Javascript \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/auth/custom-auth.html",
      "title": "Custom Authentication \u2014 MongoDB Stitch (Beta)",
      "text": "Authentication > Custom Authentication Custom Authentication\u00b6 On this page Overview Elements Usage Overview\u00b6 Stitch allows developers to issue custom credentials to users of their app. Custom authentication requires each user to have an ID which is unique within the app. To get started with custom authentication for your app: Select Authentication from the MongoDB Stitch admin console left-side navigation Click the Edit button in the Custom Authentication row. Toggle the switch to enable custom authentication. Select desired optional user metadata. The Signing Key is part of the JSON Web Token which the application client exchanges with the server. Each app has a unique signing key which allows it to identify authenticated client requests. You can refer back to your signing key here when you are ready to start creating JWTs. Elements\u00b6 Custom authentication uses JSON Web Tokens (JWT), an open, industry standard RFC 7519 method for representing claims securely between two parties. A JWT consists of three parts: a header, a payload and a signature. The header looks like this: { \"alg\": \"HS256\", \"typ\": \"JWT\" } The payload is an object with some fields common to all JWTs and some which are particular to MongoDB Stitch. A JWT for use with MongoDB Stitch custom authentication uses have the following fields: { \"aud\": \"clientAppID\", \"sub\": \"uniqueUserID\", \"iat\": \"1495574829\", \"nbf\": \"1495578429\", \"exp\": \"1495578429\", \"stitch_meta\": { \"email\": \"name@example.com\", \"name\": \"Joe Bloggs\", \"picture\": \"http://example.com/joe_bloggs.jpg\" } } The payload fields are populated as follows: aud\u00b6 Audience. Populate with the App ID for your client application. sub\u00b6 Subject. A unique user ID in your authentication system. iat\u00b6 Issued at. Number containing a NumericDate value indicating the time at which the token should become valid. Optional nbf\u00b6 Not before. Functionally identical to iat. Optional exp\u00b6 Expires. Number containing a NumericDate value indicating the time at which the token expires. MongoDB Stitch will not accept expired tokens for authentication. stitch_meta\u00b6 Email, Name, Picture: three fields containing client application user data. Optional The token\u2019s signature consists of a hash of the header, the payload, and your signing token. Usage\u00b6 For web apps, you can create a signature for your token with a JavaScript library such as jsrsasign. var sJWT = KJUR.jws.JWS.sign(\"HS256\", sHeader, sPayload, \"<your-signing-key>\"); In the above operation, sHeader is the header, sPayload is your payload, and <your-signing-key> is the signing key you received from when you enabled custom authentication. sJWT is the resulting signed token. For Android apps, you can create JSON web tokens in Java with a tool such as jjwt. See the documentation for setup and usage instructions. Once you have a signed token, you can send it in a POST request to MongoDB Stitch and receive authenticated session data in return, as shown below. curl -H \"Content-Type:text/plain\" --data 'my-signed-token' \\ https://stitch.mongodb.com/api/client/v1.0/app/<my-app-id>/auth/custom/token The response resembles the following: { \"refreshToken\": \"very-long-string\", \"accessToken\": \"even-longer-string\", \"user\": { \"domainId\": \"58f1314cb4d53a4e4be4f88a\", \"_id\": \"5926018e57e0fa2b9f792b38\", \"identities\": [ { \"id\": \"my-custom-id\", \"provider\": \"custom/token\" } ], \"data\": {}, \"sessionsValidSince\": 1495662990, \"type\": \"normal\" }, \"deviceId\": \"000000000000000000000000\", \"provider\": \"custom/token\" } \u2190 Facebook Authentication APIs \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/auth/email-auth.html",
      "title": "Email/Password Authentication \u2014 MongoDB Stitch (Beta)",
      "text": "Authentication > Email/Password Authentication Email/Password Authentication\u00b6 On this page Enable and Configure Email/Password Authentication Incorporate into a Web Application MongoDB Stitch provides the option for your app users to authenticate with their email and password. Enable and Configure Email/Password Authentication\u00b6 To configure for email/password authentication, Click Authentication. The page displays the Authentication Providers. For Email/Password, click the Edit button. In the Edit Provider dialog, Switch the Email/Password to enabled. Enter values for the following fields as appropriate: Field Description Email Confirmation URL Required. The base URL for the confirmation URL sent to users to confirm their email address. The confirmation URL is sent to the user via email and includes the query parameters token and tokenId. For the base URL, you must include the URL scheme, such as http or https. For example, https://myapp.example.com/foo/confirm.aspx. The confirmation script must parse the token and tokenId and call the emailConfirm() function. See Incorporate into a Web Application below. Email Confirmation Subject Optional. The subject of the email sent to users to confirm their email address. Maximum length is 256 characters. For example, MyApp Email Address Confirmation If unspecified, MongoDB Stitch uses a default subject. Password Reset URL Required. The base URL for the password reset URL sent to users to reset their password. The reset URL is sent to the user via email and includes the query parameters token and tokenId. For the base URL, you must include the URL scheme, such as http or https. For example, https://myapp.example.com/reset-pwd-verify The password reset script must parse the token and tokenId and call the passwordReset() function. See Incorporate into a Web Application below. Reset Password Email Subject Optional. The subject of the email sent to users to reset their password. Maximum length is 256 characters. For example, MyApp Password Reset If unspecified, MongoDB Stitch uses a default subject. Click Save. Incorporate into a Web Application\u00b6 To incorporate into a web application: Note The following lists the code snippets to incorporate MongoDB service into a web application. The numbered list of items is not meant to be a comprehensive step-by-step procedure. In your HTML file, include the MongoDB Stitch library . <script defer type=\"text/javascript\" src=\"https://s3.amazonaws.com/stitch-sdks/js/library/298a2b586d91d462099e5d9f66fba0a687837abe/stitch.min.js\"></script> In your JavaScript file, include the code to instantiate a StitchClient: import { StitchClient } from 'stitch'; const stitchClient = new StitchClient('<your-app-id>'); Replace <your-app-id> with your MongoDB Stitch app ID. In the MongoDB Stitch console, you can find your App ID in the Clients view. To register a user\u2019s email and password, the StitchClient provides the register() function . stitchClient.register('<user-email>', '<user-password>'); The user will be sent a confirmation email with the confirmation link. The confirmation link includes token and tokenId query parameters. When the user clicks on the link, the confirmation script must parses the token and tokenId and pass to the emailConfirm() function. stitchClient.auth.provider('userpass').emailConfirm('<tokenid>', '<token>'); Once the user email has been confirmed, the user can login with the registered email and password. To login with a user\u2019s email and password, the StitchClient provides the login() function . stitchClient.login('<user-email>', '<user-password>'); To send user an email to reset the password, use the sendPasswordReset() function. stitchClient.auth.provider('userpass').sendPasswordReset('<user-email>'); The user will be sent an email with a password reset link. The reset link includes token and tokenId query parameters. To reset the password after the user clicks on the link, the reset password script must parse the token and tokenId and pass to the passwordReset() function along with the new password. stitchClient.auth.provider('userpass').passwordReset('<tokenid>', '<token>', '<newpassword>'); \u2190 Authentication Google Authentication \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/auth/facebook-auth.html",
      "title": "Facebook Authentication \u2014 MongoDB Stitch (Beta)",
      "text": "Authentication > Facebook Authentication Facebook Authentication\u00b6 On this page A. Create OAuth Client ID Credentials B. Enable and Configure Facebook Authentication in MongoDB Stitch A. Create OAuth Client ID Credentials\u00b6 Follow the directions in Facebook - Register and Configure an App to create OAuth client ID credentials. Once created, go to the Product Setup view for your application. Click Get Started for Facebook Login. The screen should display the Quickstart instructions. To incorporate into your application, follow the Quickstart instructions for your platform. When finished, in the Facebook Login > Settings, add the following entry in Valid OAuth redirect URIs: https://stitch.mongodb.com/api/client/v1.0/auth/callback B. Enable and Configure Facebook Authentication in MongoDB Stitch\u00b6 Once you have the App ID and App Secret, in the MongoDB Stitch console: Tip You can find the App ID and App Secret in the main Settings section for your application (i.e. not the Settings under Facebook Login). Click Authentication. The page displays the Authentication Providers. For Facebook, click the Edit button. In the Edit Provider dialog, Switch the Facebook to enabled. Enter your Client ID and Client Secret. For web applications, enter the Redirect URIs. Click Save. See ToDo (Web App) ToDo (Android App) \u2190 Google Authentication Custom Authentication \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/auth/google-auth.html",
      "title": "Google Authentication \u2014 MongoDB Stitch (Beta)",
      "text": "Authentication > Google Authentication Google Authentication\u00b6 On this page Google OAuth Client ID for Web Application Google OAuth Client ID For Android Applications Follow the directions in https://support.google.com/cloud/answer/6158849?hl=en to create OAuth client ID credentials for your application. Application Required Google OAuth Credentials Web Applications OAuth for Web application type For an example, see ToDo (Web App). Android Applications OAuth for Web application type and OAuth for Android application type For an example, see ToDo (Android App). Google OAuth Client ID for Web Application\u00b6 \u27a4 A. Create OAuth client ID with the following configuration: For Application Type, select Web application. For Name, enter the name you want to associate with this application. For Authorized JavaScript origins, enter the following: https://stitch.mongodb.com For Authorized redirect URIs, enter the following: https://stitch.mongodb.com/api/client/v1.0/auth/callback \u27a4 B. Once you have the Web client ID and secret, in the MongoDB Stitch console: Click Authentication. The page displays the Authentication Providers. For Google, click Edit. In the Edit Provider dialog, Switch Google to enabled. Enter your Client ID and Client Secret. For web applications, enter the Redirect URIs. Click Save. See ToDo (Web App) for an example. Google OAuth Client ID For Android Applications\u00b6 Tip For Android Applications, you need to create the Google OAuth Client ID for Web Application and OAuth client ID for Android Applications. Create OAuth client ID with the following configuration: For Application Type, select Android. For Name, enter a name to associate with the app. For Signing-certificate fingerprint, enter the SHA1 fingerprint. To generate the SHA1 fingerprint, in a terminal, run keytool -exportcert -alias androiddebugkey -keystore <path to debug.keystore> -list -v For example: keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v Tip If using debug.keystore, the password is android. Enter the SHA1 fingerprint. For more information and an example, see Google Setting up OAuth 2.0 Help page Enter the package name for your project. The package name can be found in your application project\u2019s AndroidManifest.xml file. See ToDo (Android App) for an example. \u2190 Email/Password Authentication Facebook Authentication \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/http-android.html",
      "title": "HTTP Android Tutorial \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > HTTP Android Tutorial HTTP Android Tutorial\u00b6 On this page Considerations Prerequisites Procedure Example Code This tutorial uses a simple XOR cipher to encrypt or decrypt a string. The application uses the MongoDB Stitch SDK to perform anonymous user authentication and uses the MongoDB Stitch HTTP service to perform the XOR cipher using AWS Lambda. Considerations\u00b6 For complete documentation on the MongoDB Stitch Android SDK, see the MongoDB Stitch Android SDK API. This tutorial assumes prior knowledge and experience in topics including, but not limited to: Android Development, including Android Studio Java and XML programming in context to Android development Amazon Web Services components, including API Gateway and AWS Lambda. Prerequisites\u00b6 Android Development\u00b6 This tutorial requires using Android Studio. The minimum supported Android API level for MongoDB Stitch is 19 (Android 4.4. KitKat). Authentication\u00b6 This tutorial provides instructions on using MongoDB Stitch anonymous user authentication. While MongoDB Stitch supports Facebook and Google user authentication, those integrations are out of scope for this tutorial. To enable Anonymous authentication for your MongoDB Stitch application, Log in to Atlas and go to Stitch Apps. Select your MongoDB Stitch application. You will be redirected to the MongoDB Stitch console to the Getting Started page. If you are not on the Getting Started page, click Getting Started in the left-hand navigation bar. Click Turn On Authentication. Toggle the Anonymous Authentication switch. For complete documentation on configuring authentication in MongoDB Stitch, see Authentication. Amazon Web Services Components\u00b6 This tutorial assumes a working AWS Lambda function connected to an AWS API Gateway endpoint. At a high level, to integrate a MongoDB Stitch app with AWS Lambda: Create the Lambda function. See the AWS Lambda documentation. For a copy of the Lambda code used for this example, see MongoCipher.py. Create an API gateway endpoint and configure it as necessary to support the AWS Lambda function. Ensure you have deployed your AWS API gateway endpoint and that security is configured such that MongoDB Stitch can access the endpoint. See the Amazon API Gateway documentation. Configure the API gateway endpoint to invoke the Lambda function. See the relevant documentation. Refer to the tutorial procedure for instructions on configuring the MongoDB Stitch HTTP service and connecting it to the AWS API gateway endpoint and AWS Lambda function. Procedure\u00b6 1 Configure HTTP Service in MongoDB Stitch for use with AWS Lambda.\u00b6 In the MongoDB Stitch console, click Add Service in the left hand navigation panel. Select HTTP from the selection screen. Enter AWSLambda in the Service Name box at the bottom of the selection screen, then click Add Service. In the left hand navigation bar under Services, click the new AWSLambda service. Under Rules, click Add Rules. From the Actions checklist, select the HTTP methods to enable. For this tutorial, select POST. In the When text entry, add the host portion of each API endpoint to the %in array. Click Save. For example: { \"%%args.url.host\": { \"%in\": [ \"abcd1234.execute-api.aws-region-1.amazonaws.com\" ] } } With this rule, MongoDB Stitch only allows HTTP POST methods executed using the HTTP service whose full host URL matches one of the URLs in the %in array. For example, the provided rule allows HTTP POST requests tothe API Gateway endpoint https://abcd1234.execute-api.aws-region-1.amazonaws.com/prod, but not https://wxyz9876.execute-api.aws-region-1.amazonaws.com/prod. 2 Create a Named Pipeline for Posting Data to the API Gateway Endpoint.\u00b6 In the MongoDB Stitch console, click Named Pipelines in the left hand navigation panel. Click New Named Pipeline. Configure the pipeline as follows: Enter AWSLambdaPipeline for the Name. Click Add Parameter twice to add two new parameters. Enter message for the first parameter and key for the second parameter. Select Required for each parameter. MongoDB Stitch creates a simple default built-in stage. To edit, hover your mouse over the stage and click the edit button in the top right hand corner. For Service, select AWSLambda. For Action, select post. In the post argument text entry box, copy in the following: { \"url\": \"<API Gateway Endpoint>\", \"body\": { \"message\": \"%%vars.message\", \"key\": \"%%vars.key\" } } Replace API Gateway Endpoint with the API Gateway URL connected to the Lambda function. Note The message and key variables are defined below. The stage cannot directly access the parameters passed to the pipeline. Instead, you bind the parameters to stage-defined variables to access them (using the %%vars expansion). Enable the Bind data to %%vars switch. Copy in the following to the %%vars text entry: { \"message\" : \"%%args.message\", \"key\" : \"%%args.key\" } This binds the variable message to the pipeline parameter message (using the %%args) and the variable key to the pipeline parameter key (using the %%args). The variables message and key are accessible in the stage using the expansion %%vars. 3 Link the Stitch SDK to Your Android Application.\u00b6 Open your Android project in Android Studio. If you have not already created a new project with an empty activity, do so now and name it MongoCipher. The remaining steps in this procedure involve adding to or modifying the Android project. In the Project tab for MongoCipher, expand Gradle Scripts. Open the build.gradle file labeled (Module: app). Add the highlighted lines to the dependencies block: dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', { exclude group: 'com.android.support', module: 'support-annotations' }) compile 'com.android.support:appcompat-v7:25.2.0' compile 'com.android.support.constraint:constraint-layout:1.0.1' testCompile 'junit:junit:4.12' compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' } Android studio may prompt you to sync changes to your project; if so, hit Sync Now. If not, open the Build menu and select Rebuild Project. 4 Add necessary import statements.\u00b6 The following import statements cover the bare minimum requirements for using MongoDB Stitch for anonymous authentication and interacting with a MongoDB server via the MongoDB Stitch MongoDB service: import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.PipelineStage; import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; 5 Create and Instantiate StitchClient.\u00b6 The MongoDB Stitch SDK provides the following class for interfacing with the MongoDB Stitch SDK and the MongoDB Stitch HTTP service: StitchClient(Context context, String clientAppID) This object handles interactions between the application and the MongoDB Stitch service, MongoDB Stitch authentication, and MongoDB Stitch pipelines. Takes the current context and a string representing the MongoDB Stitch application ID as parameters. To locate your application ID, click Clients in the navigation panel and retrieve the value for App ID. Create and instantiate the StitchClient class in your application. The following example instantiates the class in the onCreate() method of MainActivity.java. It also creates private variables for use with this procedure. private static final String APP_ID = \"STITCH-APP-ID\"; private static String TAG = \"STITCH\"; private static final String HTTP_SERVICE_NAME = \"STITCH-HTTP-SERVICE\"; private static final String HTTP_SERVICE_ACTION = \"post\"; private static final String STITCH_SERVICE_ACTION = \"expr\"; private StitchClient _client; @Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); _client = new StitchClient(this, APP_ID); Replace the STITCH-APP-ID with your MongoDB Stitch application ID and replace STITCH-HTTP-SERVICE with AWSLambda. To retrieve your MongoDB Stitch application ID, from the MongoDB Stitch UI click Clients. Copy the value of App ID and replace STITCH-APP-ID. 6 Retrieve Authentication Providers from MongoDB Stitch and Perform Anonymous User Authentication.\u00b6 The MongoDB Stitch SDK provides the following objects and related methods for retrieving the authentication providers configured for the MongoDB Stitch application, as well as performing authentication using a given authentication provider. StitchClient.getAuthProviders() Returns a Task<AvailableAuthProviders> object. The AvailableAuthProviders class provides methods for checking which authentication providers are configured for the MongoDB Stitch application. AvailableAuthProviders.hasAnonymous() Returns a boolean. If true, the MongoDB Stitch application has anonymous authentication configured. StitchClient.logInWithProvider(AuthProvider authProvider) Returns a Task<Auth> object. Takes an AuthProvider object, such as the AnonymousAuthProvider() class. Use the StitchClient.getAuthProviders() method to retrieve the configured authentication providers for the specified MongoDB Stitch application. Use the StitchClient.logInWithProvider() to log in with the specified authentication provider. The following example retrieves the authentication providers for the MongoDB Stitch application and, if anonymous authentication is configured, performs anonymous authentication. _client.getAuthProviders().addOnCompleteListener(new OnCompleteListener<AvailableAuthProviders>() { @Override public void onComplete(@NonNull final Task<AvailableAuthProviders> task) { if (!task.isSuccessful()){ Log.e(TAG, \"Could not retrieve authentication providers\"); } else { Log.i(TAG, \"Retrieved authentication providers\"); if (task.getResult().hasAnonymous()){ _client.logInWithProvider(new AnonymousAuthProvider()).continueWith(new Continuation<Auth, Object>() { @Override public Object then(@NonNull final Task<Auth> task) throws Exception { if (task.isSuccessful()) { Log.i(TAG,\"User Authenticated as \" + _client.getAuth().getUser().getId()); 7 Invoke the AWS Lambda function.\u00b6 The MongoDB Stitch SDK provides the following method for executing a pipeline: StitchClient.executePipeline(PipelineStage stages) Takes a StitchClient.PipelineStage object that describes the pipeline to execute. Returns a Task object containing the result of the pipeline. The application provides two options for invoking the AWS function: Execute a MongoDB Stitch pipeline using the AWS Lambda HTTP service. public void executeLambdaWithHTTPService(final String msg,final String key,final String cipherDecipher){ final Map<String, Object> cipher = new HashMap<>(); // The Amazon API Gateway URL endpoint should link to your AWS Lambda function cipher.put(\"url\" , \"<AMAZON API GATEWAY URL ENDPOINT>\" ); final Map<String,Object> args = new HashMap<>(); args.put(\"message\",msg); args.put(\"key\",key); cipher.put(\"body\",args); final PipelineStage pipeline = new PipelineStage(HTTP_SERVICE_ACTION,HTTP_SERVICE_NAME,cipher); _client.executePipeline(pipeline).addOnCompleteListener(new OnCompleteListener<List<Object>>() { @Override public void onComplete(@NonNull Task<List<Object>> task) { if (!task.isSuccessful()){ Log.e(TAG, \"Failed to execute pipeline: \" + task.getException()); } else { TextView tv; if (cipherDecipher.equalsIgnoreCase(\"cipher\")){ tv = (TextView) findViewById(R.id.cipheredMessage); } else if (cipherDecipher.equalsIgnoreCase(\"decipher\")){ tv = (TextView) findViewById(R.id.decipheredMessage); } else { Log.e(TAG, \"Reached impossible case\"); return; } Document result; if (task.getResult().equals(null)){ result = new Document(\"body\",\"\"); } else { result = (Document) task.getResult().get(0); } String res = result.get(\"body\").toString(); tv.setText(\"Message:\" + res); } } }); } Execute a MongoDB Stitch pipeline that calls the AWSLambda named pipeline. public void executeLambdaWithNamedPipeline(final String msg,final String key,final String cipherDecipher){ final Map<String, Object> expression = new HashMap<>(); final Map<String, Object> cipher = new HashMap<>(); final Map<String, Object> pipe = new HashMap<>(); pipe.put(\"name\", \"AWSLambdaPipeline\"); final Map<String, Object> args = new HashMap<>(); args.put(\"message\",msg); args.put(\"key\",key); pipe.put(\"args\",args); cipher.put(\"%pipeline\",pipe); expression.put(\"expression\", cipher); final PipelineStage pipeline = new PipelineStage(STITCH_SERVICE_ACTION, expression); _client.executePipeline(pipeline).continueWith(new Continuation<List<Object>, Object>() { @Override public Object then(@NonNull Task<List<Object>> task) throws Exception { if (!task.isSuccessful()){ Log.e(TAG, \"Failed to execute pipeline: \" + task.getException()); } else { TextView tv; if (cipherDecipher.equalsIgnoreCase(\"cipher\")){ tv = (TextView) findViewById(R.id.cipheredMessage); } else if (cipherDecipher.equalsIgnoreCase(\"decipher\")){ tv = (TextView) findViewById(R.id.decipheredMessage); } else { Log.e(TAG, \"Reached impossible case\"); return null; } Document result = (Document) task.getResult().get(0); String res = result.get(\"body\").toString(); tv.setText(\"Message: \" + res); } return null; } }); } Both methods perform essentially the same function. However, by utilizing a named pipeline, you can modify the pipeline without updating the application. Depending on the scope of changes, such as changes to the expected parameters or values, an application update may still be required. Example Code\u00b6 This example code assumes a single-activity application. You can clone or fork the full application code at https://github.com/mongodb/stitch-examples/tree/master/HTTP-service/HTTP-service-android Substitute STITCH-APP-ID for your MongoDB Stitch application ID. Substitute HTTP-SERVICE-NAME for the name of the MongoDB Stitch HTTP service you want the application to use. MainActivity.java\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285package com.mongodb.stitch.examples.mongocipher; import android.content.DialogInterface; import android.support.annotation.NonNull; import android.support.v7.app.AlertDialog; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Switch; import android.widget.TextView; import com.google.android.gms.tasks.Continuation; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.Task; import com.mongodb.stitch.android.StitchClient; import org.apache.commons.lang3.RandomStringUtils; import org.apache.commons.lang3.StringEscapeUtils; import org.bson.Document; // used for authentication and anonymous auth import com.mongodb.stitch.android.PipelineStage; import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; import java.util.HashMap; import java.util.List; import java.util.Map; public class MainActivity extends AppCompatActivity { private static final String APP_ID = \"STITCH-APP-ID\"; private static String TAG = \"STITCH\"; private static final String HTTP_SERVICE_NAME = \"STITCH-HTTP-SERVICE\"; private static final String HTTP_SERVICE_ACTION = \"post\"; private static final String STITCH_SERVICE_ACTION = \"expr\"; private StitchClient _client; @Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); _client = new StitchClient(this, APP_ID); doAnonymousAuthentication(); } public void cipher(View view){ if (!_client.isAuthenticated()){ warnAuth(); return; } String msg, key; TextView messageInput = (TextView) findViewById(R.id.message); if (messageInput.getText().toString().equalsIgnoreCase(\"\")){ warnEmptyInput(); return; } else { msg = StringEscapeUtils.unescapeJava(messageInput.getText().toString()); } TextView keyInput = (TextView) findViewById(R.id.key); key = generateKey(msg); keyInput.setText(\"Secret Key: \" + key); Switch s = (Switch) findViewById(R.id.switchPipeline); if (!s.isChecked()){ executeLambdaWithHTTPService(msg,key, \"cipher\"); } else { executeLambdaWithNamedPipeline(msg,key, \"cipher\"); } } public void decipher(View view){ if (!_client.isAuthenticated()){ warnAuth(); return; } String msg, key; TextView messageInput = (TextView) findViewById(R.id.decryptMessage); if (messageInput.getText().toString().equalsIgnoreCase(\"\")){ warnEmptyInput(); return; } else { msg = StringEscapeUtils.unescapeJava(messageInput.getText().toString()); } TextView keyInput = (TextView) findViewById(R.id.decryptKey); if (keyInput.getText().toString().equalsIgnoreCase(\"\")){ warnEmptyInput(); return; } else { key = keyInput.getText().toString(); } if (msg.length() != key.length()){ warnCipherKeyMismatch(); return; } Switch s = (Switch) findViewById(R.id.switchPipeline); if (!s.isChecked()){ executeLambdaWithHTTPService(msg,key, \"decipher\"); } else { executeLambdaWithNamedPipeline(msg,key, \"decipher\"); } } public void executeLambdaWithHTTPService(final String msg,final String key,final String cipherDecipher){ final Map<String, Object> cipher = new HashMap<>(); // The Amazon API Gateway URL endpoint should link to your AWS Lambda function cipher.put(\"url\" , \"<AMAZON API GATEWAY URL ENDPOINT>\" ); final Map<String,Object> args = new HashMap<>(); args.put(\"message\",msg); args.put(\"key\",key); cipher.put(\"body\",args); final PipelineStage pipeline = new PipelineStage(HTTP_SERVICE_ACTION,HTTP_SERVICE_NAME,cipher); _client.executePipeline(pipeline).addOnCompleteListener(new OnCompleteListener<List<Object>>() { @Override public void onComplete(@NonNull Task<List<Object>> task) { if (!task.isSuccessful()){ Log.e(TAG, \"Failed to execute pipeline: \" + task.getException()); } else { TextView tv; if (cipherDecipher.equalsIgnoreCase(\"cipher\")){ tv = (TextView) findViewById(R.id.cipheredMessage); } else if (cipherDecipher.equalsIgnoreCase(\"decipher\")){ tv = (TextView) findViewById(R.id.decipheredMessage); } else { Log.e(TAG, \"Reached impossible case\"); return; } Document result; if (task.getResult().equals(null)){ result = new Document(\"body\",\"\"); } else { result = (Document) task.getResult().get(0); } String res = result.get(\"body\").toString(); tv.setText(\"Message:\" + res); } } }); } public void executeLambdaWithNamedPipeline(final String msg,final String key,final String cipherDecipher){ final Map<String, Object> expression = new HashMap<>(); final Map<String, Object> cipher = new HashMap<>(); final Map<String, Object> pipe = new HashMap<>(); pipe.put(\"name\", \"AWSLambdaPipeline\"); final Map<String, Object> args = new HashMap<>(); args.put(\"message\",msg); args.put(\"key\",key); pipe.put(\"args\",args); cipher.put(\"%pipeline\",pipe); expression.put(\"expression\", cipher); final PipelineStage pipeline = new PipelineStage(STITCH_SERVICE_ACTION, expression); _client.executePipeline(pipeline).continueWith(new Continuation<List<Object>, Object>() { @Override public Object then(@NonNull Task<List<Object>> task) throws Exception { if (!task.isSuccessful()){ Log.e(TAG, \"Failed to execute pipeline: \" + task.getException()); } else { TextView tv; if (cipherDecipher.equalsIgnoreCase(\"cipher\")){ tv = (TextView) findViewById(R.id.cipheredMessage); } else if (cipherDecipher.equalsIgnoreCase(\"decipher\")){ tv = (TextView) findViewById(R.id.decipheredMessage); } else { Log.e(TAG, \"Reached impossible case\"); return null; } Document result = (Document) task.getResult().get(0); String res = result.get(\"body\").toString(); tv.setText(\"Message: \" + res); } return null; } }); } private void doAnonymousAuthentication() { _client.getAuthProviders().addOnCompleteListener(new OnCompleteListener<AvailableAuthProviders>() { @Override public void onComplete(@NonNull final Task<AvailableAuthProviders> task) { if (!task.isSuccessful()){ Log.e(TAG, \"Could not retrieve authentication providers\"); } else { Log.i(TAG, \"Retrieved authentication providers\"); if (task.getResult().hasAnonymous()){ _client.logInWithProvider(new AnonymousAuthProvider()).continueWith(new Continuation<Auth, Object>() { @Override public Object then(@NonNull final Task<Auth> task) throws Exception { if (task.isSuccessful()) { Log.i(TAG,\"User Authenticated as \" + _client.getAuth().getUser().getId()); } else { Log.e(TAG, \"Error logging in anonymously: \", task.getException()); } return null; } }); } } } }); } private void warnAuth() { new AlertDialog.Builder(this) .setTitle(\"Not Authenticated\") .setMessage(\"The application automatically performs anonymous authentication. If you continue to see this message, check for network connectivity\") .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); return; } private void warnEmptyInput() { new AlertDialog.Builder(this) .setTitle(\"Empty Input\") .setMessage(\"Please enter an alphanumeric string of at least one character.\") .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); return; } private void warnCipherKeyMismatch() { new AlertDialog.Builder(this) .setTitle(\"Cipher Key Mismatch!\") .setMessage(\"The cipher key entered must be the same length as the message. Are you sure you copied the cipher key correctly?\") .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); return; } private String generateKey(String msg){ String key = \"\"; for (int i=0;i<msg.length(); i++){ key = key + RandomStringUtils.randomAlphanumeric(1); } return key; } } activity_main.xml\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90<?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" tools:context=\".MainActivity\"> <Switch android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:id=\"@+id/switchPipeline\" android:text=\"Use Named Pipeline To Cipher or Decipher Message\" android:checked=\"true\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"@string/encryptDesc\" /> <EditText android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:hint=\"Message To Encrypt\" android:id=\"@+id/message\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:hint=\"Secret Key\" android:textIsSelectable=\"true\" android:id=\"@+id/key\" /> <Button android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"CIPHER ME!\" android:onClick=\"cipher\" android:id=\"@+id/cipherButton\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:id=\"@+id/cipheredMessage\" android:textIsSelectable=\"true\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"@string/decryptDesc\" /> <EditText android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:hint=\"Message To Decrypt\" android:id=\"@+id/decryptMessage\" /> <EditText android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:hint=\"Secret Key\" android:id=\"@+id/decryptKey\" /> <Button android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"DECIPHER ME!\" android:onClick=\"decipher\" android:id=\"@+id/decipherButton\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:id=\"@+id/decipheredMessage\" android:textIsSelectable=\"true\" /> </LinearLayout> build.grade (Module: app)\u00b6 Important There may be more than one build.gradle file in your project. You must edit the build.gradle file associated to the application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40apply plugin: 'com.android.application' android { compileSdkVersion 25 buildToolsVersion \"25.0.2\" defaultConfig { applicationId \"com.mongodb.stitch.examples.mongocipher\" minSdkVersion 19 targetSdkVersion 25 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' } } } dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', { exclude group: 'com.android.support', module: 'support-annotations' }) compile 'com.android.support:appcompat-v7:25.2.0' compile 'com.android.support.constraint:constraint-layout:1.0.1' testCompile 'junit:junit:4.12' compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' } repositories { // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } MongoCipher.py\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15def lambda_handler_xor_cipher(message, context): # AWS passes the HTTP request body as a dictionary to the first parameter msg = message.get(\"message\") key = message.get(\"key\") # IMPORTANT: # If the key length is less than the message, # zip() truncates the message to match the key length. if isinstance(msg, str): return \"\".join(chr(ord(a) ^ ord(b)) for a, b in zip(msg, key)) else: # msg and key must be an iterable such as list or tuple return bytes([a ^ b for a, b in zip(msg, key)]) \u2190 Integrate the MongoDB service in your Android Application Twilio Android Tutorial \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/http-external-service.html",
      "title": "HTTP Integration with SendGrid \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > HTTP Integration with SendGrid HTTP Integration with SendGrid\u00b6 On this page App Setup Testing the Pipeline HTML for the App JavaScript for the App Complete app.js File This tutorial provides step-by-step instructions for creating a simple MongoDB Stitch app which allows you to send an email message using a web form. It illustrates several key MongoDB Stitch features: integration with an external API through the HTTP service, setting up rules for the HTTP service, and storing named constants in your app\u2019s values. SendGrid is an email service with an API you can access with HTTP requests. To complete this tutorial, you\u2019ll need: a SendGrid developer API key a MongoDB Stitch app with the HTTP service enabled App Setup\u00b6 Create a new MongoDB Stitch app by visiting the admin console at https://stitch.mongodb.com and selecting Create a new app. Click on Values in the left-side navigation. Create a value named my-email-address with the email address you\u2019d like to appear in the From: field of your messages. Be sure to enclose your address in double quotes in the value field, e.g. \"name@example.com\", and click the Save button to the right. Create another value named sg-api-key and populate it with your SendGrid developer API key. Finally, create a third value named sg-url and populate it with the SendGrid API access URL: \"https://api.sendgrid.com/v3/mail/send\" Click on ADD SERVICE in the left-side navigation. Select HTTP from the list of services and name the service http1. Create a new rule for the http1 service. This lets you control how your app can be used. Click on http1 in the left-side navigation, then select the Rules tab. Click the ADD RULE button and check post in the list of actions. This means that users of your app can only send POST requests with the http1 service. In the WHEN box, remove the default document and add a new document describing conditions which must be met to create a valid POST request. { \"%%args.url.host\": \"api.sendgrid.com\", \"%%args.body.from.email\": \"%%values.my-email-address\", \"%%args.body.personalizations.to.email\": { \"%in\": [ \"name@example.com\", \"other-name@example.com\" ] } } The first condition restricts the URL to which your app can send requests. The second specifies a from address which your request must use, and the third creates a list of addresses to which your app is allowed to send email messages. Click the SAVE button to save your rule. Click the Authentication link in the left-side navigation and make sure the Allow users to log in anonymously row is marked Enabled. On the Authentication page, click the Edit button on the API Keys row. Give your API key a name and click Save. Note For the sake of simplicity this example app allows anonymous user authentication. Any real-world app which involves sending email should use OAuth authentication and take additional security precautions. Testing the Pipeline\u00b6 You can use the MongoDB Stitch Debug Console to make sure your SendGrid API key and your HTTP service are working together correctly. Click Debug Console in the left-side Admin Console navigation. At the top of the page, click the SELECT USER button. In the modal window, select a user. Click the Done button. Mouse over the pipeline stage panel and click the edit icon. Inside the Pipeline panel, select http1 from the SERVICE drop-down menu. Select post from the ACTION drop-down menu. Remove the default arguments from the ARGUMENTS panel. The ARGUMENTS panel is where you enter the arguments you want to pass to your pipeline. For the purposes of this test, use the following document. Replace name@example.com with an address where you can receive email, and be sure that address is also in the list of approved addresses which you added to the http1 service rule. In the first line, %%values.sg-url expands to the value saved in sg-url in your app\u2019s values. In the fourth line, %%vars.auth expands to the value defined in the let statement. { \"url\": \"%%values.sg-url\", \"headers\": { \"Authorization\": [ \"%%vars.auth\" ], \"Content-Type\": [ \"application/json\" ] }, \"body\": { \"personalizations\": [ { \"to\": [ { \"email\": \"name@example.com\" } ] } ], \"from\": { \"email\": \"%%values.my-email-address\" }, \"subject\": \"SG test message\", \"content\": [ { \"type\": \"text/plain\", \"value\": \"This is a test message from SendGrid\" } ] } } Toggle the Bind data to %%vars switch to on. Enter a header document in the %%vars panel. The Authorization header has the following form: \"Authorization\" : [ \"Bearer SG.myverylongsendgridapikey\" ] Your SendGrid API key is stored in your app\u2019s values, so the header requires the $concat operator to create a concatenation of two strings. Enter the following document in the %%vars panel. { \"auth\": { \"%concat\": [ \"Bearer \", \"%%values.sg-api-key\" ] } } Once your pipeline arguments and your %%vars data are set up, hit the EXECUTE button to run your pipeline. If it\u2019s all correct, a long JSON response document appears in the Result panel to the right, and you can check your inbox for the email message. Note Look in your spam folder if you don\u2019t see the message in your inbox. The message is sent by SendGrid but has a different From address, and that can trigger your email client\u2019s spam filter. Possible error responses: no matching rule found The arguments are not meeting the HTTP service validation rules. Either the url argument doesn\u2019t match what\u2019s in the rule, or the to: address is not listed in the rule. The provided authorization grant is invalid, expired, or revoked Something may be wrong with the SendGrid API key you provided. do not know how to expand 'some-variable' There may be a variable in your arguments which the app does not recognize. Check your Values section to make sure everything is spelled correctly. HTML for the App\u00b6 Use your favorite text editor to create a file called index.html. <!doctype html> <html> <head> <title>SendGrid API emailer</title> <meta charset=\"utf-8\"> <script src=\"https://s3.amazonaws.com/stitch-sdks/js/library/stable/stitch.min.js\"></script> <script defer type=\"text/javascript\" src=\"app.js\"></script> <style> body { font-family: \"Helvetica\"; margin-top: 50px; margin-left: 50px; } </style> </head> <body> <h2>SendGrid API emailer</h2> <table> <tr> <td>To:</td> <td><input id=\"toEmail\" type=\"text\" size=\"30\" maxlength=\"40\"> </input></td> </tr> <tr> <td>Subject:</td> <td><input id=\"subject\" type=\"text\" size=\"30\" maxlength=\"50\"> </input></td> </tr> <tr> <td>Message:</td> <td><textarea id=\"messageBody\" rows=\"4\" cols=\"50\" maxlength=\"300\"> </textarea></td> </tr> <tr> <td></td> <td><button id=\"sendButton\">Send email</button></td> </tr> </table> <div> <p id=\"jsonResponse\"></p> </div> </body> </html> You can point your web browser to the new index.html file and see what the web form looks like, but it doesn\u2019t do anything yet. Next you need to create another file in the same directory called app.js. This file contains the JavaScript code to make the app work. JavaScript for the App\u00b6 This section discusses the various elements of the JavaScript file individually. The complete file can be found below. The first section takes care of user authentication. This app allows anonymous authentication, so it doesn\u2019t check any user credentials. document.addEventListener('DOMContentLoaded', () => { 'use strict' // Replace STITCH-APP-ID with your Application ID const stitchClient = new stitch.stitchClient(\"STITCH-APP-ID\"); const sendButton = document.getElementById('sendButton'); // allow anonymous user access for this app function doAnonymousAuth() { stitchClient.authManager.anonymousAuth() .then( result => { console.log(\"authenticated\"); }).catch( err => { console.error(\"Error performing auth\", err) }); } To find your app\u2019s Application ID, visit the front page of the Admin Console. All your apps are listed there with their unique IDs. The anonymousAuth() function passes a boolean to the server to establish whether anonymous authentication is permitted for this app. The next section sets up a MongoDB Stitch pipeline to run when the user clicks the Send email button. sendButton.onclick = () => { const toEmail = document.getElementById(\"toEmail\").value; const subject = document.getElementById(\"subject\").value; const messageBody = document.getElementById(\"messageBody\").value; // check to make sure there's a To: address if (toEmail != \"\") { stitchClient.executePipeline([ { // \"http1\" is the name of our HTTP service service:\"http1\", action:\"post\", let: { \"auth\": { \"%concat\": [\"Bearer \", \"%%values.sg-api-key\"] } }, args: { \"url\": \"%%values.sg-url\", \"headers\": { \"Authorization\": [ \"%%vars.auth\" ], \"Content-Type\": [ \"application/json\" ] }, \"body\": { // include fields required by SendGrid \"personalizations\": [ { \"to\": [{ \"email\": toEmail }] } ], \"from\": { \"email\": \"%%values.my-email-address\" }, \"subject\": subject, \"content\": [ { \"type\": \"text/plain\", \"value\": messageBody } ] } } } The pipeline functions in the same way that it did in the Debug Console, with all the POST request arguments specified in the args object. The service and action are specified at the top of the pipeline. The remaining lines display a confirmation message on success or an error message on failure, and prompt the user if no email address was entered in the form. ]).then (function (result) { if (result) { // show a message for successful execution document.getElementById('jsonResponse').innerText = \"Message successfuly sent to \" + toEmail; } }).catch( err => { // possible errors: invalid URL, invalid API key, To address not on approved list document.getElementById('jsonResponse').innerText = \"Message could not be sent. \" + err; }); } else { // no To address entered document.getElementById('jsonResponse').innerText = \"Please enter an email address.\"; } } Complete app.js File\u00b6 document.addEventListener('DOMContentLoaded', () => { 'use strict' // Replace STITCH-APP-ID with your Application ID const stitchClient = new stitch.stitchClient(\"STITCH-APP-ID\"); const sendButton = document.getElementById('sendButton'); // allow anonymous user access for this app function doAnonymousAuth() { stitchClient.authManager.anonymousAuth() .then( result => { console.log(\"authenticated\"); }).catch( err => { console.error(\"Error performing auth\", err) }); } // execute pipeline when Send button is clicked sendButton.onclick = () => { const toEmail = document.getElementById(\"toEmail\").value; const subject = document.getElementById(\"subject\").value; const messageBody = document.getElementById(\"messageBody\").value; // check to make sure there's a To: address if (toEmail != \"\") { stitchClient.executePipeline([ { // \"http1\" is the name of our HTTP service service:\"http1\", action:\"post\", let: { \"sgUrl\": \"%%values.sg-url\", \"auth\": { \"%concat\": [\"Bearer \", \"%%values.sg-api-key\"] }, \"myEmail\" : \"%%values.my-email-address\" }, args: { \"url\": \"%%vars.sgUrl\", \"headers\": { \"Authorization\": [ \"%%vars.auth\" ], \"Content-Type\": [ \"application/json\" ] }, \"body\": { // include fields required by SendGrid \"personalizations\": [ { \"to\": [{ \"email\": toEmail }] } ], \"from\": { \"email\": \"%%vars.myEmail\" }, \"subject\": subject, \"content\": [ { \"type\": \"text/plain\", \"value\": messageBody } ] } } } ]).then (function (result) { if (result) { // show a message for successful execution document.getElementById('jsonResponse').innerText = \"Message successfully sent to \" + toEmail; } }).catch( err => { // possible errors: invalid URL, invalid API key, To address not on approved list document.getElementById('jsonResponse').innerText = \"Message could not be sent. \" + err; }); } else { // no To address entered document.getElementById('jsonResponse').innerText = \"Please enter an email address.\"; } } doAnonymousAuth() }); \u2190 Amazon S3 JavaScript Tutorial Slack Service Tutorial: Using Slack in a Stitch Web App \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/mongodb-android.html",
      "title": "Integrate the MongoDB service in your Android Application \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > Integrate the MongoDB service in your Android Application Integrate the MongoDB service in your Android Application\u00b6 On this page Considerations Procedure Example Code The MongoDB Stitch Android SDK provides methods for integrating the MongoDB service configured in your MongoDB Stitch application into your Android application. This tutorial integrates the MongoDB Stitch Android SDK into an application that displays data on restaurants in a given city. The application uses the MongoDB Stitch SDK to perform anonymous user authentication and access a MongoDB database via the MongoDB service You can apply the general strategies and structure used in this tutorial as a baseline for utilizing the MongoDB Stitch Android SDK and MongoDB service in your own application. Considerations\u00b6 For complete documentation on the MongoDB Stitch Android SDK, see the MongoDB Stitch Android SDK API. Android Development\u00b6 A full description of Android Studio, Java, and XML is beyond the scope of this tutorial. This tutorial assumes prior knowledge and experience of Android development and its related subject matter. The minimum supported Android API level for MongoDB Stitch is 19 (Android 4.4. KitKat). Authentication\u00b6 This tutorial provides instructions on using MongoDB Stitch anonymous user authentication for interfacing with the MongoDB service. While MongoDB Stitch supports Facebook and Google user authentication, those integrations are out of scope for this tutorial. To enable Anonymous authentication for your MongoDB Stitch application, Log in to Atlas and go to Stitch Apps. Select your MongoDB Stitch application. You will be redirected to the MongoDB Stitch console to the Getting Started page. If you are not on the Getting Started page, click Getting Started in the left-hand navigation bar. Click Turn On Authentication. Toggle the Anonymous Authentication switch. For complete documentation on configuring authentication in MongoDB Stitch, see Authentication. Application ID\u00b6 The MongoDB Stitch Android SDK requires using your MongoDB Stitch application ID for connectivity. To locate your application ID, click Clients in the navigation panel and retrieve the value for App ID. MongoDB Namespace\u00b6 The sample application uses the guidebook database, writing to the restaurants collection. You must add this namespace to the MongoDB Stitch MongoDB service. See Integrate an Atlas Cluster with MongoDB Stitch for instructions on adding the collection namespace to your MongoDB Stitch application. Procedure\u00b6 1 Link the Stitch SDK to Your Application.\u00b6 In the Project tab for MongoRestaurants, expand Gradle Scripts. Open the build.gradle file labeled (Module: app). Add the following configuration block: // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } Add the highlighted lines to the dependencies block: dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', { exclude group: 'com.android.support', module: 'support-annotations' }) compile 'com.android.support:appcompat-v7:25.2.0' compile 'com.android.support.constraint:constraint-layout:1.0.1' testCompile 'junit:junit:4.12' compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' } repositories { Android studio may prompt you to sync changes to your project; if so, hit Sync Now. If not, open the Build menu and select Rebuild Project. 2 Add necessary import statements.\u00b6 The following import statements cover the bare minimum requirements for using MongoDB Stitch for anonymous authentication and interacting with a MongoDB server via the MongoDB Stitch MongoDB service: import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.services.mongodb.MongoClient; // Used for inserting or retrieving documents from MongoDB import org.bson.Document; // used for authentication and anonymous auth import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; 3 Create and Instantiate StitchClient and MongoClient.\u00b6 The MongoDB Stitch SDK provides two classes for interfacing with the MongoDB Stitch SDK and the MongoDB Stitch MongoDB service: StitchClient(Context context, String clientAppID) This object handles interactions between the application and the MongoDB Stitch service, including authentication or MongoDB Stitch pipelines. Takes the current context and a string representing the MongoDB Stitch application ID as parameters. MongoClient(StitchClient client, String service) This object handles interactions between the application and the MongoDB Stitch MongoDB service, such as CRUD operations or aggregation pipelines. Takes a StitchClient object and a string representing the MongoDB Stitch MongoDB service name as parameters. Create and instantiate both classes in your application. The following example uses the onCreate() method to instantiate each class. private static final String APP_ID = \"STITCH-APP-ID\"; //The Stitch Application ID private static String TAG; private static final String MONGODB_SERVICE_NAME = \"STITCH-MONGODB-SERVICE\"; private StitchClient _client; private MongoClient _mongoClient; private String currentRestaurantName; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Remember to replace the Stitch-MongoDB-Service-Name with the name of the // Stitch MongoDB service you want to use with this application _client = new StitchClient(this, APP_ID); _mongoClient = new MongoClient(_client, MONGODB_SERVICE_NAME); 4 Retrieve authentication providers from MongoDB Stitch and perform anonymous user authentication.\u00b6 The MongoDB Stitch SDK provides the following objects and related methods for retrieving the authentication providers configured for the MongoDB Stitch application, as well as performing authentication using a given authentication provider. StitchClient.getAuthProviders() Returns a Task<AvailableAuthProviders> object. The AvailableAuthProviders class provides methods for checking which authentication providers are configured for the MongoDB Stitch application. AvailableAuthProviders.hasAnonymous() Returns a boolean. If true, the MongoDB Stitch application has anonymous authentication configured. StitchClient.logInWithProvider(AuthProvider authProvider) Returns a Task<Auth> object. Takes an AuthProvider object, such as the AnonymousAuthProvider() class. Use the StitchClient.getAuthProviders() method to retrieve the configured authentication providers for the specified MongoDB Stitch application. Use the StitchClient.logInWithProvider() to log in with the specified authentication provider. The following example retrieves the authentication providers for the MongoDB Stitch application and, if anonymous authentication is configured, performs anonymous authentication. _client.getAuthProviders().continueWith(new Continuation<AvailableAuthProviders, Object>() { @Override public Object then(@NonNull Task<AvailableAuthProviders> task) throws Exception { try { if (task.isSuccessful()){ Log.i(TAG, \"Retrieved authentication providers\"); if (task.getResult().hasAnonymous()){ _client.logInWithProvider(new AnonymousAuthProvider()).continueWith(new Continuation<Auth, Object>() { @Override public Object then(@NonNull Task<Auth> task) throws Exception { try { if (task.isSuccessful()) { Log.i(TAG,\"User Authenticated as \" + _client.getAuth().getUser().getId()); 5 Write data to the MongoDB server via Stitch.\u00b6 The MongoDB Stitch SDK provides the following objects and related methods for interacting with a MongoDB server as configured through the MongoDB Stitch MongoDB service: MongoClient.getDatabase(String name) Returns a MongoDB Database object. Takes a String representing the name of the MongoDB database. Database.getCollection(String name) Returns a MongoDB Collection object. Takes a String representing the name of the collection in relation to the Database object. You can perform operations on either the database object or the collection object, depending on your objectives. For example, the following code uses the updateOne() method to append a user comment to an array. Document query = new Document(); query.append(\"name\",currentRestaurantName); Document newComment = new Document(); newComment.put(\"user_id\" , _client.getAuth().getUser().getId()); newComment.put(\"comment\" , input.getText().toString()); Document update = new Document( \"$push\" , new Document(\"comments\", newComment)); _mongoClient.getDatabase(\"guidebook\").getCollection(\"restaurants\").updateOne(query,update).continueWith(new Continuation<Void, Object>() { @Override public Object then(@NonNull Task<Void> task) { if (task.isSuccessful()) refreshComments(view); else Log.e(TAG,\"Error writing comment\"); return null; } }); 6 Read data from the MongoDB server via Stitch.\u00b6 The MongoDB Stitch SDK provides the following objects and related methods for interacting with a MongoDB server as configured through the MongoDB Stitch MongoDB service: MongoClient.getDatabase(String name) Returns a MongoDB Database object. Takes a String representing the name of the MongoDB database. Database.getCollection(String name) Returns a MongoDB Collection object. Takes a String representing the name of the collection in relation to the Database object. You can perform operations on either the database object or the collection object, depending on your objectives. For example, the following code uses the find() method to search the guidebook.restaurants collection, retrieving the first document whose name field matches the user input. query.put(\"name\",currentRestaurantName); _mongoClient.getDatabase(\"guidebook\").getCollection(\"restaurants\").find(query).continueWith(new Continuation<List<Document>, Object>() { @Override public Object then(@NonNull Task<List<Document>> task) throws Exception { try { if (task.isSuccessful()){ Document doc = task.getResult().get(0); ArrayList<Document> comments = (ArrayList<Document>) doc.get(\"comments\"); if (comments.size() > 0) { // showComments() passes the ArrayList of documents to a custom list adapter. // It then passes the list adapter to a list view, where the comments are displayed. showComments(comments); } Example Code\u00b6 This example code assumes a single-activity application. Substitute STITCH-APP-ID for your MongoDB Stitch application ID. Substitute MONGODB-SERVICE-NAME for the name of the MongoDB service you want the application to use. Document schema\u00b6 The application expects documents in the guidebook.restaurants collection to have the following schema: { \"name\" : <string>, \"cuisine\" : <string>, \"location\" : <string>, \"comments\" : [ { \"user_id\" : <string>, \"comment\" : <string> }, ... ] } MainActivity.java\u00bpackage com.example.rkumar.mongorestaurant; import android.content.DialogInterface; import android.support.annotation.NonNull; import android.support.v7.app.AlertDialog; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.text.InputType; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ListView; import android.widget.TextView; import com.google.android.gms.tasks.Continuation; import com.google.android.gms.tasks.Task; // Stitch Client and MongoClient import import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.services.mongodb.MongoClient; // Used for inserting or retrieving documents from MongoDB import org.bson.Document; // used for authentication and anonymous auth import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { // Remember to replace the APP_ID with your Stitch Application ID private static final String APP_ID = \"STITCH-APP-ID\"; //The Stitch Application ID private static String TAG; private static final String MONGODB_SERVICE_NAME = \"STITCH-MONGODB-SERVICE\"; private StitchClient _client; private MongoClient _mongoClient; private String currentRestaurantName; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Remember to replace the Stitch-MongoDB-Service-Name with the name of the // Stitch MongoDB service you want to use with this application _client = new StitchClient(this, APP_ID); _mongoClient = new MongoClient(_client, MONGODB_SERVICE_NAME); currentRestaurantName = \"\"; TAG = getResources().getString(R.string.stitch_logging); doAnonymousAuthentication(); } private void doAnonymousAuthentication() { _client.getAuthProviders().continueWith(new Continuation<AvailableAuthProviders, Object>() { @Override public Object then(@NonNull Task<AvailableAuthProviders> task) throws Exception { try { if (task.isSuccessful()){ Log.i(TAG, \"Retrieved authentication providers\"); if (task.getResult().hasAnonymous()){ _client.logInWithProvider(new AnonymousAuthProvider()).continueWith(new Continuation<Auth, Object>() { @Override public Object then(@NonNull Task<Auth> task) throws Exception { try { if (task.isSuccessful()) { Log.i(TAG,\"User Authenticated as \" + _client.getAuth().getUser().getId()); } else { Log.e(TAG, \"Error logging in anonymously\", task.getException()); } return null; } catch (Exception ex){ throw ex; } } }); } } else { Log.e(TAG, \"Could not retrieve authentication providers\"); } return null; } catch (Exception ex){ throw ex; } } }); } public void searchRestaurant(View view){ if (!_client.isAuthenticated()){ warnAuth(); return; } // Do search based on provided inputs EditText restaurant = (EditText) findViewById(R.id.searchName); currentRestaurantName = restaurant.getText().toString(); if (currentRestaurantName.matches(\"\")){ Log.w(TAG, \"No restaurant name provided\"); new AlertDialog.Builder(this) .setTitle(\"Missing Fields\") .setMessage(\"You must enter the restaurant name\") .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { // continue with delete } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); return; } Document query = new Document(); query.put(\"name\",currentRestaurantName); Log.i(TAG, \"Querying\" + query); // This code block is a simple find() command on the \"restaurants\" collection in the \"guidebook\" database. // The application only cares about the first returned result, even if there are multiple matches. _mongoClient.getDatabase(\"guidebook\").getCollection(\"restaurants\").find(query).continueWith(new Continuation<List<Document>, Object>() { @Override public Object then(@NonNull Task<List<Document>> task) throws Exception { try { if (task.isSuccessful()){ TextView res = (TextView) findViewById(R.id.resultFound); if (task.getResult().size() == 0){ res.setText(\"No results found\"); Log.i(TAG, \"Query failed to return any results\"); clearComments(); return null; } else { res.setText(\"Restaurant found\"); Button writeButton = (Button) findViewById(R.id.writeComment); writeButton.setVisibility(View.VISIBLE); Button refreshButton = (Button) findViewById(R.id.refreshComment); refreshButton.setVisibility(View.VISIBLE); } Document doc = task.getResult().get(0); TextView cuisine = (TextView) findViewById(R.id.cuisine); cuisine.setText(doc.get(\"cuisine\").toString()); TextView location = (TextView) findViewById(R.id.location); location.setText(doc.get(\"location\").toString()); ArrayList<Document> comments = (ArrayList<Document>) doc.get(\"comments\"); if (comments.size() > 0) { // showComments() passes the ArrayList of documents to a custom list adapter. // It then passes the list adapter to a list view, where the comments are displayed. showComments(comments); } else clearComments(); } return null; } catch (Exception ex) { throw ex; } }; }); } private void clearComments() { ListView lv = (ListView) findViewById(R.id.commentList); lv.setAdapter(null); Button writeButton = (Button) findViewById(R.id.writeComment); writeButton.setVisibility(View.INVISIBLE); Button refreshButton = (Button) findViewById(R.id.refreshComment); refreshButton.setVisibility(View.INVISIBLE); } public void writeComment(final View view) { // Its important to check for authentication, as the authenticated user ID is used as // part of the document. if (!_client.isAuthenticated()){ warnAuth(); return; } AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(\"Write Comment\"); final EditText input = new EditText(this); input.setInputType(InputType.TYPE_CLASS_TEXT); builder.setView(input); builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { // The query document uses the name of the currently displayed restaurant Document query = new Document(); query.append(\"name\",currentRestaurantName); Document newComment = new Document(); // This is specific to anonymous authentication // For facebook or google, you can check for a username // using _client.getAuth().getUser.getData().get(\"name\") newComment.put(\"user_id\" , _client.getAuth().getUser().getId()); newComment.put(\"comment\" , input.getText().toString()); // The $push update operator adds the \"newComment\" document to the \"comment\" array. // If \"comment\" does not exist, $push creates the array and adds \"newComment\" to it. Document update = new Document( \"$push\" , new Document(\"comments\", newComment)); // This code block performs an \"updateOne\" operation, updating the document // associated to the currently selected restaurant and adding a new comment // to the \"comment\" array. // On success, it calls \"refreshComments()\", which refreshes the List View displaying the comments associated to the restaurant. _mongoClient.getDatabase(\"guidebook\").getCollection(\"restaurants\").updateOne(query,update).continueWith(new Continuation<Void, Object>() { @Override public Object then(@NonNull Task<Void> task) { if (task.isSuccessful()) refreshComments(view); else Log.e(TAG,\"Error writing comment\"); return null; } }); } }); builder.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.cancel(); } }); builder.show(); } public void refreshComments(View view) { Document query = new Document(); query.append(\"name\", currentRestaurantName); _mongoClient.getDatabase(\"guidebook\").getCollection(\"restaurants\").find(query).continueWith(new Continuation<List<Document>, Object>() { @Override public Object then(@NonNull Task<List<Document>> task) { if (task.isSuccessful()){ Document result = task.getResult().get(0); ArrayList<Document> comments = (ArrayList<Document>) result.get(\"comments\"); if (comments.size() > 0 ){ showComments(comments); } else { clearComments(); } } else Log.e(TAG, \"Error refreshing comments\"); return null; } }); } private void showComments(ArrayList<Document> comments) { Log.i(TAG, \"Comments found \" + comments); CustomListAdapter cla = new CustomListAdapter(this,comments); ListView lv = (ListView) findViewById(R.id.commentList); lv.setAdapter(cla); } private void warnAuth() { new AlertDialog.Builder(this) .setTitle(\"Not Authenticated\") .setMessage(\"The application automatically performs anonymous authentication. If you continue to see this message, check for network connectivity\") .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { // continue with delete } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); return; } } activity_main.xml\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96<?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:id=\"@+id/activity_main\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" tools:context=\".MainActivity\"> <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:paddingTop=\"6dp\" android:paddingBottom=\"6dp\" > <EditText android:layout_width=\"0dp\" android:layout_weight=\"0.70\" android:layout_height=\"60dp\" android:hint=\"Restaurant name\" android:id=\"@+id/searchName\" /> <Button android:layout_width=\"0dp\" android:layout_weight=\"0.30\" android:layout_height=\"40dp\" android:id=\"@+id/search\" android:text=\"Search\" android:onClick=\"searchRestaurant\" /> </LinearLayout> <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\" > <TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:id=\"@+id/resultFound\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"30dp\" android:id=\"@+id/cuisine\" /> <TextView android:layout_width=\"match_parent\" android:layout_height=\"30dp\" android:id=\"@+id/location\" /> <LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"> <Button android:layout_width=\"0dp\" android:layout_weight=\".5\" android:layout_height=\"wrap_content\" android:text=\"Write Comment\" android:visibility=\"invisible\" android:id=\"@+id/writeComment\" android:onClick=\"writeComment\" /> <Button android:layout_width=\"0dp\" android:layout_weight=\"0.50\" android:text=\"Refresh Comments\" android:visibility=\"invisible\" android:id=\"@+id/refreshComment\" android:onClick=\"refreshComments\" android:layout_height=\"wrap_content\" /> </LinearLayout> <ListView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:id=\"@+id/commentList\" /> </LinearLayout> </LinearLayout> CustomListAdapter.java\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48package com.example.rkumar.mongorestaurant; import android.content.Context; import android.database.DataSetObserver; import android.support.annotation.LayoutRes; import android.support.annotation.NonNull; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Adapter; import android.widget.ArrayAdapter; import android.widget.TextView; import org.bson.Document; import java.util.ArrayList; public class CustomListAdapter extends ArrayAdapter<Document> { private final Context context; private final ArrayList<Document> docs; public CustomListAdapter(@NonNull Context context,ArrayList<Document> docs) { super(context, -1, docs); this.context = context; this.docs = docs; } @Override public View getView(int position, View convertView, ViewGroup parent) { LayoutInflater inflater = (LayoutInflater) context .getSystemService(Context.LAYOUT_INFLATER_SERVICE); // The \"row_layout.xml\" consists of a Relative Layout with two // TextViews. View rowView = inflater.inflate(R.layout.row_layout, parent, false); TextView comment = (TextView) rowView.findViewById(R.id.comment); TextView username = (TextView) rowView.findViewById(R.id.user); comment.setText(docs.get(position).get(\"comment\").toString()); username.setText(docs.get(position).get(\"user_id\").toString()); return rowView; } } build.grade (Module: app)\u00b6 Important There may be more than one build.gradle file in your project. You must edit the build.gradle file associated to the application. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40apply plugin: 'com.android.application' android { compileSdkVersion 25 buildToolsVersion \"25.0.2\" defaultConfig { applicationId \"com.example.rkumar.mongorestaurant\" minSdkVersion 19 targetSdkVersion 25 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' } } } dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', { exclude group: 'com.android.support', module: 'support-annotations' }) compile 'com.android.support:appcompat-v7:25.2.0' compile 'com.android.support.constraint:constraint-layout:1.0.1' testCompile 'junit:junit:4.12' compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' } repositories { // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } \u2190 Slack Service Tutorial: Using Slack in a Stitch Web App HTTP Android Tutorial \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/mongodb-javascript.html",
      "title": "Integrate the MongoDB Service into a Web Application using Javascript \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > Integrate the MongoDB Service into a Web Application using Javascript Integrate the MongoDB Service into a Web Application using Javascript\u00b6 On this page Considerations Procedure Example Code The MongoDB Stitch Javascript SDK provides methods for integrating the MongoDB service configured in your MongoDB Stitch application into your web application application. This tutorial integrates the MongoDB Stitch Javascript SDK into an application that displays data on restaurants in a given city. The application uses the MongoDB Stitch SDK to perform anonymous user authentication and access a MongoDB database via the MongoDB service. You can apply the general strategies and structure used in this tutorial as a baseline for utilizing the MongoDB Stitch Javascript SDK and MongoDB service in your own application. Considerations\u00b6 This tutorial does not cover the entirety of the MongoDB Stitch Javascript SDK. For complete documentation on the MongoDB Stitch Javascript SDK, see the <reference>. Javascript Development\u00b6 A full description of Javascript, HTML, or web programming in general is beyond the scope of this tutorial. This tutorial assumes prior knowledge and experience of Javascript development and its related subject matter. Authentication\u00b6 This tutorial provides instructions on using MongoDB Stitch anonymous user authentication for interfacing with the MongoDB service. While MongoDB Stitch supports Facebook and Google user authentication, those integrations are out of scope for this tutorial. To enable Anonymous authentication for your MongoDB Stitch application, Log in to Atlas and go to Stitch Apps. Select your MongoDB Stitch application. You will be redirected to the MongoDB Stitch console to the Getting Started page. If you are not on the Getting Started page, click Getting Started in the left-hand navigation bar. Click Turn On Authentication. Toggle the Anonymous Authentication switch. For complete documentation on configuring authentication in MongoDB Stitch, see Authentication. Application ID\u00b6 The MongoDB Stitch Javascript SDK requires using your MongoDB Stitch application ID for connectivity. To locate your application ID, Log in to Atlas and go to Stitch Apps. Select your MongoDB Stitch application. You will be redirected to the MongoDB Stitch console to the Getting Started page. If you are not on the Getting Started page, click Getting Started in the left-hand navigation bar. Click Clients in the navigation bar. Retrieve the value for App Id. MongoDB Namespace\u00b6 The sample application uses the guidebook database, writing to the restaurants collection. You must add this namespace to the MongoDB Stitch MongoDB service. See Integrate an Atlas Cluster with MongoDB Stitch for instructions on adding the collection namespace to your MongoDB Stitch application. Procedure\u00b6 1 Link the Stitch SDK to Your Application.\u00b6 Use the <script> HTML tag to link MongoDB Stitch SDK file to your HTML application. <body> <script src=\"https://s3.amazonaws.com/stitch-sdks/js/library/stable/stitch.min.js\"></script> <script defer type=\"text/javascript\" src=\"app.js\"></script> 2 Create and Instantiate StitchClient and MongoClient.\u00b6 The MongoDB Stitch SDK provides the following objects and related methods for interfacing with the MongoDB Stitch SDK and the MongoDB Stitch MongoDB service: StitchClient(String clientAppID) This object handles interactions between the application and the MongoDB Stitch service, including authentication or MongoDB Stitch pipelines. Takes a string representing the MongoDB Stitch application ID as parameters. StitchClient.service(String service, String serviceName) Returns a factory object that handles interactions between the application and the specified MongoDB Stitch service. For the MongoDB service, set service to mongodb and serviceName to mongodb-atlas. To access a database, use the db(String databaseName) method on the factory object. This method returns a database object. To access a collections, use the collection(String collectionName) method on the database object. This method returns a collection object. Create and instantiate the StitchClient object. You can then create additional variables to store the MongoDB service object, the MongoDB database object, and the MongoDB collection object. const mongoClient = stitchClient.service(\"mongodb\", \"mongodb-atlas\"); const db = mongoClient.db(\"guidebook\"); const coll = db.collection(\"restaurants\"); 3 Use the MongoDB Stitch SDK to perform anonymous user authentication.\u00b6 The MongoDB Stitch SDK provides the following objects and related methods for retrieving the authentication providers configured for the MongoDB Stitch application, as well as performing authentication using a given authentication provider. StitchClient.authManager.anonymousAuth() Authenticates the client anonymously through MongoDB Stitch. To perform anonymous authentication, use the StitchClient object and call the authManager.anonymousAuth() method. stitchClient.login().then( result => { console.log(\"authenticated\"); }).catch( err => { console.error(\"Error performing auth\",err) }); } function searchRestaurant(text) { 4 Write data to the MongoDB server via Stitch.\u00b6 You can perform operations on either the database object or the collection object, depending on your objectives. For example, to update a document in a collection, use the updateOne() method on the collection object. const update = { \"$push\" : { \"comments\" : { \"comment\" : comment, \"user_id\" : stitchClient.authedId() } } } coll.updateOne(query,update).then( () => { refreshComments(); }).catch( err => { console.error(\"Error while adding comment\", err) }); se { 5 Read data from the MongoDB server via Stitch.\u00b6 You can perform operations on either the database object or the collection object, depending on your objectives. For example, to find a document in a collection, use the find() method on the collection object. console.log(payload); if (payload.length == 0){ document.getElementById(\"resultFound\").innerHTML = \"Result not found\"; } else { console.log(\"result returned\"); document.getElementById(\"resultFound\").innerText = \"Found Restaurant\"; document.getElementById(\"cuisine\").innerText = payload[0].cuisine; document.getElementById(\"location\").innerText = payload[0].location; restaurantName = document.getElementById(\"restaurantName\").value; const comments = payload[0].comments; for (var i = 0; i < comments.length; i++){ writeComment(comments[i].comment, comments[i].user_id); } } }).catch ( err => { console.error(\"error in search\", err); }); Example Code\u00b6 You can download the MongoRestaurant application from the Stitch github example repository. To run the example code, clone or fork the github repository and navigate to MongoRestaurant/MongoRestaurant-javascript. Open index.html in your browser. You must complete the MongoDB Stitch configuration steps documented in this procedure for the application to work. In app.js, replace STITCH-APP-ID with your MongoDB Stitch application ID. Document schema\u00b6 The application expects documents in the guidebook.restaurants collection to have the following schema: { \"name\" : <string>, \"cuisine\" : <string>, \"location\" : <string>, \"comments\" : [ { \"user_id\" : <string>, \"comment\" : <string> }, ... ] } index.html\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26<!doctype html> <html> <head> <title>MongoRestaurant</title> <meta charset=\"utf-8\"> </head> <body> <script src=\"https://s3.amazonaws.com/stitch-sdks/js/library/stable/stitch.min.js\"></script> <script defer type=\"text/javascript\" src=\"app.js\"></script> <div> <input id=\"restaurantName\" type=\"text\" > </input> <button id=\"button-search\">Search</button> </div> <div> <p id=\"resultFound\"></p> <p id=\"location\"></p> <p id=\"cuisine\"></p> </div> <div> <button id=\"button-write\">Write Comment</button> <button id=\"button-refresh\">Refresh Comments</button> </div> <div id=\"commentFeed\"> </div> </body> </html> app.js\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123document.addEventListener('DOMContentLoaded',() => { 'use strict' // Replace the STITCH-APP-ID with your Stitch Application ID const stitchClient = new stitch.StitchClient(\"STITCH-APP-ID\"); const mongoClient = stitchClient.service(\"mongodb\", \"mongodb-atlas\"); const db = mongoClient.db(\"guidebook\"); const coll = db.collection(\"restaurants\"); const writeButton = document.getElementById('button-write'); const searchButton = document.getElementById('button-search'); const refreshButton = document.getElementById('button-refresh'); var restaurantName = \"\" function doAnonymousAuth() { stitchClient.login().then( result => { console.log(\"authenticated\"); }).catch( err => { console.error(\"Error performing auth\",err) }); } function searchRestaurant(text) { clearComments() coll.find({\"name\" : text }).then( payload => { console.log(payload); if (payload.length == 0){ document.getElementById(\"resultFound\").innerHTML = \"Result not found\"; } else { console.log(\"result returned\"); document.getElementById(\"resultFound\").innerText = \"Found Restaurant\"; document.getElementById(\"cuisine\").innerText = payload[0].cuisine; document.getElementById(\"location\").innerText = payload[0].location; restaurantName = document.getElementById(\"restaurantName\").value; const comments = payload[0].comments; for (var i = 0; i < comments.length; i++){ writeComment(comments[i].comment, comments[i].user_id); } } }).catch ( err => { console.error(\"error in search\", err); }); } function writeComment(comment, user_id) { var commentFeed = document.getElementById('commentFeed'); var newDiv = document.createElement('div'); var userName = document.createElement('p'); var userComment = document.createElement('p'); if (user_id === null){ const query = {\"name\" : restaurantName}; const update = { \"$push\" : { \"comments\" : { \"comment\" : comment, \"user_id\" : stitchClient.authedId() } } } coll.updateOne(query,update).then( () => { refreshComments(); }).catch( err => { console.error(\"Error while adding comment\", err) }); } else { userComment.appendChild(document.createTextNode(comment)) userName.appendChild(document.createTextNode(\"-\" + user_id)); newDiv.appendChild(userComment); newDiv.appendChild(userName); commentFeed.appendChild(newDiv); } } function refreshComments() { clearComments() coll.find({\"name\" : restaurantName}).then( payload => { const comments = payload[0].comments; for (var i = 0; i < comments.length; i++){ writeComment(comments[i].comment, comments[i].user_id); } }).catch( err => { console.error(\"error while submitting\", err) }); } function clearComments() { document.getElementById('commentFeed').innerText = \"\"; } writeButton.onclick = () => { if (restaurantName != \"\"){ var inputVal = prompt(\"Enter your comment : \", \"comment\"); writeComment(inputVal, null); } else { alert(\"You must search for a valid restaurant to write a comment.\") } } searchButton.onclick = () => { var text = document.getElementById(\"restaurantName\").value; searchRestaurant(text); } refreshButton.onclick = () => { refreshComments(); } doAnonymousAuth() }); \u2190 Tutorials Amazon S3 JavaScript Tutorial \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/s3-android.html",
      "title": "Amazon S3 Android Tutorial \u2014 MongoDB Stitch (Beta)",
      "text": "Amazon S3 Android Tutorial\u00b6 On this page A Public Whiteboard Application Example Code Amazon S3 is a component of Amazon Web Services that provides a simple key-value store useful for storing and serving static resources. This tutorial will walk through the components of a simple Android application using MongoDB Stitch with Amazon S3. To follow this tutorial, you need: A MongoDB Stitch app with anonymous authentication enabled, At least one globally-readable S3 bucket in the US Standard (US East) region, and An Amazon AWS user with PutObject permission on that bucket and an access key pair. Android Studio version 2.3 or later, and Some familiarity with the Java programming language. A Public Whiteboard Application\u00b6 In this tutorial, you will create a website where anonymous users may view and replace a shared text message stored on Amazon S3. 1 Add an S3 service.\u00b6 You must create an Amazon S3 service in your MongoDB Stitch application. Click the ADD SERVICE button in the left-side navigation pane. Select the S3 box. In the Service Name box at the bottom, enter Whiteboard. Click Add service. Enter the Amazon Region on which you deployed your bucket (the US Standard region is us-east-1), along with an Amazon Access Key ID and Secret Access Key. Select the Rules tab, and click ADD RULE. Check the put checkbox, and enter the following into the When text box: { \"bucket\": \"<your-bucket>\" } This will only allow put actions to be executed against your bucket. Click SAVE. 2 Link the Stitch SDK to Your Application.\u00b6 In the Project tab for Whiteboard, expand Gradle Scripts. Open the build.gradle file labeled (Module: app). Add the following configuration block: // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } Add the highlighted lines to the dependencies block: compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' compile 'com.android.support:appcompat-v7:25.3.1' compile 'com.android.support.constraint:constraint-layout:1.0.2' Android studio may prompt you to sync changes to your project. If so, click Sync Now. If not, open the Build menu and click Rebuild Project. 3 Add necessary import statements.\u00b6 import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.PipelineStage; import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; 4 Instantiate a StitchClient instance.\u00b6 Instantiate a new com.mongodb.stitch.android.StitchClient instance with your MongoDB Stitch application ID: _client = new StitchClient(this, APP_ID); 5 Authenticate as an anonymous user\u00b6 _client.getAuthProviders().continueWithTask(new Continuation<AvailableAuthProviders, Task<Auth>>() { @Override public Task<Auth> then(@NonNull Task<AvailableAuthProviders> task) throws Exception { if (!task.isSuccessful()) { Log.e(TAG, \"Could not retrieve authentication providers\", task.getException()); throw task.getException(); } Log.i(TAG, \"Retrieved authentication providers\"); if (!task.getResult().hasAnonymous()) { throw new Exception(\"Anonymous login not allowed\"); } return _client.logInWithProvider(new AnonymousAuthProvider()); }}).addOnSuccessListener(new OnSuccessListener<Auth>() { @Override public void onSuccess(@NonNull Auth auth) { Log.i(TAG, \"User Authenticated as \" + _client.getAuth().getUser().getId()); _refreshButton.setEnabled(true); _saveButton.setEnabled(true); _textWidget.setEnabled(true); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.e(TAG, \"Error logging in anonymously\", e); } }); 6 PUT an Object\u00b6 Use the binary action to decode Base64-encoded data into a binary stream, and feed this binary stream into the MongoDB Stitch put action to save an object into your S3 bucket: final List<PipelineStage> pipeline = new ArrayList<>(); final Map<String, Object> binaryStage = new HashMap<>(); binaryStage.put(\"encoding\", \"base64\"); binaryStage.put(\"data\", Base64.encodeToString(text.getBytes(), Base64.DEFAULT)); pipeline.add(new PipelineStage(\"binary\", binaryStage)); final Map<String, Object> putStage = new HashMap<>(); putStage.put(\"bucket\", BUCKET_NAME); putStage.put(\"key\", OBJECT_KEY); putStage.put(\"acl\", \"public-read\"); putStage.put(\"contentType\", \"text/plain\"); pipeline.add(new PipelineStage(\"put\", S3_SERVICE_NAME, putStage)); _client.executePipeline(pipeline).addOnCompleteListener(new OnCompleteListener<List<Object>>() { @Override public void onComplete(@NonNull Task<List<Object>> task) { if (!task.isSuccessful()) { Log.e(TAG, \"Failed to upload\"); return; } Log.i(TAG, \"Uploaded\"); }}); Example Code\u00b6 MainActivity.java\u00b6 Substitute <your-bucket> with the name of your S3 bucket, and <your-app-id> with your MongoDB Stitch application ID. package com.example.mongodb.stitchs3; import android.net.Uri; import android.os.AsyncTask; import android.os.Bundle; import android.support.annotation.NonNull; import android.support.v7.app.AppCompatActivity; import android.util.Base64; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import com.google.android.gms.tasks.Continuation; import com.google.android.gms.tasks.OnCompleteListener; import com.google.android.gms.tasks.OnFailureListener; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.Task; import java.io.BufferedInputStream; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.lang.ref.WeakReference; import java.net.HttpURLConnection; import java.net.URL; import java.util.ArrayList; import java.util.Date; import java.util.Locale; import java.util.List; import java.util.Map; import java.util.HashMap; // Stitch Client imports import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.PipelineStage; import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; public class MainActivity extends AppCompatActivity { // Remember to replace the APP_ID with your Stitch Application ID private static final String APP_ID = \"<your-app-id>\"; // The Stitch Application ID private static final String S3_SERVICE_NAME = \"Photos\"; private static final String BUCKET_NAME = \"<your-bucket>\"; private static final String OBJECT_KEY = \"shared-text\"; private static final String TAG = \"StitchWhiteboard\"; private EditText _textWidget; private Button _saveButton; private Button _refreshButton; private StitchClient _client; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); _textWidget = (EditText) findViewById(R.id.text); _saveButton = (Button) findViewById(R.id.save); _refreshButton = (Button) findViewById(R.id.refresh); _client = new StitchClient(this, APP_ID); Log.i(TAG, \"Starting authentication\"); doAnonymousAuthentication(); fetch(); } public void onClickSave(View view) { upload(_textWidget.getText().toString()); } public void onClickRefresh(View view) { fetch(); } private void doAnonymousAuthentication() { _client.getAuthProviders().continueWithTask(new Continuation<AvailableAuthProviders, Task<Auth>>() { @Override public Task<Auth> then(@NonNull Task<AvailableAuthProviders> task) throws Exception { if (!task.isSuccessful()) { Log.e(TAG, \"Could not retrieve authentication providers\", task.getException()); throw task.getException(); } Log.i(TAG, \"Retrieved authentication providers\"); if (!task.getResult().hasAnonymous()) { throw new Exception(\"Anonymous login not allowed\"); } return _client.logInWithProvider(new AnonymousAuthProvider()); }}).addOnSuccessListener(new OnSuccessListener<Auth>() { @Override public void onSuccess(@NonNull Auth auth) { Log.i(TAG, \"User Authenticated as \" + _client.getAuth().getUser().getId()); _refreshButton.setEnabled(true); _saveButton.setEnabled(true); _textWidget.setEnabled(true); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(@NonNull Exception e) { Log.e(TAG, \"Error logging in anonymously\", e); } }); } private void upload(final String text) { final List<PipelineStage> pipeline = new ArrayList<>(); final Map<String, Object> binaryStage = new HashMap<>(); binaryStage.put(\"encoding\", \"base64\"); binaryStage.put(\"data\", Base64.encodeToString(text.getBytes(), Base64.DEFAULT)); pipeline.add(new PipelineStage(\"binary\", binaryStage)); final Map<String, Object> putStage = new HashMap<>(); putStage.put(\"bucket\", BUCKET_NAME); putStage.put(\"key\", OBJECT_KEY); putStage.put(\"acl\", \"public-read\"); putStage.put(\"contentType\", \"text/plain\"); pipeline.add(new PipelineStage(\"put\", S3_SERVICE_NAME, putStage)); _client.executePipeline(pipeline).addOnCompleteListener(new OnCompleteListener<List<Object>>() { @Override public void onComplete(@NonNull Task<List<Object>> task) { if (!task.isSuccessful()) { Log.e(TAG, \"Failed to upload\"); return; } Log.i(TAG, \"Uploaded\"); }}); } private void fetch() { Date date = new Date(); String encodedBucket = Uri.encode(BUCKET_NAME); String urlText = String.format(Locale.US, \"https://%s.s3.amazonaws.com/%s?%d\", encodedBucket, OBJECT_KEY, date.getTime()); URL url; try { url = new URL(urlText); FetchTask task = new FetchTask(new WeakReference<>(_textWidget)); task.execute(url); } catch (IOException e) { Log.e(TAG, \"Failed to fetch\", e); } } } class FetchTask extends AsyncTask<URL, Void, String> { private IOException e = null; private final WeakReference<EditText> _text; FetchTask(WeakReference<EditText> editText) { _text = editText; } protected String doInBackground(URL... urls) { InputStream inputStream = null; StringBuilder builder = new StringBuilder(); String result = null; try { HttpURLConnection urlConnection = (HttpURLConnection)urls[0].openConnection(); inputStream = new BufferedInputStream(urlConnection.getInputStream()); BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); String inputLine; while ((inputLine = reader.readLine()) != null) { builder.append(inputLine); } result = builder.toString(); } catch (IOException e) { this.e = e; } finally { try { if (inputStream != null) { inputStream.close(); } } catch (IOException e) { this.e = e; } } return result; } @Override protected void onPostExecute(String s) { if (e != null) { Log.e(\"FetchTask\", \"Failed to fetch message\", e); return; } final EditText textWidget = _text.get(); if (textWidget != null) { textWidget.setText(s); } } } activity_main.xml\u00b6 <?xml version=\"1.0\" encoding=\"utf-8\"?> <android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\"com.example.mongodb.stitchs3\" tools:layout_editor_absoluteY=\"81dp\" tools:layout_editor_absoluteX=\"0dp\"> <EditText android:id=\"@+id/text\" android:layout_width=\"0dp\" android:layout_height=\"0dp\" android:layout_marginBottom=\"8dp\" android:layout_marginLeft=\"8dp\" android:layout_marginRight=\"8dp\" android:layout_marginTop=\"8dp\" android:layout_weight=\"0.81\" android:ems=\"10\" android:enabled=\"false\" android:inputType=\"textMultiLine\" android:singleLine=\"false\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintHorizontal_bias=\"0.0\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintVertical_bias=\"1.0\" /> <Button android:id=\"@+id/save\" android:layout_width=\"0dp\" android:layout_height=\"48dp\" android:layout_marginBottom=\"8dp\" android:layout_marginLeft=\"8dp\" android:layout_marginRight=\"8dp\" android:enabled=\"false\" android:onClick=\"onClickSave\" android:text=\"Save\" app:layout_constraintBottom_toBottomOf=\"@+id/text\" app:layout_constraintHorizontal_bias=\"0.0\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toLeftOf=\"@+id/refresh\" /> <Button android:id=\"@+id/refresh\" android:layout_width=\"0dp\" android:layout_height=\"48dp\" android:layout_marginBottom=\"16dp\" android:layout_marginLeft=\"0dp\" android:layout_marginRight=\"8dp\" android:enabled=\"false\" android:onClick=\"onClickRefresh\" android:text=\"Refresh\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintHorizontal_bias=\"0.0\" app:layout_constraintLeft_toRightOf=\"@+id/save\" app:layout_constraintRight_toRightOf=\"parent\" /> </android.support.constraint.ConstraintLayout> build.gradle (Module: app)\u00b6 apply plugin: 'com.android.application' android { compileSdkVersion 25 buildToolsVersion \"25.0.2\" defaultConfig { applicationId \"com.example.mongodb.stitchs3\" minSdkVersion 19 targetSdkVersion 25 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' } } } dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', { exclude group: 'com.android.support', module: 'support-annotations' }) compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' compile 'com.android.support:appcompat-v7:25.3.1' compile 'com.android.support.constraint:constraint-layout:1.0.2' testCompile 'junit:junit:4.12' } repositories { // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/s3-javascript.html",
      "title": "Amazon S3 JavaScript Tutorial \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > Amazon S3 JavaScript Tutorial Amazon S3 JavaScript Tutorial\u00b6 On this page A Public Whiteboard Application Complete Example Amazon S3 is a component of Amazon Web Services that provides a simple key-value store useful for storing and serving static resources. This tutorial will walk through the components of a simple JavaScript application using MongoDB Stitch with Amazon S3. To follow this tutorial, you need: A MongoDB Stitch app with anonymous authentication enabled, At least one globally-readable S3 bucket in the US Standard (US East) region, and An Amazon AWS user with PutObject permission on that bucket and an access key pair. A Public Whiteboard Application\u00b6 In this tutorial, you will create a website where anonymous users may view and replace a shared text message stored on Amazon S3. 1 Configure CORS\u00b6 A JavaScript application cannot make a cross-domain request to a resource lacking a CORS (Cross-Origin Resource Sharing) configuration. Ensure that your bucket has a CORS configuration that permits HTTP GET requests from any origin, such as the following: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"> <CORSRule> <AllowedOrigin>*</AllowedOrigin> <AllowedMethod>GET</AllowedMethod> <MaxAgeSeconds>3000</MaxAgeSeconds> <AllowedHeader>Authorization</AllowedHeader> </CORSRule> </CORSConfiguration> Refer to Amazon\u2019s documentation on Cross-Origin Resource Sharing for details on how to configure your bucket. 2 Add an S3 service.\u00b6 You must create an Amazon S3 service in your MongoDB Stitch application. Click the ADD SERVICE button in the left-side navigation pane. Select the S3 box. In the Service Name box at the bottom, enter Whiteboard. Click Add service. Enter the Amazon Region on which you deployed your bucket (the US Standard region is us-east-1), along with an Amazon Access Key ID and Secret Access Key. Select the Rules tab, and click ADD RULE. Check the put checkbox, and enter the following into the When text box: { \"bucket\": \"<your-bucket>\" } This will only allow put actions to be executed against your bucket. Click SAVE. 3 Initialize the Client and Log In as an Anonymous User\u00b6 Instantiate a new stitch.StitchClient instance with your MongoDB Stitch application ID, and authenticate as an anonymous user: const stitchClient = new stitch.StitchClient('<your-app-id>'); const promise = stitchClient.authManager.anonymousAuth(true); 4 PUT an Object\u00b6 Use the binary action to decode Base64-encoded data into a binary stream, and feed this binary stream into the MongoDB Stitch put action to save an object into your S3 bucket: function upload(text) { return stitchClient.executePipeline([{ action: \"binary\", args: { \"encoding\": \"base64\", \"data\": btoa(text) } }, { service: \"Whiteboard\", action: \"put\", args: { \"bucket\": bucket, \"key\": objectKey, \"acl\": \"public-read\", \"contentType\": \"text/plain\" } }]); } Complete Example\u00b6 Substitute <your-bucket> with the name of your S3 bucket, and <your-app-id> with your MongoDB Stitch application ID. index.html\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15<!doctype html> <html> <head> <title>S3 Whiteboard</title> <meta charset=\"utf-8\"> </head> <body> <script defer type=\"text/javascript\" src=\"https://s3.amazonaws.com/stitch-sdks/js/library/stable/stitch.min.js\"></script> <script defer type=\"text/javascript\" src=\"app.js\"></script> <textarea id=\"input-text\" cols=\"80\" rows=\"10\"></textarea> <button id =\"button-submit\">Submit</button> <button id =\"button-refresh\">Refresh</button> </body> </html> app.js\u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83document.addEventListener('DOMContentLoaded', () => { 'use strict'; const textArea = document.getElementById('input-text'); const submitButton = document.getElementById('button-submit'); const refreshButton = document.getElementById('button-refresh'); const bucket = '<your-bucket>'; const objectKey = 'shared-text'; const stitchClient = new stitch.StitchClient('<your-app-id>'); function upload(text) { return stitchClient.executePipeline([{ action: \"binary\", args: { \"encoding\": \"base64\", \"data\": btoa(text) } }, { service: \"Whiteboard\", action: \"put\", args: { \"bucket\": bucket, \"key\": objectKey, \"acl\": \"public-read\", \"contentType\": \"text/plain\" } }]); } function refresh() { const xhr = new XMLHttpRequest(); const url = `https://${bucket}.s3.amazonaws.com/${encodeURIComponent(objectKey)}?${new Date().getTime()}`; return new Promise((resolve, reject) => { xhr.onload = function() { if (xhr.status >= 200 && xhr.status < 400) { resolve(xhr.responseText); } else if (xhr.status === 404) { resolve(''); } else { reject(); } }; xhr.onerror = function() { reject(); }; xhr.open('GET', url, true); try { xhr.send(); } catch (err) { reject(err); } }).then((text) => { textArea.value = text; console.log('Done'); }).catch((err) => { console.error('Error', err); }); } const promise = stitchClient.authManager.anonymousAuth(true); promise.then(() => { console.log('Authenticated'); submitButton.onclick = () => { upload(textArea.value).then(() => { console.log('Submitted'); }).catch((err) => { console.error('Error while submitting', err) }); }; refreshButton.onclick = () => { refresh().then(() => { console.log('Refreshed'); }).catch((err) => { console.error('Error while submitting', err) }); }; refresh(); }); }); \u2190 Integrate the MongoDB Service into a Web Application using Javascript HTTP Integration with SendGrid \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/slack-javascript.html",
      "title": "Slack Service Tutorial: Using Slack in a Stitch Web App \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > Slack Service Tutorial: Using Slack in a Stitch Web App Slack Service Tutorial: Using Slack in a Stitch Web App\u00b6 On this page Overview Slack Setup Stitch App Setup Add a Stitch Incoming Webhook to Your Slack Service (Optional) Create HTML for the Web App Create a Javascript File Overview\u00b6 This tutorial provides step-by-step instructions for creating a simple MongoDB Stitch app which allows you to send a message to a Slack channel using a web form. It demonstrates several techniques for integrating Slack with a Stitch app. Slack is a communications platform you can use to send messages and files to other members of your team. To complete this tutorial, you\u2019ll need: a Slack account and Team ID a MongoDB Stitch app with the Slack service enabled An app which receives data from Slack will also need a Stitch Incoming Webhook. The app in this tutorial only sends data to Slack, so a Stitch Incoming Webhook isn\u2019t required. Slack Setup\u00b6 Use the following procedure to get started with Slack: Visit Slack and either create a new account or log in with your existing credentials. Open the navigation dropdown in the top left corner of the Slack app and open Apps & Integrations Find Incoming WebHooks by searching the App Directory. Click the Add Configuration button. Note If you are using a Slack account of which you are not the owner, you\u2019ll need to request permission from the account owner to add an incoming webhook. Choose a Slack channel for your app to send messages to, or create a new channel. Click the Add Incoming WebHooks integration button. Copy the Webhook URL for use with a Slack Service in your Stitch app. Stitch App Setup\u00b6 If you haven\u2019t yet created a MongoDB Stitch app, see Stitch app setup. Click Authentication in the left-side nav and enable anonymous authentication. Click Add Service in the navigation pane. Select Slack. Enter a name for the service in the Service Name box. Click Add service. Use your Webhook URL to provide the Slack Config information: Team ID. Your team ID can be found in your Webhook URL, which is in the format https://hooks.slack.com/services/<TEAM ID>/... Incoming Webhook URL. Enter your URL just as you copied it from the Slack configuration page. Click the Rules tab. Click ADD RULE. Click post in the ACTIONS column. Fill in the document in the WHEN box with any restrictions you would like to place on your Slack service. For example, to ensure that only the username george can post messages to Slack, enter the following document: { \"username\": \"george\" } Click the SAVE button in the lower right corner. Add a Stitch Incoming Webhook to Your Slack Service (Optional)\u00b6 The app in this tutorial doesn\u2019t use an Incoming Webhook on the Slack side, but you can use the following procedure to create one for other types of apps. Stitch Incoming Webhook Setup\u00b6 1 Click the Incoming Webhooks tab.\u00b6 2 Click New Incoming Webhook.\u00b6 3 Specify a service.\u00b6 Mouse over the pipeline stage area, near the bottom of the Webhook panel, to reveal the EDIT and DELETE buttons. Click the Edit icon and select the service you\u2019d like to invoke with your webhook from the SERVICE list. 4 Specify an action.\u00b6 Select the desired action from the ACTION list and enter optional arguments to pass to the selected service action. 5 Bind data to %%vars (optional).\u00b6 If you need to create stage variables, enable Bind data to %%vars. Arguments for the current stage can access stage variables using the %%vars expansion. 6 Click Done.\u00b6 7 (Optional) Click Add Stage and repeat previous steps to add another stage to the pipeline.\u00b6 8 Select an output type for the pipeline from the Output Type list.\u00b6 To return a single document processed by the pipeline, select Single Document. To return a boolean value indicating whether the pipeline returned any output, select Boolean. To return all documents processed by the pipeline, select Array. 9 (Optional) Check Respond with Result to send responses to URLs that invoke the incoming webhook.\u00b6 10 Choose a method to validate HTTP requests in the Request Validation pane.\u00b6 Click the Verify Payload Signature and enter a secret key required to generate the HMAC hash in the Secret box. See Example: Payload Signature for an example of how to generate an HMAC SHA-256 hash and attach it to an HTTP request. Alternatively, click Require Secret as Query Param and enter the secret parameter in the Secret box. See Example: Secret Query Parameter for an example of how to include a secret query parameter in an HTTP request. 11 Click SAVE.\u00b6 Slack Outgoing Webhook Setup\u00b6 Log into Slack. Open the navigation dropdown in the top left corner of Slack and open Apps & integrations. Find Outgoing WebHooks by searching the App Directory. Click the Add Configuration button. Note If you are using a Slack account of which you are not the owner, you\u2019ll need to request permission from the account owner to add an outgoing webhook. Configure your Outgoing Webhook integration as follows: Pick the channel that you would like Stitch consume data from or pick trigger words to kick off the integration. Post the URL from your Stitch Incoming Webhook into the URL box. Go to your Incoming Webhook in the MongoDB Stitch console and post the token in the Token field. This is how we will verify that the incoming message is coming from your Slack account. If you check the Respond with Result option in the webhook, output from this pipeline will be used to post a response to Slack automatically. To ensure that your response posts correctly, make sure that your output is a document with the desired response in the text field. Your Stitch app is now integrated with Slack\u2019s Outgoing Webhooks. Send a message to the designated Slack channel or with the designated Trigger Words to invoke the incoming webhook for your Stitch app. Create HTML for the Web App\u00b6 The web UI for this app uses a form with fields for channel, username, and message. The inputs for those fields are passed to a Stitch pipeline which uses a post action on the Slack service to post the message to Slack. Create a file called index.html and add the following code: <!doctype html> <html> <head> <title>Slack Post via Stitch</title> <meta charset=\"utf-8\"> <script src=\"https://s3.amazonaws.com/stitch-sdks/js/library/master/stitch.min.js\"></script> <script defer type=\"text/javascript\" src=\"app.js\"></script> <style> body { font-family: \"Helvetica\"; margin-top: 50px; margin-left: 50px; } </style> </head> <body> <h2>Slack Post via Stitch</h2> <table> <tr> <td>Channel:</td> <td><input id=\"channel\" type=\"text\" size=\"30\" maxlength=\"40\"> </input></td> </tr> <tr> <td>Username:</td> <td><input id=\"username\" type=\"text\" size=\"30\" maxlength=\"50\"> </input></td> </tr> <tr> <td>Message:</td> <td><textarea id=\"message\" rows=\"4\" cols=\"40\" maxlength=\"50\"> </textarea></td> </tr> <tr> <td></td> <td><button id=\"sendButton\">Send message</button></td> </tr> </table> <div> <p id=\"jsonResponse\"></p> </div> </body> </html> Create a Javascript File\u00b6 The Javascript code for this app takes care of the anonymous authentication function and invokes the Slack service (named slk1 in this app) to post the message. The UI shows a confirmation message if the message posted successfully, or an error if it fails. Note This app uses anonymous authentication for simplicity\u2019s sake, but any real-world app which involves Slack message posting should use MongoDB Stitch\u2018s security features. Learn more about authentication. Create a file called app.js with the following code. Remember to use your app ID and Slack service name in the appropriate places. document.addEventListener('DOMContentLoaded', () => { 'use strict' // Replace STITCH-APP-ID with your Application ID const stitchClient = new stitch.StitchClient(\"STITCH-APP-ID\"); const sendButton = document.getElementById('sendButton'); // allow anonymous user access for this app function doAnonymousAuth() { stitchClient.authManager.anonymousAuth() .then( result => { console.log(\"authenticated\"); }).catch( err => { console.error(\"Error performing auth\", err) }); } // execute pipeline when Send button is clicked sendButton.onclick = () => { const channel = document.getElementById(\"channel\").value; const username = document.getElementById(\"username\").value; const message = document.getElementById(\"message\").value; // check to make sure our fields are populated if (channel != \"\" && username != \"\" && message != \"\") { stitchClient.executePipeline([ { // Replace \"slk1\" with the name of your Slack service service: \"slk1\", action: \"post\", args: { \"channel\": channel, \"username\": username, \"text\": message } } ]).then (function (result) { if (result) { // show a message for successful execution document.getElementById('jsonResponse').innerText = \"Message successfully sent to channel \" + channel; } }).catch( err => { // possible errors: invalid Slack service configuration, username not approved in the service rules document.getElementById('jsonResponse').innerText = \"Message could not be sent. \" + err; }); } else { // A field is missing, show an error document.getElementById('jsonResponse').innerText = \"Please fill in all the fields.\"; } } doAnonymousAuth() }); To run the app, put the index.html file and the app.js files in the same directory and open index.html in a web browser. \u2190 HTTP Integration with SendGrid Integrate the MongoDB service in your Android Application \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/examples/twilio-android.html",
      "title": "Twilio Android Tutorial \u2014 MongoDB Stitch (Beta)",
      "text": "Tutorials > Twilio Android Tutorial Twilio Android Tutorial\u00b6 On this page Prerequisites Procedure Quote of the Day Application Code This tutorial demonstrates how to build a MongoDB Stitch app with the Android client that integrates with the Twilio SMS messaging service. The Quote of the Day app uses the MongoDB Stitch Android SDK to anonymously log in users, then allows them to send a quote of their choice, stored in a MongoDB database, to any other Twilio-registered phone number. You can apply the procedure used in this tutorial as a guideline for integrating the MongoDB Stitch Android SDK and the Twilio service in your own applications. Prerequisites\u00b6 This tutorial assumes the the following: Familiarity with Android Studio and Android SDK Familiarity with Java A Twilio account An accessible MongoDB Atlas cluster using MongoDB version 3.4+. Quote of the Day stores its quotes in an Atlas Free Tier cluster. Each document in the qotd.quotes collection has the following schema: { \"_id\" : <ObjectID>, \"quote\" : <string>, } A MongoDB Stitch app. See Getting Started for instructions. A MongoDB service configured for your MongoDB Stitch app. See Integrate an Atlas Cluster with MongoDB Stitch for instructions. Procedure\u00b6 1 Add and configure a Twilio service in the MongoDB Stitch Admin console.\u00b6 Click the ADD SERVICE button in the navigation pane. Select the Twilio box and enter tw1 in the Service Name box. Enter your Twilio account SID in the SID box and your Twilio Auth Token in the Auth Token box. Click Save. Click the Rules tab. Click ADD RULE. Check send in the ACTIONS column. Note The action attribute of a PipelineStage object must also appear in lower case in the source code. Enter the following rule in the WHEN box: \"from\" : { \"%in\": \"%%values.ourNumber\" }, \"to\" : { \"%in\": \"%%values.confirmedNumbers\" } This rule requires that the from argument always be the same number and limits the to argument to those numbers entered in the Values view. Click SAVE. Note See Twilio Service for more information about this MongoDB Stitch service. 2 Link the MongoDB Stitch Android SDK to your application.\u00b6 In the Project tab for MongoRestaurants, expand Gradle Scripts. Open the build.gradle file labeled (Module: app). Add the following configuration block: repositories { // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) Add the highlighted lines to the dependencies block: exclude group: 'com.android.support', module: 'support-annotations' }) compile 'com.android.support:appcompat-v7:25.3.1' compile 'com.android.support.constraint:constraint-layout:1.0.2' testCompile 'junit:junit:4.12' compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' } 3 Add required import statements.\u00b6 The following import statements include MongoDB Stitch APIs used for anonymous authentication, retrieving documents from a MongoDB database, and constructing and executing a MongoDB Stitch pipeline: import android.content.Context; import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.PipelineStage; import com.mongodb.stitch.android.services.mongodb.MongoClient; import com.mongodb.stitch.android.services.mongodb.MongoClient.Collection; // Used to represent MongoDB Documents import org.bson.Document; // used for authentication and anonymous auth import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; 4 Create and instantiate StitchClient and MongoClient objects.\u00b6 The StitchClient object handles interactions between your application and all MongoDB Stitch services except MongoDB. The MongoClient object handles interactions between your application and the MongoDB Stitch MongoDB service. Create and instantiate both classes in the onCreate() method of your application. private StitchClient _client; private MongoClient _mongoClient; private Iterator<String> quotes; private Prefs cache; private static Context appContext; @Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); _client = new StitchClient(this, APP_ID); _mongoClient = new MongoClient(_client, MONGODB_SERVICE_NAME); appContext = getApplicationContext(); doAnonymousAuthentication(); 5 Configure authentication in the MongoDB Stitch Admin console.\u00b6 Click the Authentication view in the MongoDB Stitch Admin console. Verify that Allow users to log in anonymously is enabled. Tip You can modify Quote of the Day to require Facebook or Google authentication. See Authentication for more information. 6 Configure anonymous user authentication in your application.\u00b6 The doAnonymousAuthentication() method retrieves the authentication providers for the MongoDB Stitch application and, if anonymous authentication is enabled, anonymously authenticates the user. private void doAnonymousAuthentication() { final Task<AvailableAuthProviders> task = _client.getAuthProviders(); task.addOnSuccessListener(new OnSuccessListener<AvailableAuthProviders>() { @Override public void onSuccess(final @NonNull AvailableAuthProviders availableAuthProviders) { if (!task.isSuccessful()) { Log.e(TAG, \"Could not retrieve authentication providers\", task.getException()); } if (!availableAuthProviders.hasAnonymous()) Log.i(TAG,\"Anonymous login not allowed\"); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(final @NonNull Exception e) { Log.e(TAG, \"Could not retrieve authentication providers\", new Throwable(e.getMessage())); } }); _client.logInWithProvider(new AnonymousAuthProvider()); Log.i(TAG, \"User Authenticated as \" + _client.getAuth().getUser().getId());; } 7 Retrieve quotes from MongoDB and cache them.\u00b6 Quote of the Day uses an instance of the Prefs class to cache the quotes retrieved from the MongoDB service. private Prefs cache; final Document query = new Document(); final Collection collection = _mongoClient.getDatabase(\"qotd\").getCollection(\"quotes\"); final String quote = new String(\"quote\"); return collection.find(query).continueWith(new Continuation<List<Document>, Object>() { @Override public Object then(final @NonNull Task<List<Document>> task) throws Exception { if (task.isSuccessful()) { if (cache == null) { String newQuote = new String(); cache = new Prefs(appContext); // Convert quotes to a Set of Strings and cache in Prefs object final List<Document> quotes = task.getResult(); Set<String> quoteSet = new HashSet<String>(); for (int i = 0; i < quotes.size(); i++) { quoteSet.add(quotes.get(i).get(quote).toString()); } cache.putQuotes(quoteSet); 8 Add a value for your phone number in the MongoDB Stitch Admin console.\u00b6 Click the Values view. Note See Values for more information about MongoDB Stitch values. Enter ourFromNumber in the name box using the following format: +16467981338. Enter your Twilio phone number in the box to the right of the name box. Click SAVE. Tip You can modify Quote of the Day to allow multiple users to send quotes by modifying the source code to use their Twilio-registered phone numbers rather than this value. 9 Send a Twilio SMS.\u00b6 Quote of the Days executes a pipeline to send the current quote to the specified Twilio number when a user clicks the Send button. The code calls the addOnCompleteListener() method on the returned Task object rather than continueWith() because onSendQuote() does not return the Task object to the caller. } // Task failed Log.e(TAG, \"Error retrieving quotes\" + task.getException().getMessage(), task.getException()); return Tasks.forException(task.getException()); } }); } public void onSendQuote(final View view) { final Map<String, Object> map = new HashMap<>(); if (findViewById(R.id.sms) != null) { final TextView smsButton = (TextView) findViewById(R.id.sms); String sms = (String) smsButton.getText().toString(); map.put(\"to\", sms); } if (findViewById(R.id.quote) != null) { final TextView buttonText = (TextView) findViewById(R.id.quote); final String quote = (String) buttonText.getText().toString(); map.put(\"body\", quote); } // The following value is specified in the Values view in the Stitch console. map.put(\"from\",\"%%values.myNumber\"); // The \"send\" action must appear in a string in lower case. _client.executePipeline(new PipelineStage(\"send\", \"tw1\", map)).addOnCompleteListener(this, new OnCompleteListener<List<Object>>() { @Override public void onComplete(final @NonNull Task<List<Object>> task) { if (task.isSuccessful()) { Quote of the Day Application Code\u00b6 This following source files and build file are available to download at <TBD>. MainActivity.java\u00b6 This activity first performs anonymous authentication of the user, then caches the quotes from a MongoDB database. The onSendQuote method executes a MongoDB Stitch pipeline when the user clicks the associated button in the user interface. See Pipelines for more information about MongoDB Stitch pipelinespackage com.example.quoteoftheday; import android.app.Application; import android.content.Context; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import com.google.android.gms.tasks.OnCompleteListener; import com.mongodb.stitch.android.StitchClient; import com.mongodb.stitch.android.PipelineStage; import com.mongodb.stitch.android.services.mongodb.MongoClient; import com.mongodb.stitch.android.services.mongodb.MongoClient.Collection; import android.support.annotation.NonNull; import com.google.android.gms.tasks.Continuation; import com.google.android.gms.tasks.Task; import com.google.android.gms.tasks.Tasks; import com.google.android.gms.tasks.OnSuccessListener; import com.google.android.gms.tasks.OnFailureListener; import android.util.Log; import android.view.View; import android.widget.TextView; // Used to represent MongoDB Documents import org.bson.Document; // used for authentication and anonymous auth import com.mongodb.stitch.android.auth.Auth; import com.mongodb.stitch.android.auth.AvailableAuthProviders; import com.mongodb.stitch.android.auth.anonymous.AnonymousAuthProvider; import java.util.ArrayList; import java.util.HashSet; import java.util.Set; import java.util.List; import java.util.Iterator; import java.util.HashMap; import java.util.Map; public class MainActivity extends AppCompatActivity { // Substitute your Stitch application ID for APP_ID private static final String APP_ID = \"quoteoftheday-fmhtc\"; private static String TAG = \"MainActivity\"; private static final String MONGODB_SERVICE_NAME = \"mongodb1\"; private StitchClient _client; private MongoClient _mongoClient; private Iterator<String> quotes; private Prefs cache; private static Context appContext; @Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); _client = new StitchClient(this, APP_ID); _mongoClient = new MongoClient(_client, MONGODB_SERVICE_NAME); appContext = getApplicationContext(); doAnonymousAuthentication(); } private void doAnonymousAuthentication() { final Task<AvailableAuthProviders> task = _client.getAuthProviders(); task.addOnSuccessListener(new OnSuccessListener<AvailableAuthProviders>() { @Override public void onSuccess(final @NonNull AvailableAuthProviders availableAuthProviders) { if (!task.isSuccessful()) { Log.e(TAG, \"Could not retrieve authentication providers\", task.getException()); } if (!availableAuthProviders.hasAnonymous()) Log.i(TAG,\"Anonymous login not allowed\"); } }).addOnFailureListener(new OnFailureListener() { @Override public void onFailure(final @NonNull Exception e) { Log.e(TAG, \"Could not retrieve authentication providers\", new Throwable(e.getMessage())); } }); _client.logInWithProvider(new AnonymousAuthProvider()); Log.i(TAG, \"User Authenticated as \" + _client.getAuth().getUser().getId());; } public Task<Object> onGetQuote(final View view) { // Call database only once and store quotes for better performance final Document query = new Document(); final Collection collection = _mongoClient.getDatabase(\"qotd\").getCollection(\"quotes\"); final String quote = new String(\"quote\"); return collection.find(query).continueWith(new Continuation<List<Document>, Object>() { @Override public Object then(final @NonNull Task<List<Document>> task) throws Exception { if (task.isSuccessful()) { if (cache == null) { String newQuote = new String(); cache = new Prefs(appContext); // Convert quotes to a Set of Strings and cache in Prefs object final List<Document> quotes = task.getResult(); Set<String> quoteSet = new HashSet<String>(); for (int i = 0; i < quotes.size(); i++) { quoteSet.add(quotes.get(i).get(quote).toString()); } cache.putQuotes(quoteSet); if (findViewById(R.id.quote) != null) { final TextView buttonText = (TextView) findViewById(R.id.quote); // Setting the text with the first cached quote: newQuote = cache.getQuote(); buttonText.setText(newQuote); } else { // Don't continue if view cannot be found Log.i(TAG,\"Cannot find view\"); return task; } return newQuote; } else { // Cache is not null if (findViewById(R.id.quote) != null) { final TextView buttonText = (TextView) findViewById(R.id.quote); // Setting the text: final String newQuote = cache.getQuote(); buttonText.setText(newQuote); return newQuote; } else { // Don't continue if view cannot be found Log.i(TAG,\"Cannot find view\"); return task; } } } // Task failed Log.e(TAG, \"Error retrieving quotes\" + task.getException().getMessage(), task.getException()); return Tasks.forException(task.getException()); } }); } public void onSendQuote(final View view) { final Map<String, Object> map = new HashMap<>(); if (findViewById(R.id.sms) != null) { final TextView smsButton = (TextView) findViewById(R.id.sms); String sms = (String) smsButton.getText().toString(); map.put(\"to\", sms); } if (findViewById(R.id.quote) != null) { final TextView buttonText = (TextView) findViewById(R.id.quote); final String quote = (String) buttonText.getText().toString(); map.put(\"body\", quote); } // The following value is specified in the Values view in the Stitch console. map.put(\"from\",\"%%values.myNumber\"); // The \"send\" action must appear in a string in lower case. _client.executePipeline(new PipelineStage(\"send\", \"tw1\", map)).addOnCompleteListener(this, new OnCompleteListener<List<Object>>() { @Override public void onComplete(final @NonNull Task<List<Object>> task) { if (task.isSuccessful()) { Log.i(TAG, \"Successfully executed pipeline.\"); } else { Log.e(TAG, \"Failed to execute pipeline.\"); } } }); } } Prefs.java\u00b6 Prefs.java acts as a cache for quotes retrieved from the MongoDB database so that the app doesn\u2019t have to call the database more than once. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52package com.example.quoteoftheday; import android.content.Context; import android.content.SharedPreferences; import android.util.Log; import java.util.ArrayList; import java.util.HashSet; import java.util.List; import java.util.Set; import java.util.Iterator; public class Prefs { private SharedPreferences prefs; private Iterator iterator; private static String TAG = \"Prefs\"; final static String prefsName = new String(\"Quote of the Day\"); public Prefs(final Context context) { prefs = context.getSharedPreferences(prefsName, Context.MODE_PRIVATE); } public boolean putQuotes(final Set<String> quotes) { final SharedPreferences.Editor editor = prefs.edit(); editor.putStringSet(\"quotes\", quotes); return editor.commit(); } public String getQuote() { final Set<String> set = prefs.getStringSet(\"quotes\", new HashSet<String>()); final List<String> liststrings = new ArrayList<String>(set); if (liststrings.size() > 0) { final String retVal = liststrings.get(0); try { liststrings.remove(retVal); } catch (final UnsupportedOperationException uoe) { Log.e(TAG, uoe.getMessage()); } catch (final IndexOutOfBoundsException ioe) { Log.e(TAG,ioe.getMessage()); } putQuotes(new HashSet<>(liststrings)); return retVal; } else { return \"Out of quotes!\"; } } } build.gradle\u00b6 This is the build file used to compile the source code. Note The minimum supported Android API level for MongoDB Stitch is 19. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39apply plugin: 'com.android.application' android { compileSdkVersion 25 buildToolsVersion \"25.0.2\" defaultConfig { applicationId \"com.example.quoteoftheday\" minSdkVersion 19 targetSdkVersion 25 versionCode 1 versionName \"1.0\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' } } } repositories { // TODO: Remove once BSON 3.5.0 is released maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } dependencies { compile fileTree(dir: 'libs', include: ['*.jar']) androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', { exclude group: 'com.android.support', module: 'support-annotations' }) compile 'com.android.support:appcompat-v7:25.3.1' compile 'com.android.support.constraint:constraint-layout:1.0.2' testCompile 'junit:junit:4.12' compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' } \u2190 HTTP Android Tutorial \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/first-stitch-app.html",
      "title": "Build Your First Stitch App \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > Build Your First Stitch App Build Your First Stitch App\u00b6 Overview\u00b6 To get started with Stitch, we\u2019ll work with a single html file that contains a blog post. Using Stitch, we\u2019ll add commenting functionality. 1 Create the HTML page\u00b6 Create a file called blog.html that contains the following. <html> <head> </head> <body> <h3>Aspirational blog post</h3> <div id=\"content\"> I like to write about technology, because I want to get on the front page of hacker news (in a good way). </div> <hr> <div id=\"comments\"></div> </body> </html> 2 Create an Atlas cluster\u00b6 To use MongoDB Stitch, you must be logged in to MongoDB Atlas. Go to Atlas and login or create an account. No credit card is required. When prompted, create a group. This will be used to identify your Atlas clusters. Next, deploy an M0 (FREE) Atlas cluster. Wait for your cluster to initialize. 3 Initialize MongoDB Stitch app\u00b6 Click Stitch Apps in your MongoDB Atlas console and then click Create New Application. Name your application blog_comments. Wait for your application to initialize. 4 Turn on anonymous authentication\u00b6 In the MongoDB Stitch application page, turn on Anonymous Authentication. 5 Add the MongoDB Stitch JavaScript SDK to our HTML page\u00b6 In the left navigation panel under STITCH CONSOLE, click Clients. Under Importing on a Web Page click COPY LINE. Paste the line you just copied into the HEAD near the top of our blog.html file. 6 Initiate a client connection\u00b6 In our blog.html file, just below the first script tag, add the following. <script> const client = new stitch.StitchClient('blog_comments-abcde'); const db = client.service('mongodb', 'mongodb-atlas').db('blog'); </script> Replace blog_comments-abcde in the above with your App Id. You will find the App Id at the top of the Clients page for your MongoDB Stitch app. 7 Display comments\u00b6 MongoDB Stitch requires clients to authenticate before interacting with any MongoDB Stitch service. Use StitchClient.login() to anonymously authenticate and then display comments. In the blog.html file, update the script block to include support for displaying comments. function displayComments() { db.collection('comments').find({}).then(docs => { var html = docs.map(c => \"<div>\" + c.comment + \"</div>\").join(\"\"); document.getElementById(\"comments\").innerHTML = html; }); } function displayCommentsOnLoad() { client.login().then(displayComments) } Update the body tag in blog.html to display comments when the page loads. <body onload=\"displayCommentsOnLoad()\"> Open the developer console and reload the blog.html page. You will see an error because we have not yet set up our comments collection. 8 Set up our comments collection\u00b6 In the left navigation panel, under Atlas Clusters click mongodb-atlas and select the Rules tab. Click New to add a new MongoDB Collection. Enter blog for the Database, comments for the Collection, and click Create. 9 Allow anyone to read comments\u00b6 By default, MongoDB Stitch configures authorization such that data may only be read and written by the owner. Because we are not creating private data, we can relax the default authorization for blog comments. Under Atlas Clusters click mongodb-atlas Click the Rules tab Under MongoDB Collections click blog.comments Click the Filters tab. Delete the existing filter and click SAVE. Click the Field Rules tab. For Permissions on top-level document, change the READ rule to {} and click SAVE. We have now configured authorization on blog comments so that anyone can read anything in the blog.comments collection, but only the owners can edit or delete their own comments. 10 Add a form for creating comments\u00b6 Now we can add comments. At the bottom of the blog.html file add the following to create a form for adding comments. <hr> Add comment: <input id=\"new_comment\"><input type=\"submit\" onClick=\"addComment()\"> Add the addComment() function to your script block. function addComment() { var c = document.getElementById(\"new_comment\"); db.collection(\"comments\").insert({owner_id : client.authedId(), comment: c.value}) .then(displayComments); c.value = \"\"; } You should now be able to add comments to your blog post! We are using anonymous login here, but you can configure your app to use email/password authentication, use Google or Facebook via OAuth, or set up custom authentication based on JSON Web Tokens. See Authentication for more information. Completed blog.html\u00b6 For reference, here is the entire app in one block. <html> <head> <script src=\"https://s3.amazonaws.com/stitch-sdks/js/library/stable/stitch.min.js\"></script> <script> const client = new stitch.StitchClient('blog_comments2-abcde'); const db = client.service('mongodb', 'mongodb-atlas').db('blog'); function displayComments() { db.collection('comments').find({}).then(docs => { var html = docs.map(c => \"<div>\" + c.comment + \"</div>\").join(\"\"); document.getElementById(\"comments\").innerHTML = html; }); } function displayCommentsOnLoad() { client.login().then(displayComments) } function addComment() { var c = document.getElementById(\"new_comment\"); db.collection(\"comments\").insert({owner_id : client.authedId(), comment: c.value}) .then(displayComments); c.value = \"\"; } </script> </head> <body onload=\"displayCommentsOnLoad()\"> <h3>Aspirational blog post</h3> <div id=\"content\"> I like to write about technology, because I want to get on the front page of hacker news (in a good way). </div> <hr> <div id=\"comments\"></div> <hr> Add comment: <input id=\"new_comment\"><input type=\"submit\" onClick=\"addComment()\"> </body> </html> Next Steps\u00b6 Create a ToDo app using MongoDB Stitch, see ToDo (Web App). \u2190 Getting Started ToDo (Web App) \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/platespace-android.html",
      "title": "PlateSpace Tutorial (Android App) \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > PlateSpace Tutorial (Android App) PlateSpace Tutorial (Android App)\u00b6 On this page Prerequisites Procedure Collection Information This tutorial demonstrates how to use MongoDB Stitch to integrate the following services for an Android application: Facebook user authentication services Anonymous authentication MongoDB Service PlateSpace is a sample native application built around a social, mobile, local restaurant search concept. The user will see a list of restaurants, sorted by their physical proximity to the user\u2019s location. The user can browse through the restaurants, in either map view or a list view, and use advanced filtering and keywords to search for more entries. Tapping on a restaurant leads to the restaurant\u2019s page, which displays additional details including the average rating and reviews. Logged in users will be able to add/edit ratings & reviews to the restaurant. Prerequisites\u00b6 Android Studio 2.3.2 Familiarity with the Java programming language SimpleRatingBar, a UI component used for rating restaurants Calligraphy for custom fonts in Android AutoFitTextView to set the size of a TextViews according to available container space Glide for loading images from URLs. Facebook SDK to authenticate via Facebook Paginate to paginate using RecyclerView Procedure\u00b6 A. Create a MongoDB Stitch App\u00b6 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. B. Define Pipelines\u00b6 1 Define a named pipeline userHasMoreThanOneReview.\u00b6 A pipeline consists of stages. Each stage defines an action to perform. For this tutorial, define a pipeline that reads the platespace.reviewsRatings collection and determines if the user has more than one review for a given restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name userHasMoreThanOneReview Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following two parameters. userId restaurantId Set both parameters as required. Clients calling the pipeline must include these parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step for details. For the output type, select Boolean. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"owner_id\": \"%%vars.userId\", \"restaurantId\": \"%%vars.restaurantId\" } }, { \"$count\": \"result\" }, { \"$match\": { \"result\": { \"$gte\": 1} } } ] } Bind data to %%vars You cannot directly reference the parameters userId and restaurantId in the stage. Instead, define variables that reference the parameters, and then reference the variables. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"userId\": \"%%args.userId\", \"restaurantId\": \"%%args.restaurantId\" } Click Done. Click Save. 2 Define a named pipeline userHasSingleReview.\u00b6 Define a pipeline that reads the platespace.reviewsRatings collection to determine if the user has exactly one review for a given restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline: Name userHasSingleReview Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following two parameters. userId restaurantId Set both parameters as required. Clients calling the pipeline must include these parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step below for details. For the output type, select Boolean. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"owner_id\": \"%%vars.userId\", \"restaurantId\": \"%%vars.restaurantId\" } }, { \"$count\": \"result\" }, { \"$match\": { \"result\": 1 } } ] } Bind data to %%vars You cannot directly reference the parameters userId and restaurantId in the stage. Instead, define variables that reference the parameters, and reference the variables in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"userId\": \"%%args.userId\", \"restaurantId\": \"%%args.restaurantId\" } Click Done Click Save. 3 Define a named pipeline geoNear.\u00b6 Define a pipeline that reads from the platespace.restaurants collection to find the nearest restaurants given the input arguments. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline: Name geoNear Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameters: longitude latitude query limit minDistance Select all except the query parameter as Required. Clients calling the pipeline must include the required parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step below for details. For the output type, select Array For the displayed stage, edit the following: Service Select mongodb-atlas Action Select aggregate In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"restaurants\", \"pipeline\": [ { \"$geoNear\": { \"near\": { \"coordinates\": [ \"%%vars.longitude\", \"%%vars.latitude\" ], \"type\": \"Point\" }, \"query\": \"%%vars.query\", \"limit\": \"%%vars.limit\", \"minDistance\": \"%%vars.minDistance\", \"distanceField\": \"dist\", \"spherical\": true } } ] } Bind data to %%vars You cannot directly reference the parameters in the stage. Instead, define variables that reference the parameters, and reference the variables in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"longitude\": \"%%args.longitude\", \"latitude\": \"%%args.latitude\", \"query\": \"%%args.query\", \"limit\": \"%%args.limit\", \"minDistance\": \"%%args.minDistance\" } Click Done Click Save. 4 Define a named pipeline aggregateRestaurant.\u00b6 Define a pipeline that calculates the number of reviews and the average rating for a specified restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name aggregateRestaurant Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameter: restaurantId Set the parameter as required. Clients calling the pipeline must include this parameter. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the edit stage step below for details. For the output type, ensure that Single Document is selected. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"restaurantId\": \"%%vars.restaurantId\", \"rate\": { \"$exists\": true } } }, { \"$group\": { \"_id\": \"$restaurantId\", \"average\": { \"$avg\": \"$rate\" }, \"count\": { \"$sum\": 1 } } } ] } Bind data to %%vars You cannot directly reference the parameter restaurantId in the stage. Instead, define a variable that references the parameter, and then reference the variable in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"restaurantId\": \"%%args.restaurantId\" } Click Done. Click Save. 5 Define a named pipeline updateRatings.\u00b6 Define a pipeline that updates the platespace.restaurants collection with the number of reviews and the average rating for a specified restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name updateRatings Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Enable skip rules. In a later step, you will set up write rules that prevents write operations to this collection. As such, in order for the pipeline to bypass this rule and write to the collection, you need to skip rules. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameter: restaurantId Select the parameter as required. Clients calling the pipeline must include this parameter. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the edit stage step below for details. For the output type, ensure that Single Document is selected. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select update. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"restaurants\", \"query\": { \"_id\": \"%%vars.restaurantId\" }, \"update\": { \"$set\": { \"averageRating\": \"%%vars.pipelineResult.average\", \"numberOfRates\": \"%%vars.pipelineResult.count\" } }, \"upsert\": false, \"multi\": false } Bind data to %%vars You cannot directly reference the parameter restaurantId in the stage. Instead, define a variable that references the parameter, and then reference the variable in the stage. You can also reference other named pipelines using the %pipeline expansion. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"restaurantId\": \"%%args.restaurantId\", \"pipelineResult\": { \"%pipeline\": { \"name\": \"aggregateRestaurant\", \"args\": { \"restaurantId\": \"%%args.restaurantId\" } } } } Click Done. Save. C. Define Rules\u00b6 1 Add rules for each collection the MongoDB service must access.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following namespaces: Database: platespace Collection: restaurants Database: platespace Collection: reviewsRatings Note You must add rules for each collection the MongoDB service accesses. 2 Review the rules for platespace.restaurants collection.\u00b6 Click on platespace.restaurants to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Review read rule for platespace.restaurants. To view the read rule, click on the R in the Field Rules view. Modify the read rule at the top level to the following and click Save: { } The new rule specifies that all the fields in the documents are always readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Review write rule for platespace.restaurants. To view the write rule, click on the W in the Field Rules view. Modify the write rule at the top level to the following and click Save: { \"%%true\": false } The new rule specifies that no fields are writable . For more information on MongoDB write rules, see MongoDB Service Write Rule. Delete the owner_id field. For this collection, the owner_id field does not exist. Delete the owner_id field by hovering over it and clicking the x on the right-hand side. Allow all other fields for platespace.restaurants. By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. Review filters for platespace.restaurants. Click on the Filters. Delete the default filter. For more information on filters, see MongoDB Service Filters. Save your changes. 3 Review the rules for platespace.reviewsRatings collection.\u00b6 Click on platespace.reviewsRatings to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Review read rule for platespace.reviewsRatings. To view the read rule, click on the R in the Field Rules view. Modify the read rule at the top level to the following and click Save: { } The new rule specifies that all the fields in the documents are always readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Review write rule for platespace.reviewsRatings. To view the write rule, click on the W in the Field Rules view. Modify the write rule at the top level to the following and click Save: { \"%and\": [ { \"%%root.owner_id\": \"%%user.id\" }, { \"%or\": [ { \"%and\": [ { \"%%true\": { \"%pipeline\": { \"name\": \"userHasSingleReview\", \"args\": { \"userId\": \"%%user.id\", \"restaurantId\": \"%%root.restaurantId\" } } } }, { \"%%prevRoot\": { \"%exists\": true } } ] }, { \"%and\": [ { \"%%false\": { \"%pipeline\": { \"name\":\"userHasMoreThanOneReview\", \"args\": { \"userId\": \"%%user.id\", \"restaurantId\": \"%%root.restaurantId\" } } } }, { \"%%prevRoot\": { \"%exists\": false } } ] } ] } ] } The new rule specifies that the fields in a document are writable if: After the write operation, the owner_id field in the document equals the id of the user logged to the PlateSpace app, and After the write operation of a document, the user only has a single review of the particular restaurant. This condition is determined through the evaluation of either: the named pipeline userHasSingleReview if before the write, the user already has a review of the restaurant - or- the named pipeline userHasMoreThanOneReview if before the write, the user does not have a review of the particular restaurant. The named pipelines are defined as part of this tutorial procedure. For more information on MongoDB write rules, see MongoDB Service Write Rule. Review validation rule for platespace.reviewsRatings To view the validation rules, click on a V, if any, in the Field Rules view. By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Allow all other fields. By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. Review filters for platespace.reviewsRatings. Click on the Filters. By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. Delete the default filter. For more information on filters, see MongoDB Service Filters. Save your changes. D. Set Up Facebook Auth\u00b6 1 Set up an app in Facebook.\u00b6 Log in to your Facebook Developer account. If you do not have a Facebook developer account or even a Facebook account, see Facebook - Register and Configure an App. Add a new Facebook application. Once created, your application view opens to Product Setup. If not, go to your newly added app and click Add Product. In Product Setup, click Get Started for Facebook Login. Continue with the Quickstart of Android, up to and including the step Edit Your Manifest. Click Settings under Facebook Login in the left-hand navigation menu. Under Valid OAuth redirect URIs, add the following entry: https://stitch.mongodb.com/api/client/v1.0/auth/callback Save changes. 2 Retrieve the App ID and App Secret for your Facebook app.\u00b6 Click Settings for your Facebook application (i.e. not the Settings under Facebook Login). Note the App ID and App Secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. 3 Configure MongoDB Stitch for Facebook Authentication.\u00b6 Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Facebook, click the Edit button. In the Edit Provider dialog, Switch Facebook to enabled. Enter your new Facebook App ID in the Client ID field and Facebook App Secret in Client Secret field. Click Save. E. Set Up Anonymous Auth\u00b6 1 Click Authentication in the left side navigation in the MongoDB Stitch console.\u00b6 The Authentication page displays the Authentication Providers information. 2 Enable Anonymous Authentication.\u00b6 For Allow users to log in anonymously, click the Edit button. Switch Allow users to log in anonymously to enabled. Close the dialog. F. Download the PlateSpace Application Source\u00b6 Download from the MongoDB Stitch github example repository and unzip. The source code for the PlateSpace application can be found in PlateSpace directory. G. Populate the restaurants Collection from Yelp.\u00b6 1 Create a new Yelp app.\u00b6 Log in to your Yelp developer account. Create a new Yelp app. 2 Get an auth token for your Yelp app.\u00b6 To get your auth token, issue the following POST operation, substituting <CLIENT_ID> with your client id and <CLIENT_SECRET> with your client secret: curl -X POST https://api.yelp.com/oauth2/token -d 'grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>' For more information, see https://www.yelp.com/developers/documentation/v3/authentication 3 Edit the config.js file with your Yelp token.\u00b6 From the downloaded examples directory, navigate to PlateSpace/ETL folder. Edit the config.js file: For YELP_AUTH_TOKEN, enter \"Bearer <YOUR_YELP_TOKEN>\" where <YOUR_YELP_TOKEN> is the auth token for your app. 4 Edit the config.js file with your Atlas cluster connection info.\u00b6 Go to Atlas, and click on Clusters. For your cluster linked to the MongoDB Stitch app, click Connect to view the Connect dialog. Copy the URI Connection string. Edit the config.js file: For MONGO_URI, enter the connection string to your Atlas cluster. Substitute <PASSWORD> for your password and <DATABASE> with the target database platespace. 5 Add IP Address to your Atlas cluster\u2019s IP Whitelist.\u00b6 Add to your Atlas cluster\u2019s IP Whitelist the ip address from which you will run the load script. From Connect dialog (see previous step), you can add to the IP Whistelist. Add the IP address from which you will run the load script. 6 Load data into restaurants collection.\u00b6 Install dependencies for the script. yarn Run the load script to populate the platespace.restaurants collection: node index.js If you wish to delete the collection, you can run node clearRestCollection.js. H. Set Up and Run PlateSpace App\u00b6 1 Add MongoDB Stitch SDK library as a dependency for the project.\u00b6 2 Review code to connect to MongoDB Stitch.\u00b6 Use the StitchClient class to connect to your MongoDB Stitch application 3 Review code to authenticate application users.\u00b6 StitchClient.getAuthProviders() returns a task yielding an AvailableAuthProviders instance. Using this, you can determine what forms of authentication your MongoDB Stitch application permits. Call the StitchClient.logInWithProvider() method with an instance of one of the available AuthProvider subclasses: AnonymousAuthProvider FacebookAuthProvider In the example application, you may change your Facebook application id within the file app/src/main/res/values/strings.xml. GoogleAuthProvider The app/src/main/java/com/mongodb/solomo/mongodb/MongoDBManager.java file demonstrates use of these methods. \u27a4 Anonymous Authentication: mStitchClient.getAuthProviders().addOnCompleteListener(new OnCompleteListener<AvailableAuthProviders>() { @Override public void onComplete(@NonNull final Task<AvailableAuthProviders> task) { if (task.isSuccessful()) { if (task.getResult().hasAnonymous()) { /* * Service enabled anonymous authentication * */ //login anonymously mStitchClient.logInWithProvider(new AnonymousAuthProvider()).continueWith(new Continuation<Auth, Object>() { @Override public Object then(@NonNull final Task<Auth> task) throws Exception { if (task.isSuccessful()) { //we are logged in anonymously } else { //anonymous login failed } return null; } }); } else { //the service doesn't allow anonymous authentication } } } }); \u27a4 Facebook Authentication: mStitchClient.getAuthProviders().addOnCompleteListener(new OnCompleteListener<AvailableAuthProviders>() { @Override public void onComplete(@NonNull final Task<AvailableAuthProviders> task) { if (!task.isSuccessful()) { // Could not retrieve authentication providers; } else { if (task.getResult().hasFacebook()) { /* * Facebook authentication is enabled by the service, * try to login using the access token we got from Facebook SDK * */ mStitchClient.logInWithProvider(FacebookAuthProvider.fromAccessToken(accessToken)).continueWith(new Continuation<Auth, Object>() { @Override public Object then(@NonNull final Task<Auth> task) throws Exception { if (task.isSuccessful()) { //we are logged in with Facebook } else { // Error logging with facebook } return null; } }); } else { /* * The service does not support Facebook authentication * */ } } } }); 4 Review code to query a collection and execute pipelines.\u00b6 The file app/src/main/java/com/mongodb/solomo/mongodb/MongoDBManager.java contains code to query data from the database: Document query = new Document(); if (filters != null) { if (filters.isVeganFriendly()) { query.put(\"attributes.veganFriendly\", true); } } if (keyword != null) { query.put(Restaurant.Field.NAME, new Document(\"$regex\", keyword).append(\"$options\", \"i\")); } if (farthestRestaurant != null) { query.put(Restaurant.Field.ID, new Document(\"$ne\", farthestRestaurant.getId())); } List<Document> items = new ArrayList<>(); items.add(new Document(\"result\", \"%%vars.geo_matches\")); //bind the arguments to our named pipeline required parameters double minDistance = farthestRestaurant == null ? 0 : farthestRestaurant.getDistance(); Document argsMap = new Document() .append(\"latitude\", latitude) //the current phone latitude .append(\"longitude\", longitude) //the current phone longitude .append(\"query\", query) //query will contain any additional parameters .append(\"minDistance\", minDistance) //pagination parameter .append(\"limit\", limit); //pagination limit Document pipelineMap = new Document() .append(\"name\", \"geoNear\") //our named pipeline in the service .append(\"args\", argsMap); //required parameters for the named pipeline /* * To execute the named pipeline we need to use the pipeline stage * */ PipelineStage literalStage = new PipelineStage(\"literal\", new Document(\"items\", items), new Document(\"geo_matches\", new Document(\"$pipeline\", pipelineMap))); mStitchClient.executePipeline(literalStage).continueWith(...); 5 Run the application.\u00b6 Running the app requires the following: SDK version 19 or later, Location services, and For Android 6.0 and above, location permissions must be granted. Collection Information\u00b6 Each document in the platespace.restaurants collection has the form: { \"_id\" : <ObjectId>, \"name\" : <String>, \"address\" : <String>, \"phone\" : <String>, \"Image_url\" : <String>, \"website\" : <String>, \"averageRating\" : <Double>, \"numberOfRates\" : <Double>, \"openingHours\" : { \"end\" : <String>, \"start\" : <String> }, \"attributes\" : { \"veganFriendly\" : <Boolean>, \"openOnWeekends\" : <Boolean>, \"hasParking\" : <Boolean>, \"hasWifi\" : <Boolean> }, \"location\" : { \"coordinates\" : [ \"longitude\" : <Double>, \"latitude\" : <Double> ], \"type\" : \"Point\" } } Note openingHours and attributes are custom fields added by our sample script to load data and not from Yelp. The field values are generated with dummy data. Each document in the platespace.reviewsRatings collection has the form: { \"_id\" : <ObjectId>, \"owner_id\" : <string>, \"restaurantId\" : <ObjectId>, \"nameOfCommenter\" : <String>, \"comment\": <String>, \"rate\" : <Integer>, \"dateOfComment\" : <Date> } \u2190 PlateSpace Tutorial (Web App) Services \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/platespace-ios.html",
      "title": "PlateSpace Tutorial (iOS App) \u2014 MongoDB Stitch (Beta)",
      "text": "PlateSpace Tutorial (iOS App)\u00b6 On this page Prerequisites Procedures Collection Information This tutorial demonstrates how to use MongoDB Stitch to integrate the following services for an iOS application: Facebook user authentication services Anonymous authentication MongoDB Service PlateSpace is a sample native application built around a social, mobile, local restaurant search concept. The user will see a list of restaurants, sorted by their physical proximity to the user\u2019s location. The user can browse through the restaurants, in either map view or a list view, and use advanced filtering and keywords to search for more entries. Tapping on a restaurant leads to the restaurant\u2019s page, which displays additional details including the average rating and reviews. Logged in users will be able to add/edit ratings & reviews to the restaurant. Prerequisites\u00b6 Xcode Version 8.2.1 Familiarity with the Swift programming language. Cosmos, a star rating control for iOS. Procedures\u00b6 A. Create a MongoDB Stitch App\u00b6 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. B. Define Pipelines\u00b6 1 Define a named pipeline userHasMoreThanOneReview.\u00b6 A pipeline consists of stages. Each stage defines an action to perform. For this tutorial, define a pipeline that reads the platespace.reviewsRatings collection and determines if the user has more than one review for a given restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name userHasMoreThanOneReview Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following two parameters. userId restaurantId Set both parameters as required. Clients calling the pipeline must include these parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step for details. For the output type, select Boolean. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"owner_id\": \"%%vars.userId\", \"restaurantId\": \"%%vars.restaurantId\" } }, { \"$count\": \"result\" }, { \"$match\": { \"result\": { \"$gte\": 1} } } ] } Bind data to %%vars You cannot directly reference the parameters userId and restaurantId in the stage. Instead, define variables that reference the parameters, and then reference the variables. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"userId\": \"%%args.userId\", \"restaurantId\": \"%%args.restaurantId\" } Click Done. Click Save. 2 Define a named pipeline userHasSingleReview.\u00b6 Define a pipeline that reads the platespace.reviewsRatings collection to determine if the user has exactly one review for a given restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline: Name userHasSingleReview Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following two parameters. userId restaurantId Set both parameters as required. Clients calling the pipeline must include these parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step below for details. For the output type, select Boolean. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"owner_id\": \"%%vars.userId\", \"restaurantId\": \"%%vars.restaurantId\" } }, { \"$count\": \"result\" }, { \"$match\": { \"result\": 1 } } ] } Bind data to %%vars You cannot directly reference the parameters userId and restaurantId in the stage. Instead, define variables that reference the parameters, and reference the variables in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"userId\": \"%%args.userId\", \"restaurantId\": \"%%args.restaurantId\" } Click Done Click Save. 3 Define a named pipeline geoNear.\u00b6 Define a pipeline that reads from the platespace.restaurants collection to find the nearest restaurants given the input arguments. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline: Name geoNear Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameters: longitude latitude query limit minDistance Select all except the query parameter as Required. Clients calling the pipeline must include the required parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step below for details. For the output type, select Array For the displayed stage, edit the following: Service Select mongodb-atlas Action Select aggregate In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"restaurants\", \"pipeline\": [ { \"$geoNear\": { \"near\": { \"coordinates\": [ \"%%vars.longitude\", \"%%vars.latitude\" ], \"type\": \"Point\" }, \"query\": \"%%vars.query\", \"limit\": \"%%vars.limit\", \"minDistance\": \"%%vars.minDistance\", \"distanceField\": \"dist\", \"spherical\": true } } ] } Bind data to %%vars You cannot directly reference the parameters in the stage. Instead, define variables that reference the parameters, and reference the variables in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"longitude\": \"%%args.longitude\", \"latitude\": \"%%args.latitude\", \"query\": \"%%args.query\", \"limit\": \"%%args.limit\", \"minDistance\": \"%%args.minDistance\" } Click Done Click Save. 4 Define a named pipeline aggregateRestaurant.\u00b6 Define a pipeline that calculates the number of reviews and the average rating for a specified restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name aggregateRestaurant Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameter: restaurantId Set the parameter as required. Clients calling the pipeline must include this parameter. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the edit stage step below for details. For the output type, ensure that Single Document is selected. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"restaurantId\": \"%%vars.restaurantId\", \"rate\": { \"$exists\": true } } }, { \"$group\": { \"_id\": \"$restaurantId\", \"average\": { \"$avg\": \"$rate\" }, \"count\": { \"$sum\": 1 } } } ] } Bind data to %%vars You cannot directly reference the parameter restaurantId in the stage. Instead, define a variable that references the parameter, and then reference the variable in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"restaurantId\": \"%%args.restaurantId\" } Click Done. Click Save. 5 Define a named pipeline updateRatings.\u00b6 Define a pipeline that updates the platespace.restaurants collection with the number of reviews and the average rating for a specified restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name updateRatings Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Enable skip rules. In a later step, you will set up write rules that prevents write operations to this collection. As such, in order for the pipeline to bypass this rule and write to the collection, you need to skip rules. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameter: restaurantId Select the parameter as required. Clients calling the pipeline must include this parameter. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the edit stage step below for details. For the output type, ensure that Single Document is selected. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select update. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"restaurants\", \"query\": { \"_id\": \"%%vars.restaurantId\" }, \"update\": { \"$set\": { \"averageRating\": \"%%vars.pipelineResult.average\", \"numberOfRates\": \"%%vars.pipelineResult.count\" } }, \"upsert\": false, \"multi\": false } Bind data to %%vars You cannot directly reference the parameter restaurantId in the stage. Instead, define a variable that references the parameter, and then reference the variable in the stage. You can also reference other named pipelines using the %pipeline expansion. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"restaurantId\": \"%%args.restaurantId\", \"pipelineResult\": { \"%pipeline\": { \"name\": \"aggregateRestaurant\", \"args\": { \"restaurantId\": \"%%args.restaurantId\" } } } } Click Done. Save. C. Define Rules\u00b6 1 Add rules for each collection the MongoDB service must access.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following namespaces: Database: platespace Collection: restaurants Database: platespace Collection: reviewsRatings Note You must add rules for each collection the MongoDB service accesses. 2 Review the rules for platespace.restaurants collection.\u00b6 Click on platespace.restaurants to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Review read rule for platespace.restaurants. To view the read rule, click on the R in the Field Rules view. Modify the read rule at the top level to the following and click Save: { } The new rule specifies that all the fields in the documents are always readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Review write rule for platespace.restaurants. To view the write rule, click on the W in the Field Rules view. Modify the write rule at the top level to the following and click Save: { \"%%true\": false } The new rule specifies that no fields are writable . For more information on MongoDB write rules, see MongoDB Service Write Rule. Delete the owner_id field. For this collection, the owner_id field does not exist. Delete the owner_id field by hovering over it and clicking the x on the right-hand side. Allow all other fields for platespace.restaurants. By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. Review filters for platespace.restaurants. Click on the Filters. Delete the default filter. For more information on filters, see MongoDB Service Filters. Save your changes. 3 Review the rules for platespace.reviewsRatings collection.\u00b6 Click on platespace.reviewsRatings to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Review read rule for platespace.reviewsRatings. To view the read rule, click on the R in the Field Rules view. Modify the read rule at the top level to the following and click Save: { } The new rule specifies that all the fields in the documents are always readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Review write rule for platespace.reviewsRatings. To view the write rule, click on the W in the Field Rules view. Modify the write rule at the top level to the following and click Save: { \"%and\": [ { \"%%root.owner_id\": \"%%user.id\" }, { \"%or\": [ { \"%and\": [ { \"%%true\": { \"%pipeline\": { \"name\": \"userHasSingleReview\", \"args\": { \"userId\": \"%%user.id\", \"restaurantId\": \"%%root.restaurantId\" } } } }, { \"%%prevRoot\": { \"%exists\": true } } ] }, { \"%and\": [ { \"%%false\": { \"%pipeline\": { \"name\":\"userHasMoreThanOneReview\", \"args\": { \"userId\": \"%%user.id\", \"restaurantId\": \"%%root.restaurantId\" } } } }, { \"%%prevRoot\": { \"%exists\": false } } ] } ] } ] } The new rule specifies that the fields in a document are writable if: After the write operation, the owner_id field in the document equals the id of the user logged to the PlateSpace app, and After the write operation of a document, the user only has a single review of the particular restaurant. This condition is determined through the evaluation of either: the named pipeline userHasSingleReview if before the write, the user already has a review of the restaurant - or- the named pipeline userHasMoreThanOneReview if before the write, the user does not have a review of the particular restaurant. The named pipelines are defined as part of this tutorial procedure. For more information on MongoDB write rules, see MongoDB Service Write Rule. Review validation rule for platespace.reviewsRatings To view the validation rules, click on a V, if any, in the Field Rules view. By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Allow all other fields. By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. Review filters for platespace.reviewsRatings. Click on the Filters. By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. Delete the default filter. For more information on filters, see MongoDB Service Filters. Save your changes. D. Set Up Facebook Auth\u00b6 1 Set up an app in Facebook.\u00b6 Log in to your Facebook Developer account. If you do not have a Facebook developer account or even a Facebook account, see Facebook - Register and Configure an App. Add a new Facebook application. Once created, your application view opens to Product Setup. If not, go to your newly added app and click Add Product. In Product Setup, for Facebook Login, click Set Up. This brings up the Quickstart for Facebook Login. In the Quickstart for iOS: You can skip the Download the Facebook SDK for iOS step and the Add Login Kit to your Xcode Project step as the PlateSpace iOS app project covers these steps. For Add your Bundle Identifier, enter: com.mongodb.PlateSpace Optional. You can enable/disable Single Sign On and continue to the next step. Note the following FacebookAppID and CFBundleURLSchemes entries for your project file: <array> <dict> <key>CFBundleURLSchemes</key> <array> <string>fb111111111111111</string> </array> </dict> </array> <key>FacebookAppID</key> <string>111111111111111</string> You will use these entries later during the setup step of the Xcode project in this tutorial. You can omit the remaining QuickStart steps. Click Settings under Facebook Login in the left-hand navigation menu. Under Valid OAuth redirect URIs, add the following entry: https://stitch.mongodb.com/api/client/v1.0/auth/callback Save changes. 2 Retrieve the App ID and App Secret for your Facebook app.\u00b6 Click Settings for your Facebook application (i.e. not the Settings under Facebook Login). Note the App ID and App Secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. 3 Configure MongoDB Stitch for Facebook Authentication.\u00b6 Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Facebook, click the Edit button. In the Edit Provider dialog, Switch Facebook to enabled. Enter your new Facebook App ID in the Client ID field and Facebook App Secret in Client Secret field. Click Save. E. Set Up Anonymous Auth\u00b6 1 Click Authentication in the left side navigation in the MongoDB Stitch console.\u00b6 The Authentication page displays the Authentication Providers information. 2 Enable Anonymous Authentication.\u00b6 For Allow users to log in anonymously, click the Edit button. Switch Allow users to log in anonymously to enabled. Close the dialog. F. Download the PlateSpace Application Source\u00b6 Download from the MongoDB Stitch github example repository and unzip. The source code for the PlateSpace application can be found in PlateSpace directory. G. Populate the restaurants Collection from Yelp.\u00b6 1 Create a new Yelp app.\u00b6 Log in to your Yelp developer account. Create a new Yelp app. 2 Get an auth token for your Yelp app.\u00b6 To get your auth token, issue the following POST operation, substituting <CLIENT_ID> with your client id and <CLIENT_SECRET> with your client secret: curl -X POST https://api.yelp.com/oauth2/token -d 'grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>' For more information, see https://www.yelp.com/developers/documentation/v3/authentication 3 Edit the config.js file with your Yelp token.\u00b6 From the downloaded examples directory, navigate to PlateSpace/ETL folder. Edit the config.js file: For YELP_AUTH_TOKEN, enter \"Bearer <YOUR_YELP_TOKEN>\" where <YOUR_YELP_TOKEN> is the auth token for your app. 4 Edit the config.js file with your Atlas cluster connection info.\u00b6 Go to Atlas, and click on Clusters. For your cluster linked to the MongoDB Stitch app, click Connect to view the Connect dialog. Copy the URI Connection string. Edit the config.js file: For MONGO_URI, enter the connection string to your Atlas cluster. Substitute <PASSWORD> for your password and <DATABASE> with the target database platespace. 5 Add IP Address to your Atlas cluster\u2019s IP Whitelist.\u00b6 Add to your Atlas cluster\u2019s IP Whitelist the ip address from which you will run the load script. From Connect dialog (see previous step), you can add to the IP Whistelist. Add the IP address from which you will run the load script. 6 Load data into restaurants collection.\u00b6 Install dependencies for the script. yarn Run the load script to populate the platespace.restaurants collection: node index.js If you wish to delete the collection, you can run node clearRestCollection.js. H. Set Up and Run PlateSpace App\u00b6 1 Open the project in Xcode.\u00b6 Navigate to the downloaded example directory and navigate to the /PlateSpace/iOS directory. Open the workspace file. 2 Update Xcode project with your MongoDB Stitch App ID.\u00b6 From the MongoDBSample view: Open the MongoDBSample/Resources/PlateSpace-Info.plist file. Update the APP_ID with your MongoDB Stitch app id and save. In the MongoDB Stitch console, you can find your App ID in the Clients view. 3 Update project with your Facebook App ID.\u00b6 Open the PlateSpace/Resources/Info.plist file. Update the FacebookAppID with your facebook_app_id entry. The entry is listed in the step Configure Your info.plist in the Facebook iOS Login Quickstart. Click on the PlateSpace project (not the folder) in the left hand navigation pane. Under Targets, ensure that PlateSpace is selected. Click on the Info tab and expand the URL Types. Click on the + to add a new URL. In the URL Schemes, enter the CFBundleURLSchemes value from the Configure Your info.plist step. The value has the form: fb<facebook_app_id>. 4 Review code to connect to MongoDB Stitch.\u00b6 Use the StitchClient class to connect to your MongoDB Stitch application. The Classes/Managers/MongoDBManager.swift file has the following code: import MongoCore import MongoDB //... private static let appId = \"<YOUR-APP-NAME>\" //... class MongoDBManager { let stitchClient: StitchClient //... init() { stitchClient = StitchClient(appId: MongoDBManager.appId) } } Replace <YOUR-APP-NAME> with your MongoDB Stitch app ID. In the MongoDB Stitch console, you can find your App ID in the Clients view. 5 Review code to authenticate application users.\u00b6 StitchClient provides various functions to authenticate: MongoDBManager.shared.stitchClient.anonymousAuth() Provides anonymous authentication. StitchClient.authWithOAuth('facebook') Provides authentication through Facebook. The Classes/Controllers/LoginViewController.swift file demonstrates use of these methods: import FBSDKLoginKit import MongoCore //... // Anonymous authentication MongoDBManager.shared.stitchClient.anonymousAuth().response { [weak self] (result) in //... } //... // Facebook authentication FBSDKLoginManager().logIn(withReadPermissions: [\"email\"], from: self) { [weak self] (loginResult: FBSDKLoginManagerLoginResult?, error: Error?) in if let accessToken = FBSDKAccessToken.current() { let provider = FacebookAuthProvider(accessToken: accessToken.tokenString) MongoDBManager.shared.stitchClient.login(withProvider: provider).response { [weak self] (result) in //... } } else { //... } } 6 Review code to register MongoEntity instances\u00b6 Subclasses of RootMongoEntity represent documents in a collection. A subclass of EntityTypeMetaData describes the schema of a collection, and an instance should be registered with a RootMongoEntity class. The file Classes/AppDelegate/AppDelegate.swift contains code such as the following, where Restaurant is a subcalss of RootMongoEntity, and RestaurantMetaDataImp is a subclass of EntityTypeMetaData: func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool { // ... Restaurant.registerClass(entityMetaData: RestaurantMetaDataImp()) // ... } 7 Review code to query a collection.\u00b6 Build a Query to fetch reviews, using a Criteria to limit the results to specific users. For example, see Classes/Controllers/SingleRestaurantViewController/SingleRestaurantViewController.swift: func fetchReviews() { // Create a criteria which limits the query to this restaurant, to other users, // and to models that contain a review (will not fetch rating-only models) let criteria: Criteria = .equals(field: Review.restaurantIdKey, value: restaurantId) && .notEqual(field: Review.ownerIdKey, value: userId) && .exists(field: Review.commentKey, value: true) && .notEqual(field: Review.commentKey, value: NSNull()) // Build a query using the above criteria let query = Query<Review>(criteria: criteria, mongoClient: MongoManager.shared.mongoClient) // Fetch up to 5 reviews that match this query query.find(limit: 5).response { // ... } } 8 Review code to excute pipelines.\u00b6 To execute pipelines, use stitchClient.executePipeline(). For example, the Classes/Controllers/RestaurantListViewController/RestaurantListViewController.swift contains code to execute a pipeline to find nearby restaurants: private func geonearPipeline(withArguments arguments: Document) -> Pipeline { /// Pipeline args item specify the structure in which the query results will be returned let argsItems: BsonArray = [Document(dictionary: [Consts.pipelineResultKey : \"%%vars.\\(Consts.pipelineCommandName)\"])] /// The document which is passed to the 'let' field let letDocument = Document(dictionary: [\"%pipeline\" : Document(dictionary: [ \"name\" : Consts.pipelineName, \"args\" : arguments ])]) /// Build the pipeline let pipeline = Pipeline ( action: \"literal\", args: [\"items\" : argsItems], `let`: Document(dictionary: [Consts.pipelineCommandName : letDocument]) ) return pipeline } private func fetchRestaurants(paginated: Bool = false) { guard let location = userLocation else { return } /// Reset current restaurants and pagination distance if we have a new search which should query all the collection if !paginated { lastFetchDistance = Consts.fetchMinDistance restaurants = [] restaurantTableView.reloadData() showLoadingView(show: true) } /// Build a custom pipeline to support geoNear /// Arguments for the geoNear query var arguments = Document(dictionary: [ Consts.argsLatitudeKey : location.coordinate.latitude, Consts.argsLongitudeKey : location.coordinate.longitude, Consts.argsMinDistanceKey : lastFetchDistance, Consts.argsLimitKey : Consts.fetchLimit ]) /// Optional query argument for further filtering if let criteria = criteria() { arguments[Consts.argsQueryKey] = criteria.asDocument } let pipeline = geonearPipeline(withArguments: arguments) /// Execute the pipeline MongoDBManager.shared.stitchClient.executePipeline(pipeline: pipeline).response { [weak self] result in self?.showLoadingView(show: false) switch result { case .success(let successResult): self?.handlePipelineResult(successResult) case .failure(let error): print(\"Geonear pipeline execution failed with error: \\(error.localizedDescription)\") } } } The code builds a single stage pipeline using the built-in action literal that takes the argument items, which are the documents to return. The items are set to the variable geo_matches (use %%vars to access variables). The geo_matches variable is defined in the let statement where it is set/bound to named pipeline geoNear defined earlier in the tutorial (use %pipeline to access named pipelines). 9 Run the application.\u00b6 Collection Information\u00b6 Each document in the platespace.restaurants collection has the form: { \"_id\" : <ObjectId>, \"name\" : <String>, \"address\" : <String>, \"phone\" : <String>, \"Image_url\" : <String>, \"website\" : <String>, \"averageRating\" : <Double>, \"numberOfRates\" : <Double>, \"openingHours\" : { \"end\" : <String>, \"start\" : <String> }, \"attributes\" : { \"veganFriendly\" : <Boolean>, \"openOnWeekends\" : <Boolean>, \"hasParking\" : <Boolean>, \"hasWifi\" : <Boolean> }, \"location\" : { \"coordinates\" : [ \"longitude\" : <Double>, \"latitude\" : <Double> ], \"type\" : \"Point\" } } Note openingHours and attributes are custom fields added by our sample script to load data and not from Yelp. The field values are generated with dummy data. Each document in the platespace.reviewsRatings collection has the form: { \"_id\" : <ObjectId>, \"owner_id\" : <string>, \"restaurantId\" : <ObjectId>, \"nameOfCommenter\" : <String>, \"comment\": <String>, \"rate\" : <Integer>, \"dateOfComment\" : <Date> } \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/platespace-web.html",
      "title": "PlateSpace Tutorial (Web App) \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > PlateSpace Tutorial (Web App) PlateSpace Tutorial (Web App)\u00b6 On this page Prerequisites Procedure Collection Information Additional Information This tutorial demonstrates how to use MongoDB Stitch to integrate the following services for a Web application: Facebook user authentication services Anonymous authentication MongoDB Service PlateSpace is a sample native application built around a social, mobile, local restaurant search concept. The user will see a list of restaurants, sorted by their physical proximity to the user\u2019s location. The user can browse through the restaurants, in either map view or a list view, and use advanced filtering and keywords to search for more entries. All users can view restaurant details, but only users who have logged in through Facebook will be able to add/edit ratings and reviews to the restaurant. Prerequisites\u00b6 For this app, you need the following: A MongoDB Atlas cluster using MongoDB version 3.4+. The tutorial uses an Atlas Free Tier cluster. A developer account with Facebook for user authentication services. A developer account with Yelp to load restaurant data. Node v6 or above to run the application. Yarn Procedure\u00b6 A. Create a MongoDB Stitch App\u00b6 Estimated Time to Complete: ~8 minutes 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. B. Define Pipelines\u00b6 Estimated Time to Complete: ~10 minutes 1 Define a named pipeline userHasMoreThanOneReview.\u00b6 A pipeline consists of stages. Each stage defines an action to perform. For this tutorial, define a pipeline that reads the platespace.reviewsRatings collection and determines if the user has more than one review for a given restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name userHasMoreThanOneReview Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following two parameters. userId restaurantId Set both parameters as required. Clients calling the pipeline must include these parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step for details. For the output type, select Boolean. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"owner_id\": \"%%vars.userId\", \"restaurantId\": \"%%vars.restaurantId\" } }, { \"$count\": \"result\" }, { \"$match\": { \"result\": { \"$gte\": 1} } } ] } Bind data to %%vars You cannot directly reference the parameters userId and restaurantId in the stage. Instead, define variables that reference the parameters, and then reference the variables. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"userId\": \"%%args.userId\", \"restaurantId\": \"%%args.restaurantId\" } Click Done. Click Save. 2 Define a named pipeline userHasSingleReview.\u00b6 Define a pipeline that reads the platespace.reviewsRatings collection to determine if the user has exactly one review for a given restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline: Name userHasSingleReview Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following two parameters. userId restaurantId Set both parameters as required. Clients calling the pipeline must include these parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step below for details. For the output type, select Boolean. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"owner_id\": \"%%vars.userId\", \"restaurantId\": \"%%vars.restaurantId\" } }, { \"$count\": \"result\" }, { \"$match\": { \"result\": 1 } } ] } Bind data to %%vars You cannot directly reference the parameters userId and restaurantId in the stage. Instead, define variables that reference the parameters, and reference the variables in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"userId\": \"%%args.userId\", \"restaurantId\": \"%%args.restaurantId\" } Click Done Click Save. 3 Define a named pipeline geoNear.\u00b6 Define a pipeline that reads from the platespace.restaurants collection to find the nearest restaurants given the input arguments. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline: Name geoNear Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, rules do not apply to the service actions in the pipeline stages. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameters: longitude latitude query limit minDistance Select all except the query parameter as Required. Clients calling the pipeline must include the required parameters. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the stage edit step below for details. For the output type, select Array For the displayed stage, edit the following: Service Select mongodb-atlas Action Select aggregate In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"restaurants\", \"pipeline\": [ { \"$geoNear\": { \"near\": { \"coordinates\": [ \"%%vars.longitude\", \"%%vars.latitude\" ], \"type\": \"Point\" }, \"query\": \"%%vars.query\", \"limit\": \"%%vars.limit\", \"minDistance\": \"%%vars.minDistance\", \"distanceField\": \"dist\", \"spherical\": true } } ] } Bind data to %%vars You cannot directly reference the parameters in the stage. Instead, define variables that reference the parameters, and reference the variables in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"longitude\": \"%%args.longitude\", \"latitude\": \"%%args.latitude\", \"query\": \"%%args.query\", \"limit\": \"%%args.limit\", \"minDistance\": \"%%args.minDistance\" } Click Done Click Save. 4 Define a named pipeline aggregateRestaurant.\u00b6 Define a pipeline that calculates the number of reviews and the average rating for a specified restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name aggregateRestaurant Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameter: restaurantId Set the parameter as required. Clients calling the pipeline must include this parameter. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the edit stage step below for details. For the output type, ensure that Single Document is selected. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select aggregate. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"reviewsRatings\", \"pipeline\": [ { \"$match\": { \"restaurantId\": \"%%vars.restaurantId\", \"rate\": { \"$exists\": true } } }, { \"$group\": { \"_id\": \"$restaurantId\", \"average\": { \"$avg\": \"$rate\" }, \"count\": { \"$sum\": 1 } } } ] } Bind data to %%vars You cannot directly reference the parameter restaurantId in the stage. Instead, define a variable that references the parameter, and then reference the variable in the stage. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"restaurantId\": \"%%args.restaurantId\" } Click Done. Click Save. 5 Define a named pipeline updateRatings.\u00b6 Define a pipeline that updates the platespace.restaurants collection with the number of reviews and the average rating for a specified restaurant. Click Pipelines and then click New Pipeline. Enter the following properties for the pipeline. Name updateRatings Private Leave unselected. If selected, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as webhooks and other pipelines. Skip Rules Enable skip rules. In a later step, you will set up write rules that prevents write operations to this collection. As such, in order for the pipeline to bypass this rule and write to the collection, you need to skip rules. Can Evaluate Leave as {}. The Can Evaluate condition determines whether the pipeline can be run. An empty document {} always evaluates to true, indicating that the pipeline can always be run. Parameters Add the following parameter: restaurantId Select the parameter as required. Clients calling the pipeline must include this parameter. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the edit stage step below for details. For the output type, ensure that Single Document is selected. For the displayed stage, edit the following: Service Select mongodb-atlas. Action Select update. In the text box that appears, enter the following aggregation: { \"database\": \"platespace\", \"collection\": \"restaurants\", \"query\": { \"_id\": \"%%vars.restaurantId\" }, \"update\": { \"$set\": { \"averageRating\": \"%%vars.pipelineResult.average\", \"numberOfRates\": \"%%vars.pipelineResult.count\" } }, \"upsert\": false, \"multi\": false } Bind data to %%vars You cannot directly reference the parameter restaurantId in the stage. Instead, define a variable that references the parameter, and then reference the variable in the stage. You can also reference other named pipelines using the %pipeline expansion. Enable Bind data to %%vars and copy the following in the Bind data to %%vars text box: { \"restaurantId\": \"%%args.restaurantId\", \"pipelineResult\": { \"%pipeline\": { \"name\": \"aggregateRestaurant\", \"args\": { \"restaurantId\": \"%%args.restaurantId\" } } } } Click Done. Save. C. Define Rules\u00b6 Estimated Time to Complete: ~6 minutes 1 Add rules for each collection the MongoDB service must access.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following namespaces: Database: platespace Collection: restaurants Database: platespace Collection: reviewsRatings Note You must add rules for each collection the MongoDB service accesses. 2 Review the rules for platespace.restaurants collection.\u00b6 Click on platespace.restaurants to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Review read rule for platespace.restaurants. To view the read rule, click on the R in the Field Rules view. Modify the read rule at the top level to the following and click Save: { } The new rule specifies that all the fields in the documents are always readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Review write rule for platespace.restaurants. To view the write rule, click on the W in the Field Rules view. Modify the write rule at the top level to the following and click Save: { \"%%true\": false } The new rule specifies that no fields are writable . For more information on MongoDB write rules, see MongoDB Service Write Rule. Delete the owner_id field. For this collection, the owner_id field does not exist. Delete the owner_id field by hovering over it and clicking the x on the right-hand side. Allow all other fields for platespace.restaurants. By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. Review filters for platespace.restaurants. Click on the Filters. Delete the default filter. For more information on filters, see MongoDB Service Filters. Save your changes. 3 Review the rules for platespace.reviewsRatings collection.\u00b6 Click on platespace.reviewsRatings to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Review read rule for platespace.reviewsRatings. To view the read rule, click on the R in the Field Rules view. Modify the read rule at the top level to the following and click Save: { } The new rule specifies that all the fields in the documents are always readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Review write rule for platespace.reviewsRatings. To view the write rule, click on the W in the Field Rules view. Modify the write rule at the top level to the following and click Save: { \"%and\": [ { \"%%root.owner_id\": \"%%user.id\" }, { \"%or\": [ { \"%and\": [ { \"%%true\": { \"%pipeline\": { \"name\": \"userHasSingleReview\", \"args\": { \"userId\": \"%%user.id\", \"restaurantId\": \"%%root.restaurantId\" } } } }, { \"%%prevRoot\": { \"%exists\": true } } ] }, { \"%and\": [ { \"%%false\": { \"%pipeline\": { \"name\":\"userHasMoreThanOneReview\", \"args\": { \"userId\": \"%%user.id\", \"restaurantId\": \"%%root.restaurantId\" } } } }, { \"%%prevRoot\": { \"%exists\": false } } ] } ] } ] } The new rule specifies that the fields in a document are writable if: After the write operation, the owner_id field in the document equals the id of the user logged to the PlateSpace app, and After the write operation of a document, the user only has a single review of the particular restaurant. This condition is determined through the evaluation of either: the named pipeline userHasSingleReview if before the write, the user already has a review of the restaurant - or- the named pipeline userHasMoreThanOneReview if before the write, the user does not have a review of the particular restaurant. The named pipelines are defined as part of this tutorial procedure. For more information on MongoDB write rules, see MongoDB Service Write Rule. Review validation rule for platespace.reviewsRatings To view the validation rules, click on a V, if any, in the Field Rules view. By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Allow all other fields. By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. Review filters for platespace.reviewsRatings. Click on the Filters. By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. Delete the default filter. For more information on filters, see MongoDB Service Filters. Save your changes. D. Set Up Facebook Auth\u00b6 Estimated Time to Complete: ~7 minutes 1 Set up an app in Facebook.\u00b6 Log in to your Facebook Developer account. If you do not have a Facebook developer account or even a Facebook account, see Facebook - Register and Configure an App. Add a new Facebook application. Once created, your application view opens to Product Setup. If not, go to your newly added app and click Add Product. In Product Setup, for Facebook Login, click Set Up. This brings up the Quickstart for Facebook Login. Skip the Quickstart. Instead, in the left-hand navigation menu, under Products > Facebook Login, click Settings. Under Valid OAuth redirect URIs, add the following entry: https://stitch.mongodb.com/api/client/v1.0/auth/callback Save changes. 2 Retrieve the App ID and App Secret for your Facebook app.\u00b6 Click Settings for your Facebook application (i.e. not the Settings under Facebook Login). Note the App ID and App Secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. 3 Configure MongoDB Stitch for Facebook Authentication.\u00b6 Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Facebook, click the Edit button. In the Edit Provider dialog, Switch Facebook to enabled. Enter your new Facebook App ID in the Client ID field and Facebook App Secret in Client Secret field. In the Redirect URIs, add the following: http://localhost:3000/ In the Metadata Fields, select name and email. Click Save. E. Set Up Anonymous Auth\u00b6 Estimated Time to Complete: ~2 minutes 1 Click Authentication in the left side navigation in the MongoDB Stitch console.\u00b6 The Authentication page displays the Authentication Providers information. 2 Enable Anonymous Authentication.\u00b6 For Allow users to log in anonymously, click the Edit button. Switch Allow users to log in anonymously to enabled. Close the dialog. F. Download the PlateSpace Application Source\u00b6 Estimated Time to Complete: ~2 minutes Download from the MongoDB Stitch github example repository and unzip. The source code for the PlateSpace application can be found in PlateSpace directory. G. Populate the restaurants Collection from Yelp.\u00b6 Estimated Time to Complete: ~8 minutes 1 Create a new Yelp app.\u00b6 Log in to your Yelp developer account. Create a new Yelp app. 2 Get an auth token for your Yelp app.\u00b6 To get your auth token, issue the following POST operation, substituting <CLIENT_ID> with your client id and <CLIENT_SECRET> with your client secret: curl -X POST https://api.yelp.com/oauth2/token -d 'grant_type=client_credentials&client_id=<CLIENT_ID>&client_secret=<CLIENT_SECRET>' For more information, see https://www.yelp.com/developers/documentation/v3/authentication 3 Edit the config.js file with your Yelp token.\u00b6 From the downloaded examples directory, navigate to PlateSpace/ETL folder. Edit the config.js file: For YELP_AUTH_TOKEN, enter \"Bearer <YOUR_YELP_TOKEN>\" where <YOUR_YELP_TOKEN> is the auth token for your app. 4 Edit the config.js file with your Atlas cluster connection info.\u00b6 Go to Atlas, and click on Clusters. For your cluster linked to the MongoDB Stitch app, click Connect to view the Connect dialog. Copy the URI Connection string. Edit the config.js file: For MONGO_URI, enter the connection string to your Atlas cluster. Substitute <PASSWORD> for your password and <DATABASE> with the target database platespace. 5 Add IP Address to your Atlas cluster\u2019s IP Whitelist.\u00b6 Add to your Atlas cluster\u2019s IP Whitelist the ip address from which you will run the load script. From Connect dialog (see previous step), you can add to the IP Whistelist. Add the IP address from which you will run the load script. 6 Load data into restaurants collection.\u00b6 Install dependencies for the script. yarn Run the load script to populate the platespace.restaurants collection: node index.js If you wish to delete the collection, you can run node clearRestCollection.js. H. Set Up and Run PlateSpace App\u00b6 Estimated Time to Complete: ~8 minutes 1 Go to the PlateSpace web app directory.\u00b6 Navigate to the downloaded example directory and go to the PlateSpace/Web directory. 2 Ensure MongoDB Stitch SDK library is a dependency for the project.\u00b6 The MongoDB Stitch SDK library has already been added to the package.json file as a dependency: \"mongodb-stitch\": \"0.0.16\" Additional depencies used by the app are listed in the file. 3 Update the application configuration with your MongoDB Stitch App Id.\u00b6 In the /src/config.js file, replace <YOUR_STITCH_APP_ID> with your MongoDB Stitch app ID: module.exports.STITCH_APP_ID = '<YOUR_STITCH_APP_ID>'; module.exports.MONGODB_SERVICE_NAME = 'mongodb-atlas'; module.exports.DB_NAME = 'platespace'; module.exports.STITCH_ENDPOINT= 'https://stitch.mongodb.com'; You can find your App ID in the Clients view in the MongoDB Stitch console. 4 Review code to connect to MongoDB Stitch.\u00b6 Use the StitchClient class to connect to your MongoDB Stitch application. The src/mongodb-manager/mongodb-manager.js file has the following code: import { StitchClient, builtins } from 'mongodb-stitch'; const config = require('./../config.js'); //... const stitchClient = new StitchClient(config.STITCH_APP_ID, options); 5 Review code to authenticate application users.\u00b6 StitchClient provides various functions to authenticate. For the three used in this tutorial: StitchClient.login() for anonymous login, and StitchClient.authWithOAuth('facebook') for Facebook Login. The mongodb-manager.js file has the following code: stitchClient.login(); //... stitchClient.authenticate('facebook'); 6 Review code to access the MongoDB service and collections.\u00b6 To access MongoDB database and collection using the MongoDB service, use: The StitchClient.service( ) function to return an instance of MongoDB Stitch MongoDBService. The MongoDBService.db() function to returns a DB object. The DB.collection() function to return a Collection object. For example, in the project, the mongodb-manager.js file has the following code: const COLLECTIONS = { RESTAURANTS: 'restaurants', REVIEWS_RATINGS: 'reviewsRatings' }; // ... const db = stitchClient.service('mongodb', config.MONGODB_SERVICE_NAME).db(config.DB_NAME); const restaurants = db.collection(COLLECTIONS.RESTAURANTS); const reviewsRatings = db.collection(COLLECTIONS.REVIEWS_RATINGS); The /src/config.js file contains the following values for the MONGODB_SERVICE_NAME and DB_NAME: module.exports.MONGODB_SERVICE_NAME = 'mongodb-atlas'; module.exports.DB_NAME = 'platespace'; 7 Review code to excute pipelines.\u00b6 To execute pipelines, use StitchClient.executePipeline(). For example, the mongodb-manager.js contains code to execute a pipeline to find nearby restaurants: function geoNear(latitude, longitude, query = {}, limit, minDistance = 0) { return stitchClient.executePipeline([ builtins.namedPipeline('geoNear', { latitude: latitude, longitude: longitude, minDistance: new Double(minDistance), query: query, limit: limit }) ]); } 8 Review code to query a collection.\u00b6 The Collection provides various CRUD function for operating on the collection. For example, the mongodb-manager.js contains the following code that uses the Collection.find() function to query the restaurants collection for a specific restaurant: return restaurants .find({ _id: new ObjectID(restaurantId) }) .then(data => data.map(convertToRestaurantModel)) .then(firstOrUndefined); where restaurant was initialized in an earlier step. 9 Run the PlateSpace Web application.\u00b6 Go to the PlateSpace Web application directory. To run using npm Install depencies: npm install Start a development server locally and launch the app: npm start To create a production build, run npm run build to create a build folder with the site\u2019s static assets. - or- To run using yarn Install depencies: yarn install Start a development server locally and launch the app: yarn start To create a production build, run yarn build to create a build folder with the site\u2019s static assets. Collection Information\u00b6 Each document in the platespace.restaurants collection has the form: { \"_id\" : <ObjectId>, \"name\" : <String>, \"address\" : <String>, \"phone\" : <String>, \"Image_url\" : <String>, \"website\" : <String>, \"averageRating\" : <Double>, \"numberOfRates\" : <Double>, \"openingHours\" : { \"end\" : <String>, \"start\" : <String> }, \"attributes\" : { \"veganFriendly\" : <Boolean>, \"openOnWeekends\" : <Boolean>, \"hasParking\" : <Boolean>, \"hasWifi\" : <Boolean> }, \"location\" : { \"coordinates\" : [ \"longitude\" : <Double>, \"latitude\" : <Double> ], \"type\" : \"Point\" } } Note openingHours and attributes are custom fields added by our sample script to load data and not from Yelp. The field values are generated with dummy data. Each document in the platespace.reviewsRatings collection has the form: { \"_id\" : <ObjectId>, \"owner_id\" : <string>, \"restaurantId\" : <ObjectId>, \"nameOfCommenter\" : <String>, \"comment\": <String>, \"rate\" : <Integer>, \"dateOfComment\" : <Date> } Additional Information\u00b6 React application developed using Create React App. Additional libraries used: date-fns geolib google-map-react material-ui radium rc-rate \u2190 ToDo (iOS App) PlateSpace Tutorial (Android App) \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/todo-android.html",
      "title": "ToDo (Android App) \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > ToDo (Android App) ToDo (Android App)\u00b6 This tutorial demonstrates how to use MongoDB Stitch to integrate the following services for an Android application: Google/Facebook user authentication services and MongoDB service. To demonstrate, the tutorial incorporates the services into a provided ToDo android application. The ToDo application is an application that maintains a single-user todo list. Users can log in using Google or Facebook credentials, add items to the list, check completed items and delete completed items. The ToDo app writes to the following collections in the todo database. items collection, which stores a document per each todo item. Prerequisites\u00b6 For this app, you need the following: A MongoDB Atlas cluster using MongoDB version 3.4+. The tutorial uses an Atlas Free Tier cluster. A developer account with either Google or Facebook (or both) for user authentication services. Android Studio project. Procedure\u00b6 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. 4 Configure the MongoDB service.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following collection: Database: todo Collection: items Note You must add rules for each collection the MongoDB service accesses. The application saves document to the collection. Each document in the todo.items collection has the form: { \"_id\" : <ObjectID>, \"text\" : <string>, // ToDo item. \"owner_id\" : <string>, // Corresponds to the user logged into the app. \"checked\" : <boolean> // Optional. Only appears if user checks the item in the app. } 5 Review the rules for todo.items collection.\u00b6 Click on todo.items to view the read rules, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Read Rule\u00b6 To view the read rule, click on the R in the Field Rules view. By default, the collection has the following read rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are readable if the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id, no field in the document is readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Write Rule\u00b6 To view the write rule, click on the W in the Field Rules view. By default, the collection has the following write rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are writable when after the write operation, the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id after the write operation, no field in the document is writable. Modify the write rule to the following and click Save: { \"%or\": [ { \"%%prevRoot.owner_id\": \"%%user.id\" }, { \"%%prevRoot\": { \"%exists\": 0 } } ] } %%prevRoot references the original document before the write operation. This rule requires that either: The document to be modified by the write operation contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id) - or - The document to be modified by the write operation did not exist; i.e. the write operation results in an insert operation. For more information on MongoDB write rules, see MongoDB Service Write Rule. Validation Rule\u00b6 To view a validation rule, if any, click on a V in the Field Rules view. By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Modify the validation rule to the following and click Save: \"%%user.id\" The new rule requires owner_id to equal the id of the user logged in to the ToDo app (%%user.id). MongoDB Stitch prevents write operations that fail this rule. For more information on validation rules, see MongoDB Service Validation. Allow All Other Fields\u00b6 By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. For more information, see MongoDB Service Rules Filters\u00b6 Click on the Filters. By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. For more information on filters, see MongoDB Service Filters. 6 Add authentication information in MongoDB Stitch.\u00b6 In the Authentication section in MongoDB Stitch, enable Facebook and Google. Facebook\u00b6 \u27a4 A. Set up an app in Facebook: Log in to your Facebook Developer account. If you do not have a Facebook developer account or even a Facebook account, see Facebook - Register and Configure an App. Add a new Facebook application. Once created, your application view opens to Product Setup. If not, go to your newly added app and click Add Product. In Product Setup, click Get Started for Facebook Login. The screen should display the Quickstart instructions. Choose Android for your platform. In the Quick Start for Android: You can skip the Download the Facebook SDK for Android step and the Import the Facebook SDK step as the ToDo android app project covers these steps. For Tell Us about Your Android Project step, enter the following: For Package Name, enter: com.mongodb.stitch.sdk.examples.todo For Default Activity Class Name, enter: com.mongodb.stitch.sdk.examples.todo.MainActivity Click Save. You may be prompted to verify the Google Play Package Name since your app is not listed publicly on Google Play. Click Use this package name. Continue to the next step. Generate the development key hash per instructions and save in the Key Hashes field and continue. Optional. You can enable/disable Single Sign On and continue to the next step. Note the following entries for your project file: facebook_app_id and fb_login_protocol_scheme to copy into your project\u2019s strings.xml file in a later step. <string name=\"facebook_app_id\">012345678900000</string> <string name=\"fb_login_protocol_scheme\">fb1234985978493875</string> meta-data entry to copy into your project\u2019s AndroidManifest file. <meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/facebook_app_id\"/> You will use these entries during the setup step of the ToDo Android project in this tutorial. You can omit the remaining steps as they are already incorporated into the ToDo Android project. Click Settings under Facebook Login in the left-hand navigation menu. Under Valid OAuth redirect URIs, add the following entry: https://stitch.mongodb.com/api/client/v1.0/auth/callback Save changes. Click Settings for your application (i.e. not the Settings under Facebook Login). Note the App ID and App Secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. \u27a4 B. Configure Stitch for Facebook Authentication: Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Facebook, click the Edit button. In the Edit Provider dialog, Switch the Facebook to enabled. Enter your new Facebook App ID in the Client ID field and Facebook App Secret in Client Secret field. Click Save. Google\u00b6 \u27a4 A. Set up an app in Google Cloud Platform: For Google authentication, you must create both Android client credentials and web client credentials. Create a new set of Google OAuth credentials for your application (see Setting up OAuth 2.0 for details). Go to your project view and click API Manager. Click Credentials. To create the Android client credentials, Create credentials, and select OAuth client ID. You may be prompted to configure the consent screen. If so, add the product name and click Save. When creating the OAuth client ID: For Application Type, select Android. For Name, enter a name to associate with the app. For Signing-certificate fingerprint, enter the SHA1 fingerprint. To generate the SHA1 fingerprint, in a terminal, run keytool -exportcert -alias androiddebugkey -keystore <path to debug.keystore> -list -v For example: keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore -list -v Tip If using debug.keystore, the password is android. Enter the SHA1 fingerprint. For more information and an example, see Google Setting up OAuth 2.0 Help page For Package name, enter the following: com.mongodb.stitch.sdk.examples.todo The package name may be found in the ToDo Android application project\u2019s AndroidManifest.xml Click Create. To create the Web app client credentials, Create credentials, and select OAuth client ID. For Application Type, select Web application. For Name, enter the name you want to associate with this application. For Authorized JavaScript origins, enter the following: https://stitch.mongodb.com For Authorized redirect URIs, enter the following: https://stitch.mongodb.com/api/client/v1.0/auth/callback Click Create. Note the Web app client ID and secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. \u27a4 B. Configure Stitch Admin Console for Google Authentication: Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Google, click the Edit button. In the Edit Provider dialog, Switch the Google to enabled. Enter your new Client ID and Client Secret from the google Web App client credentials. Click Save. 7 Download the ToDo Android application source.\u00b6 Download from the MongoDB Stitch github example repository and unzip. The source code for the ToDo Android application can be found in todo/android directory. 8 Open the project in Android Studio.\u00b6 Open Android Studio. Select Open an existing Android Studio project. Navigate to the downloaded example directory and open todo/android. 9 Update project with your MongoDB Stitch App ID.\u00b6 From the Project view: Go to the assets folder and open the stitch.properties file. Update the APP-ID with your MongoDB Stitch app id and save. In the MongoDB Stitch console, you can find your App ID in the Clients view. 10 Update project with your Facebook App ID.\u00b6 If using Facebook authentication, from the Project view: Go to the todo/res/values folder and open the strings.xml. Add your facebook_app_id entry and update the fb_login_protocol_scheme entry. The entries are listed in step 6 in the Facebook Login Quickstart. <string name=\"facebook_app_id\">012345678900000</string> <string name=\"fb_login_protocol_scheme\">fb1234985978493875</string> Go to the manifests folder and open the AndroidManifest.xml. Add your facebook meta-data entry inside the <application> block. The entry is listed in step 6 in the Facebook Login Quickstart. <meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/facebook_app_id\"/> 11 Review MongoDB Stitch connection logic in application source file.\u00b6 The MainActivity.java file contains logic that instantiates a _client connection to your MongoDB Stitch app (line 23) as well as instantiates a MongoClient that provides access to the MongoDB service named mongodb-atlas in you MongoDB Stitch app. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26private static final String TAG = \"TodoApp\"; private static final long REFRESH_INTERVAL_MILLIS = 1000; private static final int RC_SIGN_IN = 421; private CallbackManager _callbackManager; private GoogleApiClient _googleApiClient; private StitchClient _client; private MongoClient _mongoClient; private TodoListAdapter _itemAdapter; private Handler _handler; private Runnable _refresher; private boolean _fbInitOnce; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); _handler = new Handler(); _refresher = new ListRefresher(this); _client = StitchClient.fromProperties(this); _client.addAuthListener(new MyAuthListener(this)); _mongoClient = new MongoClient(_client, \"mongodb-atlas\"); initLogin(); 12 Run the todo app.\u00b6 Click Run. If no virtual device is available, click Create New Virtual Device. Select the Phone device for your app. You can use the default selection. Click Next. Click Download on one of the recommended system images. You may need to agree to the terms. Click Finish Select the virtual device from the Available Virtual Devices. Click OK. Wait for the device to come online. Sign in using Google or Facebook or anonymous login. \u2190 Integrate ToDo with Twilio ToDo (iOS App) \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/todo-ios.html",
      "title": "ToDo (iOS App) \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > ToDo (iOS App) ToDo (iOS App)\u00b6 On this page Prerequisites Procedure This tutorial demonstrates how to use MongoDB Stitch to integrate the following services for an iOS application: Google/Facebook user authentication services and MongoDB service. To demonstrate, the tutorial incorporates the services into a provided ToDo iOS application. The ToDo application is an application that maintains a single-user todo list. Users can log in using Google or Facebook credentials, add items to the list, check completed items and delete completed items. The ToDo app writes to the following collections in the todo database. Prerequisites\u00b6 For this app, you need the following: A MongoDB Atlas cluster using MongoDB version 3.4+. The tutorial uses an Atlas Free Tier cluster. A developer account with either Google or Facebook (or both) for user authentication services. iOS 9.0+ Xcode 8.2+ and an Xcode project. Procedure\u00b6 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. 4 Configure the MongoDB service.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following collection: Database: todo Collection: items Note You must add rules for each collection the MongoDB service accesses. The application saves document to the collection. Each document in the todo.items collection has the form: { \"_id\" : <ObjectID>, \"text\" : <string>, // ToDo item. \"owner_id\" : <string>, // Corresponds to the user logged into the app. \"checked\" : <boolean> // Optional. Only appears if user checks the item in the app. } 5 Review the rules for todo.items collection.\u00b6 Click on todo.items to view the read rules, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Read Rule\u00b6 To view the read rule, click on the R in the Field Rules view. By default, the collection has the following read rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are readable if the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id, no field in the document is readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Write Rule\u00b6 To view the write rule, click on the W in the Field Rules view. By default, the collection has the following write rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are writable when after the write operation, the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id after the write operation, no field in the document is writable. Modify the write rule to the following and click Save: { \"%or\": [ { \"%%prevRoot.owner_id\": \"%%user.id\" }, { \"%%prevRoot\": { \"%exists\": 0 } } ] } %%prevRoot references the original document before the write operation. This rule requires that either: The document to be modified by the write operation contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id) - or - The document to be modified by the write operation did not exist; i.e. the write operation results in an insert operation. For more information on MongoDB write rules, see MongoDB Service Write Rule. Validation Rule\u00b6 To view a validation rule, if any, click on a V in the Field Rules view. By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Modify the validation rule to the following and click Save: \"%%user.id\" The new rule requires owner_id to equal the id of the user logged in to the ToDo app (%%user.id). MongoDB Stitch prevents write operations that fail this rule. For more information on validation rules, see MongoDB Service Validation. Allow All Other Fields\u00b6 By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. For more information, see MongoDB Service Rules Filters\u00b6 Click on the Filters. By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. For more information on filters, see MongoDB Service Filters. 6 Add authentication information in MongoDB Stitch.\u00b6 In the Authentication section in MongoDB Stitch, enable Facebook and Google. Facebook\u00b6 \u27a4 A. Set up an app in Facebook: Log in to your Facebook Developer account. If you do not have a Facebook developer account or even a Facebook account, see Facebook - Register and Configure an App. Add a new Facebook application. Once created, your application view opens to Product Setup. If not, go to your newly added app and click Add Product. In Product Setup, click Get Started for Facebook Login. The screen should display the Quickstart instructions. Choose iOS for your platform. In the Quick Start for iOS: You can skip the Download the Facebook SDK for iOS step and the Add Login Kit to your Xcode Project step as the ToDo iOS app project covers these steps. For the Add your Bundle Identifier step, enter the following and click Save: com.mongo.MongoDBSample Optional. You can enable/disable Single Sign On and continue to the next step. Note the following entry for your project file: FacebookAppID entry to copy into your project\u2019s MongoDBSample/Resources/Info.plist file. <key>FacebookAppID</key> <string>1111111881399056</string> You will use this during the setup step of the ToDo iOS project in this tutorial. You can omit the remaining steps as they are already incorporated into the ToDo iOS project. Click Settings under Facebook Login in the left-hand navigation menu. Under Valid OAuth redirect URIs, add the following entry: https://stitch.mongodb.com/api/client/v1.0/auth/callback Save changes. Click Settings for your application (i.e. not the Settings under Facebook Login). Note the App ID and App Secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. \u27a4 B. Configure Stitch for Facebook Authentication: Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Facebook, click the Edit button. In the Edit Provider dialog, Switch the Facebook to enabled. Enter your new Facebook App ID in the Client ID field and Facebook App Secret in Client Secret field. Click Save. Google\u00b6 \u27a4 A. Set up an app in Google Cloud Platform: For Google authentication, you must create both iOS client credentials and web client credentials. Go to Try Sign-In for iOS. Click Get a Configuration File. For your iOS Bundle ID, enter the following: com.mongo.MongoDBSample and click Choose and configure services. Click Enable Google Sign-In. Click Generate configuration files. Download the given .plist file. You will add the file to your project in a later step. To create the iOS app client credentials, go to https://console.cloud.google.com/. Click API Manager. Click Credentials. Create credentials, and select OAuth client ID. Select iOS for application type. For your Bundle ID, enter the following: com.mongo.MongoDBSample Click Create. Note the client ID and iOS URL scheme. You will use the information in the ToDo Xcode project. To create the Web app client credentials, go to https://console.cloud.google.com/. Click API Manager. Click Credentials. Create credentials, and select OAuth client ID. For Application Type, select Web application. For Name, enter the name you want to associate with this application. For Authorized JavaScript origins, enter the following: https://stitch.mongodb.com For Authorized redirect URIs, enter the following: https://stitch.mongodb.com/api/client/v1.0/auth/callback Click Create. Note the client ID and secret. You will use the information in the Authentication section of the MongoDB Stitch Console. \u27a4 B. Configure Stitch Admin Console for Google Authentication: Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Google, click the Edit button. In the Edit Provider dialog, Switch the Google to enabled. Enter your new Client ID and Client Secret from the google Web App client credentials. Click Save. 7 Download the ToDo iOS application source.\u00b6 Download from the MongoDB Stitch github example repository and unzip. The source code for the ToDo iOS application can be found in todo/ios directory. 8 Open the project in Xcode.\u00b6 Navigate to the downloaded example directory and navigate to the /todo/ios directory. Open the workspace file. 9 Update Xcode project with your MongoDB Stitch App ID.\u00b6 From the MongoDBSample view: Open the MongoDBSample/Resources/Stitch-Info.plist file. Update the APP_ID with your MongoDB Stitch app id and save. In the MongoDB Stitch console, you can find your App ID in the Clients view. 10 Update project with your Facebook App ID.\u00b6 If using Facebook authentication, Open the MongoDBSample/Resources/Info.plist file. Update the FacebookAppID with your facebook_app_id entry. The entry is listed in the step Configure Your info.plist in the Facebook iOS Login Quickstart. Click on the MongoDBSample project (not the folder) in the left hand navigation pane. Under Targets, ensure that MongoDBSample is selected. Click on the Info tab and expand the URL Types. Click on the + to add a new URL. In the URL Schemes, enter the Facebook Login Protocol Scheme: fb<facebook_app_id>. 11 Add Google .plist file.\u00b6 If using Google authentication, Delete the GoogleService-Info.plist highlighted in red. Drag the downloaded GoogleService-Info.plist into the project into the MongODBSample/Resources folder. Leave the default options as is. Click Finish. Open the GoogleService-Info.plist and update the values for the CLIENT_ID and REVERSED_CLIENT_ID with your iOS Client ID and iOS URL scheme. Click on the MongoDBSample project (not the folder) in the left hand navigation pane. Under Targets, ensure that MongoDBSample is selected. Click on the Info tab and expand the URL Types. Click on the + to add a new URL. In the URL schemes, paste in the value for the REVERSED_CLIENT_ID. 12 Review MongoDB Stitch connection logic in application source file.\u00b6 The MongoDBSample/Classes/Controllers/TodoList/TodoListViewController.swift file contains logic that instantiates a stitchClient connection to your MongoDB Stitch app as well as instantiates a MongoClient instance that provides access to the MongoDB service named mongodb-atlas in you MongoDB Stitch app. 1 2 3 4 5 6 7private let stitchClient = StitchClient(appId: Consts.AppId) private var mongoClient: MongoDBClient required init?(coder aDecoder: NSCoder) { mongoClient = MongoDBClient(stitchClient: stitchClient, serviceName: \"mongodb-atlas\") super.init(coder: aDecoder) } 13 Run the todo app.\u00b6 Select the iOS Simulator and run. \u2190 ToDo (Android App) PlateSpace Tutorial (Web App) \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/todo-twilio-web.html",
      "title": "Integrate ToDo with Twilio \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > ToDo (Web App) > Integrate ToDo with Twilio Integrate ToDo with Twilio\u00b6 The following tutorial builds upon the procedure in Getting Started and integrates the ToDo app with Twilio. With this integration, you can send messages to your Twilio number to add items to the ToDo list. Prerequisites\u00b6 For this app, you need the following: ToDo app set up according to ToDo (Web App). Twilio Account. Procedure\u00b6 1 Go to your ToDo app in MongoDB Stitch.\u00b6 Log in to the Atlas. From Stitch Apps, select your ToDo app. 2 Add the todo.users collection to the MongoDB service.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following namespace: Database: todo Collection: users Each document in the todo.users collection has the form: { \"_id\" : <string>, // Corresponds to the user logged into the app. \"phone_number\" : <string>, // Twilio number in E.164 format. \"number_status\" : <string>, // Status of verification: pending,unverified, or verified \"verify_code\" : <string> // Verification code. } 3 Review the rules for todo.users collection.\u00b6 Click on todo.items to view the read rule, the write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Read Rule\u00b6 Modify the read rule at the top-level document to the following: { \"_id\": \"%%user.id\" } The new rule specifies that the fields in a document are readable if the _id field in the document equals the id of the user logged in to the ToDo app. Save. For more information on MongoDB read rules, see MongoDB Service Read Rule. Write Rule\u00b6 Modify the write rule at the top-level document to the following: { \"%or\": [ { \"%%prevRoot._id\": \"%%user.id\" }, { \"%%prevRoot\": { \"%exists\": 0 } } ] } The new rule specifies that the fields in a document are writable if before the write operation, either: The document to be modified by the write operation contains an _id field that equals the id of the user logged in to the ToDo app (%%user.id) The document to be modified by the write operation did not exist; i.e. the write operation results in an insert operation. Save. For more information on MongoDB read rules, see MongoDB Service Write Rule. Validation Rule\u00b6 Delete the owner_id field by hovering over the owner_id field and clicking on the x that appears at the right. Confirm the delete. Add a new field _id: Click Add. Enter _id as the field name and click Add. Click the _id field to view/modify its permissions. Add the following validation rule for the _id field: \"%%user.id\" This rule ensures that the only valid write operations are those that result in the _id field equal to the %%user.id. Save. Add a new field number_status: Click Add. Enter number_status as the field name and click Add. Click the number_status field to view/modify its permissions. Add the following validation rule for the number_status field: { \"%%this\": { \"%in\": [ \"pending\", \"unverified\", \"verified\" ] } } This rule ensures that the only valid write operations are those that result in the number_status field equal to one of the specified strings. Save. Filters\u00b6 Remove the default filter: Click on the Filters. Delete the filter. Save. For more information on validation rules, see MongoDB Service Filters. 4 Add your Twilio phone number as a defined value.\u00b6 Values are named constants that you can access in MongoDB Stitch rules and pipelines. Click Values. Add new variable. Enter ourNumber as its name and your Twilio number (E.164 formatted) as a string, e.g. \"+11112223333\". Click Save. The ToDo app uses this named value to send a message with a confirmation code. 5 Define a named pipeline.\u00b6 Pipelines consist of stages that each defines an action to be performed. Each stage passes its output on as input for the next stage. For this tutorial, define a pipeline that reads from the todo.users collection to determine the user id by the Twilio phone number. Click Pipelines. Click New Pipeline. Enter in the following properties for the pipeline. Name getIdFromPhone Private Make private. If private, the pipeline is inaccessible by a client and is only accessible in other MongoDB Stitch definitions, such as rules, webhooks and other pipelines. Skip Rules Enable Skip Rules. If enabled, rules do not apply to the service actions in the pipeline stages. Can Evaluate {} The condition that determines whether the pipeline can be run. An empty document always evaluates to true, indicating that the pipeline can always be run. Add Parameter Add the following parameter: paramTwilioPhone Mark the parameter as required when invoking this pipeline. When calling the pipeline, this parameter is required as an argument to the pipeline. Note In the pipeline stage, you bind parameters to stage-defined variables to reference them in the stage. See the next step for details. Build the pipeline. This pipeline consists of one stage that queries the todo.users collection by the phone_number field. Edit the first stage: Service Select mongodb-atlas Action Select find In the text box that appears, enter the following: { \"collection\": \"users\", \"database\": \"todo\", \"query\": { \"phone_number\": \"%%vars.phoneNumberToFind\" } } Bind data to %%vars You cannot directly reference the parameter paramTwilioPhone in the stage. Instead, define a variable that references the parameter, and parameter the variable in the stage. { \"phoneNumberToFind\": \"%%args.paramTwilioPhone\" } Click Done. Click Save. 6 Add a Twilio service to your ToDo app.\u00b6 Click Add service. Click Twilio. For the Service Name, enter tw1. Click Add service. 7 Configure tw1 service.\u00b6 In the Config tab, enter your Twilio Account SID and Auth Token. Click Save. 8 Configure tw1 service Incoming Webhooks.\u00b6 Build the pipeline that your Twilio messaging service will invoke when it posts messages to the Incoming Webhook URL. This pipeline consists of two stages. The first stage creates a todo item document that will be inserted into the todo.items collection by the second stage. In the Incoming Webhooks tab, click New Webhook. Note the Incoming Webhook URL. You will use it to set up your Twilio messaging service in a later step. Specify the following for the first stage: Service Select built-in Action Select expr In the textbox that appears, enter: { \"expression\": { \"text\": \"%%vars.text\", \"owner_id\": \"%%vars.ownerId._id\" } } Bind data to %%vars Bind values to the text and ownerId variables used in the expression: { \"text\": \"%%args.Body\", \"ownerId\": { \"%pipeline\": { \"name\": \"getIdFromPhone\", \"args\": { \"paramTwilioPhone\": \"%%args.From\" } } } } text whose value is the Body parameter of the Twilio message . ownerId whose value is determined by invoking the named pipeline getIdFromPhone with the paramTwilioPhone parameter set to the From parameter of the Twilio message. Click Done. Click Add Stage to build the second stage and specify the following for the second stage: Service Select mongodb-atlas Action Select insert In the textbox that appears, enter: { \"collection\": \"items\", \"database\": \"todo\" } Click Done. Click Save. 9 Configure tw1 service rule.\u00b6 Configure up a rule to enable the send action. Click the Rules tab. Click Add Rule. Set up the following rule which allows the service to send a message to any number. Actions When Enable Send. { } Click Save. 10 Create a Messaging Service in Twilio.\u00b6 Log in to Twilio . In the Twilio console, click Programmable SMS under the Messaging products. Create a New Messaging Service. Enter in the name and use case. In the Inbound Settings, enter the Incoming Webhook URL in the the Request URL. Click Save. Select Numbers for your service. Add your Twilio number to this service. Click Add Selected. Click Verified Caller IDs. Click the plus sign and add the phone number that you will use to send messages to Twilio. 11 Run the ToDo application.\u00b6 If you are not running the ToDo application, start. Substitute your App ID in the following command and run from the todo directory: APP_NAME=<App ID> npm start 12 Associate a phone number with your login id.\u00b6 Open a browser to http://localhost:8001/ to access the ToDo app. Sign in with Google or Facebook credentials, depending on which you have set up in the Getting Started tutorial. Click Settings and refresh the browser. In the number box, enter a phone number from which you will send texts to your Twilio number. Important Do not enter the +<country> code; that is, enter just the 10 digits. Press the Return key. Upon successful messaging, a verify code box appears. Enter the verification code sent to the phone number you entered. Press the Return key. Upon verification, messages sent from the phone number to your Twilio number associated wiht your messaging service will show up as items in your todo list. 13 Add todo items via Twilio.\u00b6 Click on the Lists link to return to the ToDo items list page. Send an SMS to your Twilio phone number. Refresh your browser to see your message. \u2190 ToDo (Web App) ToDo (Android App) \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/getting-started/todo-web.html",
      "title": "ToDo (Web App) \u2014 MongoDB Stitch (Beta)",
      "text": "Getting Started > ToDo (Web App) ToDo (Web App)\u00b6 This tutorial demonstrates how to use MongoDB Stitch to integrate the following services for an application: Google/Facebook user authentication services and MongoDB service. To demonstrate, the tutorial incorporates the services into a provided ToDo application. The ToDo application is a web application that maintains a personal todo list. Users can log in using Google or Facebook credentials, add items to the list, check completed items and delete completed items. The ToDo app writes to the following collections in the todo database: items collection, which stores a document per each todo item. users collection, which stores documents that associate the application user and a Twilio phone number. Only needed if continuing with the Integrate ToDo with Twilio tutorial. Prerequisites\u00b6 For this app, you need the following: A MongoDB Atlas cluster using MongoDB version 3.4+. The tutorial uses an Atlas Free Tier cluster. A developer account with either Google or Facebook (or both) for user authentication services. Procedure\u00b6 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. 4 Configure the MongoDB service.\u00b6 Click on the MongoDB service mongodb-atlas. In the Rules tab, add the following collection: Database: todo Collection: items Note You must add rules for each collection the MongoDB service accesses. Each document in the todo.items collection has the form: { \"_id\" : <ObjectID>, \"text\" : <string>, // ToDo item. \"owner_id\" : <string>, // Corresponds to the user logged into the app. \"checked\" : <boolean> // Optional. Only appears if user checks the item in the app. } 5 Review the rules for todo.items collection.\u00b6 Click on todo.items to view the read rule, write rule, the validation rule, and the filter rule. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Similarly, MongoDB Stitch validation rules do not override document validation rules set up separately in MongoDB. Read Rule\u00b6 To view the read rule, click on the R in the Fields Rule view. By default, the collection has the following read rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are readable if the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id, no field in the document is readable. For more information on MongoDB read rules, see MongoDB Service Read Rule. Write Rule\u00b6 To view the write rule, click on the W in the Field Rules view. By default, the collection has the following write rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are writable when after the write operation, the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id after the write operation, no field in the document is writable. Modify the write rule to the following and click Save: { \"%or\": [ { \"%%prevRoot.owner_id\": \"%%user.id\" }, { \"%%prevRoot\": { \"%exists\": 0 } } ] } The new rule specifies that the fields in a document are writable if before the write operation, either: The document to be modified by the write operation contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id) The document to be modified by the write operation did not exist; i.e. the write operation results in an insert operation. For more information on MongoDB write rules, see MongoDB Service Write Rule. Validation Rule\u00b6 To view a validation rule, if any, click on a V in the Field Rules view. By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Modify the validation rule to the following and click Save: \"%%user.id\" The new rule requires owner_id to equal the id of the user logged in to the ToDo app (%%user.id). That is, MongoDB Stitch fails write operations that violate this rule. For more information on validation rules, see MongoDB Service Validation. Allow All Other Fields\u00b6 By default, Allow All Other Fields flag is enabled so that any unlisted fields are readable/writeable as long as the document meets the read/write rules. Alternatively, you can explicitly define all the fields for this collection and disable Allow All Other Fields to control the shape of the documents. For examples, see Integrate ToDo with Twilio. Filters\u00b6 Click on the Filters. By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. For more information on filters, see MongoDB Service Filters. 6 Add authentication information.\u00b6 In the Authentication section in MongoDB Stitch, enable Google or Facebook or both. Facebook\u00b6 \u27a4 A. Set up an app in Facebook: Log in to your Facebook Developer account. If you do not have a Facebook developer account or even a Facebook account, see Facebook - Register and Configure an App. Add a new Facebook application. Once created, your application view opens to Product Setup. If not, go to your newly added app and click Add Product. In Product Setup, click Get Started for Facebook Login. Instead of continuing with the Quickstart, click Settings under Facebook Login in the left-hand navigation menu. Under Valid OAuth redirect URIs, add the following entry: https://stitch.mongodb.com/api/client/v1.0/auth/callback Save changes. Click Settings for your Facebook application (i.e. not the Settings under Facebook Login). Note the App ID and App Secret. You will use the information in the Authentication section of the MongoDB Stitch Admin Console. \u27a4 B. Configure Stitch for Facebook Authentication: Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Facebook, click the Edit button. In the Edit Provider dialog, Switch Facebook to enabled. Enter your new Facebook App ID in the Client ID field and Facebook App Secret in Client Secret field. In the Redirect URIs, add the following: http://localhost:8001/ In the Metadata Fields, select name and email. Click Save. Google\u00b6 \u27a4 A. Set up an app in Google Cloud Platform: Create a new application from Google Cloud Platform and set up new Google OAuth credentials for your application (see Setting up OAuth 2.0 for details). When creating the OAuth client ID: For Application Type, select Web application. For Name, enter the name you want to associate with this application. For Authorized JavaScript origins, enter the following: https://stitch.mongodb.com For Authorized redirect URIs, enter the following: https://stitch.mongodb.com/api/client/v1.0/auth/callback Click Create. Note the client ID and secret. You will use the information in the MongoDB Stitch Admin Console. \u27a4 B. Configure Stitch Admin Console for Google Authentication: Click Authentication in the left side navigation in the MongoDB Stitch console. The Authentication page displays the Authentication Providers information. For Google, click the Edit button. In the Edit Provider dialog, Switch Google to enabled. Enter your new Client ID and Client Secret. In the Redirect URIs, add the following: http://localhost:8001/ In the Metadata Fields, select name and email. Click Save. 7 Download the ToDo application.\u00b6 Download from the MongoDB Stitch github example repository and unzip. The source code for the ToDo application can be found in todo directory. 8 Update index.js with your App Id.\u00b6 In the todo/src/ directory, open index.js in an editor and update the appId variable with your app id. To find your App ID, in MongoDB Stitch console, go to Clients view. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17import React from 'react'; import { render } from 'react-dom'; import { StitchClient } from 'stitch'; import { browserHistory, Route } from 'react-router' import { BrowserRouter, Link } from 'react-router-dom' require(\"../static/todo.scss\") let appId = 'todo-cnkqd'; if (process.env.APP_ID) { appId = process.env.APP_ID; } let options = {}; if (process.env.STITCH_URL) { ... 9 Install application dependencies.\u00b6 Run the following command from the todo directory: npm install 10 Start the application.\u00b6 Substitute your App ID in the following command and run from the todo directory: APP_NAME=<App ID> npm start 11 Open a browser to http://localhost:8001/ to access the ToDo app.\u00b6 Sign in with Google or Facebook credentials, depending on which you have set up in Add authentication information. step. Enter the todo item in the text box to add the item to the list. You can check the boxes to mark the item as complete. If you have marked items as complete, you can click on the clean up button to delete completed items. Next Steps\u00b6 To integrate the ToDo app with Twilio, see Integrate ToDo with Twilio. Integrate ToDo with Twilio Prerequisites Procedure Go to your ToDo app in MongoDB Stitch. Add the todo.users collection to the MongoDB service. Review the rules for todo.users collection. Read Rule Write Rule Validation Rule Filters Add your Twilio phone number as a defined value. Define a named pipeline. Add a Twilio service to your ToDo app. Configure tw1 service. Configure tw1 service Incoming Webhooks. Configure tw1 service rule. Create a Messaging Service in Twilio. Run the ToDo application. Associate a phone number with your login id. Add todo items via Twilio. \u2190 Build Your First Stitch App Integrate ToDo with Twilio \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/expansions.html",
      "title": "Expansions \u2014 MongoDB Stitch (Beta)",
      "text": "Expansions\u00b6 On this page General Stage-Specific MongoDB-Specific The %%user Object Examples Expansions are special variables for use with MongoDB Stitch rules and pipelines. General\u00b6 The following expansions are available in any pipeline stage or rule in any MongoDB Stitch app. Name Type Description %%true\u00b6 boolean True. %%false\u00b6 boolean False. %%user\u00b6 document Holds user information. See %%user object. %%values\u00b6 any Expand a value (e.g. %%values.foo) Stage-Specific\u00b6 For use within a let statement (see the example below). These expansions can be used in any stage except those that do not accept items as input (either single items or lists of items). Lists of items can include literal expressions or the results of MongoDB read operations. Name Type Description %%args\u00b6 document Arguments passed to the current pipeline stage. %%item\u00b6 any Item currently exposed to pipeline stage. %%vars\u00b6 any Contains the results of a let statement, which can be passed as arguments to a pipeline. %%pipelines\u00b6 any Expand a pipeline (e.g. %%piplines.my_pipeline) MongoDB-Specific\u00b6 The following expansions are for use in MongoDB service rules rules. %%this and %%prev represent document fields, while %%root and %%prevRoot represent documents. %%prev and %%prevRoot represent the original values of fields and documents which are changed during a stage which includes write operations. Name Type Description %%this\u00b6 any Field value as it exists at the end of a database operation. %%root\u00b6 document Root document as it exists at the end of a database operation. %%prev\u00b6 any Field value referenced in a rules expression before it is changed by a write operation (insert, update, delete). %%prevRoot\u00b6 document Root document referenced in a rules expression before it is changed by a write operation. The %%user Object\u00b6 The %%user object has several fields with information about the app user. Name Type Description %%user.id\u00b6 String User\u2019s ID. %%user.type\u00b6 String Evaluates to \"server\" if the user request comes via an API key. Evaluates to \"normal\" for other user requests (via OAuth2, SAML, local, or anonymous). %%user.data\u00b6 document User metadata, including name and email (via login authentication). %%user.identities\u00b6 array A list of all identities associated with a MongoDB Stitch user. An identity consists of a unique identifier given to a user by an authorization provider along with the provider\u2019s name. Examples\u00b6 The %%user Object\u00b6 The %%user object is useful for identifying users in database rules. When an app user logs in to an app, the %%user object is populated with the user\u2019s authentication information, which can include name and ID. The following database rule example evaluates to true only if the owner_id field value matches the value of %%user.id and the owner_name field value matches the value of %%user.data.name. { \"owner_id\": \"%%user.id\", \"owner_name\": \"%%user.data.name\" } An app can allow certain actions, such as updating and deleting, to be taken only by a document\u2019s owner. Other users may only have permission to perform other actions, such as reading. The above rule allows the app to distinguish between the owner and other users. MongoDB Validation Rule\u00b6 The following example is a MongoDB validation rule. It evaluates to valid if either: The document already exists The value specified in the name field of the document is not in the name array which is part of the named value myBoards. { \"%or\": [ { \"%%prevRoot\": { \"%exists\": %%true } }, { \"%%root.name\": { \"%nin\": \"%%values.myBoards.name\" } } ] } Pipeline with let\u00b6 The following example illustrates a pipeline which is sourced with an array of documents containing records for a set of people. The service stage defines a Twilio service to send a text message to and from the specified phone numbers. On each iteration of the stage, the message body updates to contain a concatenation of the word hello and the person\u2019s name. Within a let statement, you can access the pipeline arguments through a %%vars expansion. %%vars can only be used within a let statement. When a %%vars expansion is in use, arguments for the stage are processed on each iteration. [ { \"action\": \"literal\", \"args\": { \"items\": [ { \"name\": \"Lara\", \"age\": 48 }, { \"name\": \"Bob\", \"age\": 30 } ] } }, { \"service\": \"tw1\", \"action\": \"send\", \"args\": { \"to\": \"+15557349150\", \"from\": \"%%values.ourNumber\", \"body\": \"%%vars.body\" }, \"let\": { \"body\": { \"%concat\": [ \"hello \", \"%%item.name\" ] } } } ] %%this\u00b6 The %%this object refers to the current document or field. This expansion is typically used to construct field and document-level permissions on a database collection. For example, the following MongoDB service write rule verifies that the value of a field is greater than 3 before allowing a write to the collection. { \"%%this\": { \"%gt\": 3 } } %%item\u00b6 The following example uses a MongoDB collection called users with the following records: { \"_id\" : 1, \"name\" : \"Sam\", \"dob\" : \"October 18\" } { \"_id\" : 2, \"name\" : \"Jennifer\", \"dob\" : \"March 4\" } { \"_id\" : 3, \"name\" : \"Arnold\", \"dob\" : \"July 22\" } In this example, the first pipeline stage receives an argument called todaysDate and performs a find action on a MongoDB collection to find users whose birthday is today. It passes the results to the next stage, which uses a send action with an SES service to email a birthday greeting to each user in the result set. The final pipeline stage is null, indicating that nothing is returned to the application client. The SES pipeline stage uses %%this to iterate over the input records and use the email address associated with each one. { \"action\": \"find\", \"args\": { \"collection\": \"users\", \"database\": \"people\", \"query\": { \"dob\": \"%%vars.todaysDate\" } }, \"let\": { \"todaysDate\": \"%%args.todaysDate\" }, \"service\": \"mdb1\" }, { \"action\": \"send\", \"args\": { \"body\": \"%%vars.body\", \"fromAddress\": \"%%values.ourEmail\", \"subject\": \"Birthday greetings\", \"toAddress\": \"%%vars.toAddress\" }, \"let\": { \"body\": { \"%concat\": [ \"Happy birthday, \", \"%%this.name\", \"!\" ] }, \"toAddress\": \"%%item.email\" }, \"service\": \"ses1\" }, { \"action\": \"null\" } Values Define Values Go to Values. Enter a name for the new value in the New Value Name box. Enter a value in the box below New Value Name. (Optional) Enable Private mode to prevent MongoDB Stitch client applications from accessing the value. Usage Examples Values in MongoDB Rules Values in Pipelines Named Pipelines Overview Procedure Example Prerequisites Define First Stage Define Second Stage Test a Named Pipeline Executing Named Pipelines in Client Code \u2190 Mailgun Service Actions Values \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/namedpipelines.html",
      "title": "Named Pipelines \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Named Pipelines Named Pipelines\u00b6 On this page Overview Procedure Example Executing Named Pipelines in Client Code Overview\u00b6 Named pipelines are pipelines with names that can be referenced elsewhere within a MongoDB Stitch app and by clients of the app. Named pipelines have several capablities. Procedure\u00b6 Use the following procedure to define a named pipeline: Select your MongoDB Stitch app in the console. If you haven\u2019t yet created a MongoDB Stitch app, see Getting Started. Click Pipelines in the left navigation pane. Click New Named Pipeline in the Named Pipelines view. Enter a name for the named pipeline in the Name field. The name must be unique within the MongoDB Stitch app where it is defined. You can specify any of the following pipeline properties: Property Description Private If selected, the pipeline may be called only from incoming webhooks, rules, and other pipelines defined in the MongoDB Stitch Admin console. Private pipelines may not be called from MongoDB Stitch client applications. Skip Rules If selected, the pipeline\u2019s service actions bypass any rules and filters defined for those services. However, you must provide an expression in the Can Evaluate box when this capability is enabled. Can Evaluate An expression in the format of a JSON document that must evaluate to true before the pipeline may run. The expression can include expansions. An empty JSON document always evaluates to true, indicating that the pipeline can always be run. This pipeline-specific expression is evaluated before other service-specific rules. An expression is required when Skip Rules is enabled for the named pipeline. Add Parameter Specify parameters that can be accessed by any stage in the named pipeline with the %%args expansion. Select the REQUIRED checkbox to specify that a parameter is required to execute the pipeline. Build a pipeline stage. Each stage of a pipeline consists of the following: Service Any MongoDB Stitch service defined for the app, as well as the built-in service. Action An action associated with the selected MongoDB Stitch service. Arguments Arguments to pass to the selected service action. Access any variables defined for the stage using the %%vars expansion. Bind data to %%vars (Optional) Defines a variable for each key in the let component. The component is evaluated for each input document. To access parameters passed to the pipeline, you must bind parameters to variables to access them with a %%vars expansion. Click Done to save the pipeline stage. (Optional) To add additional stages to the pipeline, click Add Stage and repeat the steps to create a stage. Select an output type from the list next to the Save button. To return a single document processed by the pipeline, choose Single Document. To return a boolean value indicating whether the pipeline returned any output, choose Boolean. To return all documents processed by the pipeline, choose Array. Click Save. Example\u00b6 The sendSMS named pipeline consists of two stages. The first stage retrieves the phone_number field from every document in the todo.users collection in a MongoDB database. The second stage sends a Twilio SMS to each number with the same body text and from the same number. Prerequisites\u00b6 The sendSMS named pipeline assumes you have configured the following services for your MongoDB Stitch app: A MongoDB service named mongodb-atlas A Twilio service named tw1 You must create a namespace for the todo.items collection in your MongoDB service. At least one of the documents in this collection must contain the following: a phone_number field containing a valid Twilio number an owner_id field containing the the user id of the user who inserted the document into the collection {\"owner_id\":\"593ac52657e0fa71da4d666d\",\"name\":\"Anita Jones\",\"phone_number\":\"+14159509312\"} Define First Stage\u00b6 The first stage in the named pipeline performs a find action on the mongodb-atlas service. The arguments for the service use the $exists operator to verify that only documents with a phone_number field are retrieved and passed to the next stage. Define Second Stage\u00b6 The second stage of the pipeline performs a send action on the tw1 Twilio service. The stage includes a let component that creates the following variables: to: Assigns the value of the phone_number document field of each output document from the previous stage to the to argument of the current stage. Argments to the current stage access this variable with the %%vars.to expansion. from: Assigns +14159509312 to the from argument of the current stage. Arguments to the current stage access this variable with the %%vars.from expansion. body: Assigns a concatentation of the name field from each output document from the prior stage and \", please confirm your attendance.\" to the body argument of the current stage. The arguments to the current stage access this variable with the %%vars.body expansion. Test a Named Pipeline\u00b6 Use the following procedure to test a named pipeline: Click Debug Console in the left navigation pane. Click choose user to choose a user to execute the pipeline. Click +Add Stage. Verify that built-in is selected from the SERVICE list and literal is selected from the ACTION list. Enable Bind data to %%vars. Enter the following let component in the box below Bind data to %%vars to create a variable named output: { \"output\": { \"%pipeline\": { \"name\": \"sendSMS\" } } } Note You can choose any key, or name, for your %pipeline block. This example uses output. Enter the following JSON document in the box above Bind data to %%vars to create a variable named output and associate it with the vars expansion: { \"items\": [ \"%%vars.output\" ] } Click Done. Click Execute. An SMS message is sent to each document displayed in the Result box. Executing Named Pipelines in Client Code\u00b6 The StitchClient provides a executeNamedPipeline() function to execute named pipeline from your application code. For example: copyable-code import { StitchClient } from 'stitch'; const stitchClient = new StitchClient('<your-app-id>'); stitchClient.executeNamedPipeline('<name>', <args document>); Replace <your-app-id> with your MongoDB Stitch app ID. In the MongoDB Stitch console, you can find your App ID in the Clients view. Replace <name> with the name of your pipeline. If specifying arguments, replace <args document> with the parameters for your named pipeline. Omit <args document> if you are not specifying arguments. \u2190 Built-In Actions MongoDB Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/values.html",
      "title": "Values \u2014 MongoDB Stitch (Beta)",
      "text": "Expansions > Values Values\u00b6 Values are named constants that you can use in MongoDB Stitch rules and pipelines. To access a value in rules or pipelines, use the %%values expansion. Define Values\u00b6 In the MongoDB Stitch console, 1 Go to Values.\u00b6 Under the Control section in the left-hand navigation bar, click Values. 2 Enter a name for the new value in the New Value Name box.\u00b6 3 Enter a value in the box below New Value Name.\u00b6 The value must be a string, an array, or a valid JSON document. The following are all examples of valid values: Name Value publicStatus \"Public\" adminUsers [\"589a86bcfc57bd5c25c51de8\", \"629a82befc57bd5c20a51ed7\"] contactDetail { \"email\": \"foobar@example.com\", \"phone\": \"+1-111-111-1111\" } 4 (Optional) Enable Private mode to prevent MongoDB Stitch client applications from accessing the value.\u00b6 Private values may be accessed only by incoming webhooks, rules, and named pipelines. Usage Examples\u00b6 To access a value in rule or pipeline expressions, use the %%values expansion. The examples use the values defined in the Define Values section. Values in MongoDB Rules\u00b6 For example, you might specify a MongoDB service write rule where a field is writable if the authenticated user is one of the users defined in the value adminUsers: { \"%%user.idHex\": { \"%in\": \"%%values.adminUsers\" } } Values in Pipelines\u00b6 For example, you might include a value contactDetail in the Arguments of a pipeline stage: { \"subject\": \"Happy Birthday\", \"fromAddress\": \"%%values.contactDetail.email\" } \u2190 Expansions Authentication \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/builtin.html",
      "title": "Built-In Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Built-In Actions Built-In Actions\u00b6 Built-in service actions are not associated with a specific service. MongoDB Stitch provides the various built-in service actions for use in pipelines. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. match\u00b6 Filters its input documents and outputs only those documents that match its query filter condition. The match action cannot be in the first stage of a pipeline. The stage preceding the match action stage must output documents; for example, a built-in action literal stage. The match action stage has the following syntax: { \"service\": \"\", \"action\": \"match\", \"args\": { \"expression\": <query filter document> } } The match action has the following argument: Argument Type Description expression document Query filter against which to compare each incoming document. Specify the filter as a JSON document. Filter expression can include MongoDB query expressions as well as variables (%%vars) defined in the stage. For example, consider the following pipeline of two stages: [ {\"service\": \"\", \"action\": \"literal\", \"args\": {\"items\": [{\"x\": 5, \"y\": 10}, {\"x\": 10, \"y\": 10}]}}, {\"service\": \"\", \"action\": \"match\", \"args\": {\"expression\": {\"x\": {\"%gt\": 5}}}} ] Stage1: The literal stage outputs the following documents: {\"x\": 5, \"y\": 10} {\"x\": 10, \"y\": 10} The two documents are input to Stage 2. Stage2: The match stage applies the filter to the input documents and outputs only the document that matches the condition: {x: 10, y: 10} literal\u00b6 Explicitly defines the documents to output from the stage. You can only use the literal action in the first stage of a pipeline. The literal action stage has the following syntax: { \"service\": \"\", \"action\": \"literal\", \"args\": {\"items\": [ <document1>, ... ]} } The literal action has the following argument: Argument Type Description items array of documents Documents to output. Documents can reference variables (%%vars) defined in the stage. For example, consider the following pipeline of one stage: [ {\"service\": \"\", \"action\": \"literal\", \"args\": {\"items\": [{\"x\": 5, \"y\": 10}, {\"x\": 10, \"y\": 10}]}} ] Stage1: The literal stage outputs the following documents: {\"x\": 5, \"y\": 10} {\"x\": 10, \"y\": 10} expr\u00b6 Evaluates an expression against each input document and outputs the evaluated documents. The $concat and the $match operators are available for use in the expression. The expr action stage has the following syntax: { \"service\": \"\", \"action\": \"expr\", \"args\": {\"expression\": <document> } } The expr action takes the following arguments: Argument Type Description expression document An expression to evaluate. $concat and the $match operators are available for use in the expression. For example, consider the following pipeline: [ {\"service\":\"\",\"action\":\"literal\",\"args\":{\"items\":[{\"adjective\":\"brown\",\"noun\":\"cow\"},{\"adjective\":\"red\",\"noun\":\"hen\"}]}}, {\"service\":\"\",\"action\":\"expr\",\"args\":{\"expression\":{\"y\":{\"%concat\":[\"%%vars.adj\",\" \",\"%%vars.noun\"]}}},\"let\":{\"adj\":\"%%item.adjective\",\"noun\":\"%%item.noun\"}} ] Stage1: The literal stage outputs the following documents: {\"adjective\":\"brown\",\"noun\":\"cow\"} {\"adjective\":\"red\",\"noun\":\"hen\"} Stage2: For each input document, the expr stage binds the input document field adjective to a variable adj and the input document field noun to the variable noun as indicated by: \"let\":{\"adj\":\"%%item.adjective\",\"noun\":\"%%item.noun\"} then, evaluates the expression: {\"y\":{\"%concat\":[\"%%vars.adj\",\" \",\"%%vars.noun\"]}} to output the following documents: { \"y\": \"brown cow\" }, { \"y\": \"red hen\" } See example below. project\u00b6 Determines which fields to include or exclude in the output documents. The project action cannot be in the first stage of a pipeline. The stage preceding the project action stage must output documents; for example, a built-in action literal stage. The project action stage has the following syntax: {\"service\": \"\", \"action\": \"project\", \"args\": {\"projection\": <document> } } The project action has the following argument: Argument Type Description projection document A document that specifies field inclusions or field exclusions: To specify the fields to include in the output document, list the fields in the projection document with a value 1 or true: { <field1>: 1, <field2>: 1, ... } To specify the fields to exclude in the output document, list the fields in the projection document with a value 0 or false: { <field1>: 0, <field2>: 0, ... } A projection document cannot specify both field inclusions and field exclusions. For example, consider the following pipeline of two stages: [ {\"service\": \"\", \"action\": \"literal\", \"args\": {\"items\": [{\"x\": 5, \"y\": 10}, {\"x\": 10, \"y\": 10}]}}, {\"service\": \"\", \"action\": \"project\", \"args\": {\"projection\": { \"x\": 1 }}} ] Stage1: The literal stage outputs the following documents: {\"x\": 5, \"y\": 10} {\"x\": 10, \"y\": 10} The two documents are input to Stage 2. Stage2: The projection stage outputs the document with only the x field in the documents: {\"x\": 5} {\"x\": 10} null\u00b6 Does nothing and outputs nothing. A null action stage may be useful as a final stage for pipelines that do not need to return anything to the client. The null action stage ignores input to its stage as well its own arguments, if specified. The null action stage has the following syntax: {\"service\": \"\", \"action\": \"null\", \"args\": {} } binary\u00b6 Decodes base64 or hexadecimal encoded data and outputs as binary data stream. You can only use the binary action in the first stage of a pipeline. The binary action stage has the following syntax: {\"service\": \"\", \"action\": \"binary\", args: {\"encoding\": <\"hex\"|\"base64\">, data: <encoded string>} } The binary action has the following arguments: Argument Type Description encoding string Encoding format of data argument. Specify either: \"hex\" \"base64\" data string Encoded data string to decode and pass on as binary data. For example, consider the following pipeline of two stages: [ {\"service\": \"\", \"action\": \"binary\", \"args\": {\"encoding\": \"base64\", \"data\": \"VGhlIGNvdyBpcyBicm93bi4=\"}}, {\"service\": \"\", \"action\": \"reader\", \"args\": {}} ] Stage1: The binary stage outputs a decoded output stream of binary data. Stage2: The reader stage reads the input stream and outputs the following string: \"The cow is brown.\" See also Amazon S3 JavaScript Tutorial Amazon S3 Android Tutorial encode\u00b6 Encodes incoming binary data into specified format and outputs a document with the field data which holds the encoded string. The encode action cannot be in the first stage of a pipeline. The stage preceding the encode action stage must output a stream of binary data. The encode action stage has the following syntax: {\"service\": \"\", \"action\": \"encode\", \"args\": {\"encoding\": <\"hex\"|\"base64\">}} The encode action has the following arguments: Argument Type Description encoding string Encoding format for outgoing data. Specify either: \"hex\" \"base64\" For example, consider the following pipeline of two stages: [ {\"service\": \"\", \"action\": \"binary\", \"args\": {\"encoding\": \"base64\", \"data\": \"VGhlIGNvdyBpcyBicm93bi4=\"}}, {\"service\": \"\", \"action\": \"encode\", \"args\": {\"encoding\": \"hex\"}} ] Stage1: The binary stage outputs a decoded output stream of binary data. Stage2: The encode stage reads the input stream and encodes into binary data and outputs the following document: { \"data\": \"54686520636f772069732062726f776e2e\" } reader\u00b6 Reads a binary input stream and outputs a string. The reader action cannot be in the first stage of a pipeline. The stage preceding the encode action stage must output a stream of binary data. The reader action stage has the following syntax: {\"service\": \"\", \"action\": \"reader\", \"args\": {}} The reader action has no argument. For example, consider the following pipeline of two stages: [ {service: \"\", action: \"binary\", args: {encoding: \"base64\", data: \"VGhlIGNvdyBpcyBicm93bi4=\"}}, {service: \"\", action: \"reader\", args: {}} ] Stage1: The binary stage outputs a decoded output stream of binary data. Stage2: The reader stage reads the input stream and outputs the following string: \"The cow is brown.\" Examples\u00b6 The following pipeline contains three stages which use built-in service actions. The first stage uses the literal action to pass data to the second stage. The second stage uses the match action to find documents in which the qty field is greater than 30. The third stage creates a projection in which the unit price field is excluded from the stage output. [ { \"action\": \"literal\", \"args\": { \"items\": [ { \"type\": \"apples\", \"qty\": 25, \"unit price\": 0.35 }, { \"type\": \"oranges\", \"qty\": 50, \"unit price\": 0.65 } ] } }, { \"action\": \"match\", \"args\": { \"expression\": { \"qty\": { \"%gt\": 30 } } } }, { \"action\": \"project\", \"args\": { \"projection\": { \"unit price\": 0 } } } ] The above pipeline operation produces the following output: [ { \"type\": \"oranges\", \"qty\": \"50\" } ] The following pipeline example has two stages. The first passes two documents to the second stage, in which the built-in expr action concatenates two strings to form a greeting, and uses a let statement to access the current iteration of the items array. [ { \"action\": \"literal\", \"args\": { \"items\": [ { \"first_name\": \"Fred\", \"last_name\": \"Perry\", \"department\": \"sales\" }, { \"first_name\": \"Mia\", \"last_name\": \"Perez\", \"department\": \"sales\" } ] } }, { \"action\": \"expr\", \"let\": { \"name\": \"%%item.first_name\" }, \"args\": { \"expression\": { \"greeting\": { \"%concat\": [ \"Hello, \", \"%%vars.name\" ] } } } } ] The above pipeline stage produces the following output: [ { \"greeting\": \"Hello, Fred\" }, { \"greeting\": \"Hello, Mia\" } ] Binary Action Examples\u00b6 One use case for a MongoDB Stitch application could be to allow users to upload binary data to an Amazon S3 bucket. You can accomplish this in a pipeline which uses the S3 service and the built-in binary action. The following example takes a hex-encoded string and decodes it to binary. The binary data passes to the next stage, which uses a put action to upload it to an S3 bucket. [ { \"action\": \"binary\", \"args\": { \"data\": \"68656c6c6f\", \"encoding\": \"hex\" } }, { \"service\": \"my-s3-service\", \"action\": \"put\", \"args\": { \"contentType\": \"text/plain\", \"acl\": \"public-read\", \"bucket\": \"my-bucket-name\", \"key\": \"test-object\" } } ] The document returned to the client has the following form: { \"location\": \"https://my-bucket-name.s3-us-west-2.amazonaws.com/test-object\" } Note In the above example, the key argument to the S3 service represents the path to the object in the S3 bucket, relative to server root. It must not begin with /. \u2190 Pipelines Named Pipelines \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/http.html",
      "title": "HTTP Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > HTTP Service Actions HTTP Service Actions\u00b6 On this page Alternative URL Arguments Include multipart/form-data Content in a Request HTTP service actions are available via the HTTP service. For an HTTP Service, you must specify rules to enable HTTP action or actions. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. Note If the HTTP response has a JSON body (Content-Type: application/json), the output of the stage is the parsed JSON body, which can be treated as a document in downstream stages. get\u00b6 Corresponds to HTTP method GET. Argument Type Required url string The URL string for the HTTP request. (see alternative URL args) authUrl string Optional. The auth URL (i.e. URL that grants a cookie) for the HTTP request. body string Optional. Corresponds to the body of the HTTP request. (see multipart/form-data alternative) headers array of strings Optional. Corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. cookies string Optional. Cookie name and value pairs. followRedirects boolean Optional. Determines whether or not to follow redirects. post-http\u00b6 Corresponds to HTTP method POST. Argument Type Required url string The URL string for the HTTP request. (see alternative URL args) authUrl string Optional. The auth URL (i.e. URL that grants a cookie) for the HTTP request. body string Optional. Corresponds to the body of the HTTP request. (see multipart/form-data alternative) headers array of strings Optional. Corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. cookies string Optional. Cookie name and value pairs. followRedirects boolean Optional. Determines whether or not to follow redirects. put\u00b6 Corresponds to HTTP method PUT. Argument Type Required url string The URL string for the HTTP request. (see alternative URL args) authUrl string Optional. The auth URL (i.e. URL that grants a cookie) for the HTTP request. body string Optional. Corresponds to the body of the HTTP request. (see multipart/form-data alternative) headers array of strings Optional. Corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. cookies string Optional. Cookie name and value pairs. followRedirects boolean Optional. Determines whether or not to follow redirects. http-delete\u00b6 delete Corresponds to HTTP method DELETE. Argument Type Required url string The URL string for the HTTP request. (see alternative URL args) authUrl string Optional. The auth URL (i.e. URL that grants a cookie) for the HTTP request. body string Optional. Corresponds to the body of the HTTP request. (see multipart/form-data alternative) headers array of strings Optional. Corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. cookies string Optional. Cookie name and value pairs. followRedirects boolean Optional. Determines whether or not to follow redirects. head\u00b6 Corresponds to HTTP method HEAD. Argument Type Required url string The URL string for the HTTP request. (see alternative URL args) authUrl string Optional. The auth URL (i.e. URL that grants a cookie) for the HTTP request. body string Optional. Corresponds to the body of the HTTP request. (see multipart/form-data alternative) headers array of strings Optional. Corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. cookies string Optional. Cookie name and value pairs. followRedirects boolean Optional. Determines whether or not to follow redirects. patch\u00b6 Corresponds to HTTP method PATCH. Argument Type Required url string The URL string for the HTTP request. (see alternative URL args) authUrl string Optional. The auth URL (i.e. URL that grants a cookie) for the HTTP request. body string Optional. Corresponds to the body of the HTTP request. (see multipart/form-data alternative) headers array of strings Optional. Corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. cookies string Optional. Cookie name and value pairs. followRedirects boolean Optional. Determines whether or not to follow redirects. Alternative URL Arguments\u00b6 Instead of providing the URL as a single string, you can specify each individual component of the url string. Note The following HTTP action arguments and the url argument are mutually exclusive. Use one or the other, but not both. If you use the following arguments instead of the url argument, the scheme and host fields are required and the rest are optional. Name Contents scheme Defaults to https. Permissible values are https and http. host The hostname for the request. In the URL https://docs.mongodb.com/manual/, the hostname is docs.mongodb.com. path The path portion of the URL. In https://docs.mongodb.com/manual/, the path portion is /manual. query Document containing keys and values which map to the URL\u2019s query string. Each key must be a string and each value must be an array of strings, even if the array contains only one element. For example, the document { \"x\": [\"hello\"], \"y\": [\"world\"] } is appended to the outgoing request as ?x=hello&y=world. If an array contains more than one element, all the elements are included with the same key: the document { \"cars\": [\"Porsche\", \"Audi\"], \"bikes\": [\"Trek\", \"Marin\"] } is appended to the outgoing request as ?cars=Porsche&cars=Audi&bikes=Trek&bikes=Marin. fragment The portion of the URL which comes after the anchor (#). username In conjunction with the password argument, allows the action to access the given URL with basic authentication. password See username. Include multipart/form-data Content in a Request\u00b6 If you need to include content of type multipart/form-data with your HTTP request, use the form argument instead of a body argument. The form argument takes a document in which each key is a form field, and the request is submitted with a content-type of multipart/form-data. The following is an example of a form argument with multiple fields: \"form\" : { \"to-address\" : \"name@example.com\", \"from-address\" : \"other-name@example.com\", \"subject\" : \"test subject\", \"message-body\" : \"test message body\" } See also Pipelines \u2190 Twilio Service Actions Slack Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/mailgun.html",
      "title": "Mailgun Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Mailgun Service Actions Mailgun Service Actions\u00b6 The following actions are available for the Mailgun service. Important To perform a Mailgun service action, you must have rules set up for the action. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. send-mailgun\u00b6 send Sends an email message to a specified address. The send-mailgun action stage has the following syntax: { \"service\": <mailgun-servicename>, \"action\": \"send\", \"args\": { \"from\": <string>, \"to\": <array-of-strings>, \"subject\": <string>, \"text\": <string> } } The send action takes the following arguments: Argument Type Description from string The sender\u2019s email address. to string The recipient\u2019s email address. subject string The subject of the email. text string The body of the message. The following is a pipeline consisting of a send stage: [ { \"service\": \"my-mailgun-service\", \"action\": \"send\", \"args\": { \"text\": \"Mailgun test message body\", \"to\": \"email@example.com\", \"from\": \"other-address@example.com\", \"subject\": \"Test subject\" } } ] \u2190 Slack Service Actions Expansions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/mongodb.html",
      "title": "MongoDB Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > MongoDB Service Actions MongoDB Service Actions\u00b6 The following actions are available for the MongoDB service. Important In order to use MongoDB service actions, you must have rules set up for each namespace included in the operation. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. find\u00b6 Queries a collection in MongoDB and outputs an array of documents that match the specified query condition. You can only use the find action in the first stage of a pipeline. The find action stage has the following syntax: { \"service\": \"mongodb-atlas\", \"action\": \"find\", \"args\": { \"database\": <dbname>, \"collection\": <collection name>, \"query\": <filter document>, \"project\": <projection document>, \"limit\": <number> } } The find action has the following argument: Argument Type Description database string Name of the database. collection string Name of the collection. query document Query filter to apply for the find operation. Specify the filter as a JSON document. Filter expression can include MongoDB query expressions as well as variables (%%vars) defined in the stage. project document Optional. Projection document that determines the fields in the output documents. limit integer Optional. Maximum number of documents to output. For example, consider the following pipeline of a single stage: [ { \"service\": \"mongodb-atlas\", \"action\": \"find\", \"args\": {\"database\": \"my_db\", \"collection\": \"reports\", \"query\": {\"views\": {\"$gt\": 75}}, \"project\": {}, \"limit\": 5} } ] Stage1: The MongoDB service find stage runs the query {\"views\": {\"$gt\": 75}} against the specified collection my_db.collection and outputs, at most, 5 documents that meet the query filter. insert\u00b6 Inserts the stage\u2019s input documents into the specified MongoDB collection. The insert action cannot be in the first stage of a pipeline. The stage preceding the insert action stage must output documents; for example, a MongoDB service action find stage or a built-in action literal stage. The insert action stage has the following syntax: { \"service\": \"mongodb-atlas\", \"action\": \"insert\", \"args\": { \"database\": <dbname>, \"collection\": <collection name> } } The insert action takes the following arguments: Argument Type Description database string Name of the database. collection string Name of the collection. For example, consider the following pipeline of two stages: The first stage uses the built-in literal action to pass an array of documents to a second pipeline stage. The second stage uses the insert action to add the documents to a MongoDB collection called orders in the my_db database. [ { \"service\":\"\",\"action\":\"literal\", \"args\":{ \"items\":[ {\"customer\":\"A\",\"item\": \"oranges\",\"qty\":10}, {\"customer\":\"B\",\"item\":\"grapes\", \"qty\": 50}, {\"customer\":\"A\",\"item\": \"oranges\",\"qty\":10}, {\"customer\":\"B\",\"item\":\"apples\", \"qty\": 10} ] } }, { \"service\":\"mongodb-atlas\",\"action\":\"insert\",\"args\":{\"database\":\"my_db\",\"collection\":\"orders\"} } ] Stage1: The literal stage outputs the following documents: {\"customer\":\"A\",\"item\": \"oranges\",\"qty\":10} {\"customer\":\"B\",\"item\":\"grapes\", \"qty\": 50} {\"customer\":\"A\",\"item\": \"oranges\",\"qty\":10} {\"customer\":\"B\",\"item\":\"apples\", \"qty\": 10} The documents are input to Stage 2. Stage2: The MongoDB insert stage inserts the documents into the specified collection my_db.orders. update\u00b6 Modifies one or more documents in a MongoDB collection. You can only use the update action in the first stage of a pipeline. The update action stage has the following syntax: { \"service\": \"mongodb-atlas\", \"action\": \"find\", \"args\": { \"database\": <dbname>, \"collection\": <collection name>, \"query\": <filter document>, \"update\": <update document>, \"upsert\": <boolean>, \"multi\": <boolean> } } The update action takes the following arguments: Argument Type Description database string Name of the database. collection string Name of the collection. query document Query filter to apply for the update operation. Specify the filter as a JSON document. Filter expression can include MongoDB query expressions as well as variables (%%vars) defined in the stage. update document Specifications for the modifications to make. To update a document, MongoDB provides update operators, such as $set, to modify field values. upsert boolean Optional. If set to true, creates a new document when no document matches the query criteria. The default value is false, which does not insert a new document when no match is found. multi boolean Optional. If set to true, updates multiple documents that meet the query criteria. If set to false, limits the update to a single document. The default value is false. aggregate\u00b6 Executes a MongoDB aggregation pipeline on a collection and returns the results. You can only use the aggregate action in the first stage of a pipeline. The aggregate action stage has the following syntax: { \"service\":\"mongodb-atlas\", \"action\":\"aggregate\", \"args\":{ \"database\": <dbname>, \"collection\": <collection name>, \"pipeline\":[<aggregation stage1>, ...] } } The aggregate action takes the following arguments: Argument Type Description database string Name of the database. collection string Name of the collection. pipeline array The aggregation pipeline stages. For example, consider the following pipeline that performs an aggregation pipeline on the specified collection: [{ \"service\":\"mongodb-atlas\", \"action\":\"aggregate\", \"args\":{ \"database\":\"my_db\", \"collection\":\"orders\", \"pipeline\":[ {\"$group\":{\"_id\":{\"cust_id\":\"$customer\",\"item\":\"$item\"},\"total\":{\"$sum\":\"$qty\"}}}, {\"$out\":\"reports\"} ] } }] Stage1: The MongoDB aggregate stage first groups the documents by the customer and item fields and then writes the grouped documents into the my_db.reports collection. delete\u00b6 Deletes one or more documents from a MongoDB collection. You can only use the delete action in the first stage of a pipeline. The delete action stage has the following syntax: { \"service\":\"mongodb-atlas\", \"action\":\"delete\", \"args\":{ \"database\": <dbname>, \"collection\": <collection name>, \"pipeline\":[<aggregation stage1>, ...] } } The aggregate action takes the following arguments: Argument Type Description database string Name of the database. collection string Name of the collection. query document Query filter to apply for the delete operation. Specify the filter as a JSON document. Filter expression can include MongoDB query expressions as well as variables (%%vars) defined in the stage. singleDoc boolean Optional. If set to true, limits the delete to a single document. If set to false,delete all documents that match the query. The default value is false. For example, consider the following pipeline that performs a delete operation on the specified collection: [ {\"service\": \"mongodb-atlas\", \"action\": \"delete\",\"args\":{\"database\": \"my_db\", \"collection\": \"reports\", \"singleDoc\": false, \"query\": {\"cust_id\": \"A\"}}}] Stage1: The MongoDB delete stage deletes all documents that match the query filter {\"cust_id\": \"A\"} from the my_db.reports collection. See also Pipelines examples. \u2190 Named Pipelines Amazon SES Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/s3.html",
      "title": "Amazon S3 Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Amazon S3 Service Actions Amazon S3 Service Actions\u00b6 The following actions are available for the Amazaon S3 (S3) service. Important To perform an S3 service action, you must have rules set up for the action. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. s3-put\u00b6 put Uploads binary data to S3 bucket. The put action cannot be in the first stage of a pipeline. The stage preceding the S3 put action stage must output a binary data; for example, a built-in action binary stage. The put action stage has the following syntax: { \"service\": <s3-servicename>, \"action\": \"put\", \"args\": { \"contentType\": <string>, \"acl\": <string>, \"bucket\": <string>, \"key\": <string> } } The put action takes the following arguments: Argument Type Description bucket string The S3 bucket name. key string The unique identifier for the uploaded object. acl string Access control list. Valid values are: private public-read public-read-write aws-exec-read authenticated-read bucket-owner-read bucket-owner-full-control See Amazon\u2019s documentation for more information. contentType string Data format, e.g. text/plain For example, consider the following pipeline of two stages: [ { \"service\": \"\", \"action\": \"binary\", \"args\": { \"data\": \"68656c6c6f\", \"encoding\": \"hex\" } }, { \"service\": \"my-s3-service\", \"action\": \"put\", \"args\": { \"contentType\": \"text/plain\", \"acl\": \"public-read\", \"bucket\": \"my-s3-bucket\", \"key\": \"myFile.txt\" } } ] Stage1: The built-in binary stage converts the hex-encoded data into binary and outputs the binary data to the put stage. Stage2: The s3 put stage uploads the data to myFile.txt in the s3 bucket named my-s3-service. signPolicy\u00b6 Generates a document containing the fields policy, signature, and the accessKeyId, which you can use to issue a POST request directly to S3. You can only use the signPolicy action in the first stage of a pipeline. The signPolicy action stage has the following syntax: { \"service\": <s3-servicename>, \"action\": \"signPolicy\", \"args\": { \"contentType\": <string>, \"acl\": <string>, \"bucket\": <string>, \"key\": <string> } } The signPolicy action takes the following arguments: Argument Type Description bucket string The S3 bucket name. key string The unique identifier for the uploaded object. acl string Access control list. Valid values are: private public-read public-read-write aws-exec-read authenticated-read bucket-owner-read bucket-owner-full-control See Amazon\u2019s documentation for more information. contentType string Data format, e.g. text/plain For example, consider the following pipeline: [ {\"service\":\"my-s3-service\",\"action\":\"signPolicy\",\"args\":{\"contentType\":\"text/plain\",\"acl\":\"public-read\",\"bucket\":\"my-s3-bucket\",\"key\":\"myFile.txt\"}} ] Stage1: The S3 signPolicy stage converts the outputs a document: { \"policy\": \"policy11111111111=+\", \"signature\": \"mysignatureABC====\", \"accessKeyId\": \"MYS3ACCESSKEY\" } \u2190 Amazon SES Service Actions Twilio Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/ses.html",
      "title": "Amazon SES Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Amazon SES Service Actions Amazon SES Service Actions\u00b6 The following actions are available for the SES service. Important To perform an SES service action, you must have rules set up for the action. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. send\u00b6 Sends an email message to a specified address. The send action stage has the following syntax: { \"service\": <ses-servicename>, \"action\": \"send\", \"args\": { \"fromAddress\": <string>, \"toAddress\": <string>, \"subject\": <string>, \"body\": <string> } } The send action takes the following arguments: Argument Type Description fromAddress string The sender\u2019s email address. toAddress string The recipient\u2019s email address. subject string The subject of the email. body string The body of the message. The following is a pipeline consisting of a send stage: [ { \"service\": \"my-ses-service\", \"action\": \"send\", \"args\": { \"body\": \"ses test message body\", \"toAddress\": \"email@example.com\", \"fromAddress\": \"other-address@example.com\", \"subject\": \"ses test subject\" } } ] \u2190 MongoDB Service Actions Amazon S3 Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/slack.html",
      "title": "Slack Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Slack Service Actions Slack Service Actions\u00b6 The following actions are available for the Stitch Slack service. Important To perform a Slack service action, you must have rules set up for the action. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. slack-post\u00b6 post Sends an Slack message to a specified channel under the specified username. The post action stage has the following syntax: { \"service\": <slack-servicename>, \"action\": \"post\", \"args\": { \"channel\": <string>, \"username\": <string>, \"text\": <string>, \"iconUrl\": <string>, \"iconEmoji\": <string>, \"attachments\": <array-of-strings> } } The post action takes the following arguments: Argument Type Description channel string Name of the Slack channel to which the message is sent. username string The username the message posts under. text string The message body. iconUrl string URL pointing to an icon of the user. iconEmoji string String representation of an emoji. attachments array List of attachments for the message. The following is a pipeline consisting of a post stage: [ { \"service\": \"my-slack-service\", \"action\": \"post\", \"args\": { \"channel\": \"general\", \"username\": \"fred\", \"text\": \"slack message test\" } } ] \u2190 HTTP Service Actions Mailgun Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/reference/pipelines/twilio.html",
      "title": "Twilio Service Actions \u2014 MongoDB Stitch (Beta)",
      "text": "Pipelines > Twilio Service Actions Twilio Service Actions\u00b6 The following actions are available for the Twilio service. Tip In the stages, the action arguments can make use of variables (%%vars) defined for the stage as well as defined constants and expansions. send-twilio\u00b6 send Sends a text message to a specified phone number. The send action stage has the following syntax: { \"service\": <ses-servicename>, \"action\": \"send\", \"args\": { \"fromAddress\": <string>, \"toAddress\": <string>, \"subject\": <string>, \"body\": <string> } } The send action takes the following arguments: Argument Type Description from string The sender\u2019s phone number in E. 164 format. to string The recipient\u2019s phone number in E. 164 format. body string The message to send. The following is a pipeline consisting of a send stage: [ { \"service\": \"my-twilio-service\", \"action\": \"send\", \"args\": { \"to\": \"+15559727644\", \"from\": \"+15559848272\", \"body\": \"hello from twilio!\" } } ] See also Pipelines examples. \u2190 Amazon S3 Service Actions HTTP Service Actions \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/gcm.html",
      "title": "GCM Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > GCM Service Rules GCM Service Rules\u00b6 On this page Specify a Rule GCM Service Arguments Example For Push Notification service, you can optionally specify rules to enable its actions. If a rule is specified, the rule must evaluate to true for the action to be enabled. If a rule is not specified, the action is by default enabled. Specify a Rule\u00b6 Select the action(s) for which the rule applies. Specify the rule in valid JSON that evaluates to a boolean. You can specify MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions.: { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } GCM Service Arguments\u00b6 Field Type Description userIds Array of strings. The user ids of the message recipients. to String The send-to topic. The recipients are the users who have opted into the topic. registrationTokens Array of strings. The list of registration tokens for the devices receiving the multicast message. priority string The priority of the notification. Value is either \"high\" or \"normal\". Corresponds to the priority option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. collapseKey string The collapse key associated with collapsible messages. Corresponds to the collapse_key option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. contentAvailable boolean A flag that determines whether to awake idle client apps upon receipt of the message. Corresponds to the content_available option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. mutableContent boolean A flag that determines whether the notification content can be modified before being displayed to the user. Corresponds to the mutable_content option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. timeToLive int Maximum time (in milliseconds) to retain the message if the device is offline. Valid value range from 0 to 2419200. Corresponds to the time_to_live option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. data JSON document Payload for data message. data document consists of custom key-value pairs. Corresponds to the data option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. notification JSON document Payload for notification. notification document consists of predefined fields. Corresponds to the notification option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. Notification Fields\u00b6 The following table lists the predefined Field Type Description title string The title of the notification. Corresponds to the title option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. body string The body of the notification. Corresponds to the body option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. sound string The sound to play upon receipt of the notification. Corresponds to the sound option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. clickAction string The action to take when a user click on the notification. Corresponds to the click_action option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. bodyLocKey string The key for localization of the body string. Corresponds to the body_loc_key option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. bodyLocArgs string The string values to replace format specifiers for localization in the body string. Corresponds to the body_loc_args option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. titleLocKey string The key for localization of the title string. Corresponds to the title_loc_key option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. titleLocArgs string The string values to replace format specifiers for localization in the title string. Corresponds to the title_loc_args option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. icon string For Android only. The notification icon. Corresponds to the icon option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref . color string For Android only. Indicates the icon color in #rrggbb format. Corresponds to the color option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. tag string For Android only. If specification, each notification does not result in a new entry but replaces an existing entry with the specified tag. If unsest, each notificaiton results in a new entry. Corresponds to the tag option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. badge string For iOS only. The badge on client app home icon. Corresponds to the badge option for for HTTP JSON messages via GCM. See https://developers.google.com/cloud-messaging/http-server-ref. Example\u00b6 Actions When \u2611 send { \"to\" : { \"$in\": \"%%values.validTopics\" } } This rule ensures that applications can only perform a send action when the to argument is a string listed in validTopics, where validTopics is a user-defined constant. For more information in defining constants, see Values. \u2190 Amazon SES Service Rules HTTP Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/http-rules.html",
      "title": "HTTP Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > HTTP Service Rules HTTP Service Rules\u00b6 On this page Specify a Rule HTTP Service Arguments Examples For a HTTP Service, you must specify rules to enable HTTP action or actions. The rules must evaluate to true for the action to be enabled. Specify a Rule\u00b6 Select the HTTP action(s) for which the rule applies. Specify the rule in valid JSON that evaluates to a boolean. For the HTTP Service rules, you can specify rules based on the arguments to the HTTP action. { \"%%args.<argument>\": <value|expression> } Or, using the shorthand { \"<argument>\": <value|expression> } Important If a rule uses an expansion, such as %%args, you must prefix all fields in the rule with an expansion. HTTP Service Arguments\u00b6 To specify a rule based on arguments: { \"%%args.<argument1>\": <value1|expression1>, \"%%args.<argument2>\": <value1|expression2>, ... } Or you can omit the %%args prefix if you do not specify any expansion prefixes for the fields (i.e., you cannot specify %%args.argument1 and argument2 in a single rule): { \"<argument1>\": <value1|expression1>, \"<argument2>\": <value1|expression2>, ... } You can use the following arguments in HTTP service rules. url\u00b6 The url argument is a JSON document whose fields correspond to the components of a URL. Given the URL of the form: <scheme>://<host>/<path>?<query>#<fragment> The url argument is a document with the fields: { \"scheme\": <string>, \"host\": <string>, \"path\": <string>, \"query\": <string>, \"fragment\": <string> } The host can include the port. The path includes the leading slash /. The query excludes the question mark ?. The fragment excludes the hash sign #. That is, given the following URL as the argument to a GET action: https://cloud.mongodb.com/api/atlas/v1.0/groups/535683b3794d371327b/alerts?status=OPEN&pageNum=2 The corresponding url document would contain: { \"scheme\": \"https\", \"host\": \"cloud.mongodb.com\", \"path\": \"/api/atlas/v1.0/groups/535683b3794d371327b/alerts\", \"query\": \"status=OPEN&pageNum=2\" } headers\u00b6 The headers argument is a document whose fields corresponds to the HTTP header fields and the corresponding values are an array of values (e.g. \"Content-Type\": [ \"application/json\" ]) for the request. { \"%%args.headers.<field>\": <expression|value> } or { \"headers.<field>\": <expression|value> } body\u00b6 The body argument is a document that corresponds to the body of the HTTP request. { \"%%args.body\": <expression|value> } or { \"body\": <expression|value> } followRedirects\u00b6 The followRedirects argument is a boolean that determines whether or not to follow redirects. { \"%%args.followRedirects\": <boolean value|expression> } or { \"followRedirects\": <boolean value|expression> } cookies\u00b6 The cookies argument is a document with the cookie name and value pairs. { \"%%args.cookies\": <document value> } { \"cookies\": <document value> } Or if specifying a rule on a particular cookie: { \"%%args.cookies.<field>\": <expression|value> } or { \"cookies.<field>\": <expression|value> } authUrl\u00b6 The authUrl argument is a document that corresponds to the authURL for the HTTP request. Given the auth URL is the following: <scheme>://<host>/<path>?<query>#<fragment> Then, the authURL argument is a document with the fields: { \"scheme\": <string>, \"host\": <string>, \"path\": <string>, \"query\": <string>, \"fragment\": <string> } The host can include the port. The path includes the leading slash /. The query excludes the question mark ?. The fragment excludes the hash sign #. For example, given the following URL as the argument to a GET action: https://sometest.example.com/api/oauth2/authorize?prompt=consent&response_type=code The corresponding authURL document would contain: { \"scheme\": \"https\", \"host\": \"sometest.example.com\", \"path\": \"/api/oauth2/authorize\", \"query\": \"prompt=consent&response_type=code\" } Examples\u00b6 Example Rule with the url Argument\u00b6 Actions When \u2611 get \u2611 patch { \"%%args.url.host\" : \"cloud.mongodb.com\", \"%%args.url.path\" : \"/api/atlas/v1.0/groups/535683b3794d371327b\" } The HTTP rule ensures that applications can perform a GET or a PATCH when: url host is \"cloud.mongodb.com\" and url path is \"/api/atlas/v1.0/groups/535683b3794d371327b\" Example Rule with the headers Argument\u00b6 Actions When \u2611 patch { \"url.host\" : \"cloud.mongodb.com\", \"url.path\" : \"/api/atlas/v1.0/groups/535683b3794d371327b\", \"headers.Content-Type\": \"application/json\" } The HTTP rule ensures that applications can only perform a PATCH action when the: url host is \"cloud.mongodb.com\", path is \"/api/atlas/v1.0/groups/535683b3794d371327b\", and content type is \"application/json\" Example Rule with the body Argument\u00b6 Actions When \u2611 patch { \"url.host\" : \"cloud.mongodb.com\", \"url.path\" : \"/api/atlas/v1.0/groups/535683b3794d371327b\", \"headers.Content-Type\": \"application/json\", \"body.name\": { \"%exists\": 1 } } The HTTP rule ensures that applications can only perform a PATCH action when the: url host is \"cloud.mongodb.com\", url path is \"/api/atlas/v1.0/groups/535683b3794d371327b\", content type is \"application/json\", and body contains the field name. Example Rule with the followRedirects Argument\u00b6 Actions When \u2611 post { \"%%args.url.host\" : \"cloud.mongodb.com\", \"%%args.url.path\" : \"/api/atlas/v1.0/groups/535683b3794d371327b\", \"%%args.followRedirects\": false } The HTTP rule ensures that applications can only perform a post action when the: url host is \"cloud.mongodb.com\", url path is \"/api/atlas/v1.0/groups/535683b3794d371327b\", and followRedirects is false. Example Rule with the cookies Argument\u00b6 Actions When \u2611 get { \"url.host\" : \"cloud.mongodb.com\", \"url.path\" : \"/api/atlas/v1.0/groups/535683b3794d371327b\", \"cookies.language-selected\": \"python\" } The HTTP rule ensures that applications can only perform a get action when the: url host is \"cloud.mongodb.com\", url path is \"/api/atlas/v1.0/groups/535683b3794d371327b\", and cookie language-selected is \"python\" \u2190 GCM Service Rules Twilio Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mailgun-rules.html",
      "title": "Mailgun Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > Mailgun Service Rules Mailgun Service Rules\u00b6 On this page Specify a Rule Mailgun Service Arguments Example To use the Mailgun Service, you must specify rules to enable its actions. The rules must evaluate to true for the action to execute. Specify a Rule\u00b6 Select the action(s) for which the rule applies. Specify the rule in valid JSON that evaluates to a boolean. You can specify MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions.: { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } You can specify rules based on an argument to the action. For details and examples, see SES Service Arguments. Mailgun Service Arguments\u00b6 To specify a rule based on arguments: { \"%%args.<argument1>\": <value1|expression1>, \"%%args.<argument2>\": <value1|expression2>, ... } Or you can omit the %%args prefix if you do not specify any expansion prefixes for the fields (i.e., you cannot specify %%args.argument1 and argument2 in a single rule): { \"<argument1>\": <value1|expression1>, \"<argument2>\": <value1|expression2>, ... } You can use the following arguments in Mailgun service rules. to\u00b6 The to argument is a string that corresponds to the destination email address. from\u00b6 The from argument is a string that corresponds to the originating email address. subject\u00b6 The subject argument is a string that corresponds to the subject of the message. text\u00b6 The body argument is a string that corresponds to the body of the message. Example\u00b6 Actions When \u2611 send { \"from\" : \"someone@example.com\", \"to\": { \"%in\": \"%%values.opt-ins\" } } The rule ensures that applications can only perform a send action when: from is someone@example.com, and to is an email listed in the opt-ins, where opt-ins is a user-defined constant. For more information in defining constants, see Values. \u2190 Slack Service Rules Pipelines \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mongodb-filters.html",
      "title": "MongoDB Service Filters \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > MongoDB Service Rules > MongoDB Service Filters MongoDB Service Filters\u00b6 On this page Default Filter Filter Syntax Filter Behavior Filter Example For a MongoDB Service, you can specify filters that are applied to documents when a specified condition is met. These filters are in addition to the query predicates for read and write operations. Default Filter\u00b6 By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. Filter Syntax\u00b6 For a filter rule, you need to specify both: A When condition that indicates when to apply the filter, and A Match Expression filter to apply to read and write operations. When Expression Syntax\u00b6 The syntax for the When condition is a JSON document. MongoDB expression operators (with the exception of the %text and the geospatial operators) are available. Important Because the filter is applied before any documents are read, you can only specify MongoDB Stitch values, named pipelines, or generally available expansions (e.g. %%true, %%user, etc) and literals. You cannot refer to a document field in the when expression. { <value|namedpipeline|general expansion>: <literal1|expression1|value|namedpipeline|general expansion>, ... } Match Expression Syntax\u00b6 The syntax for the Match Expression filter is similar to the MongoDB query predicate. MongoDB expression operators (with the exception of the %text and the geospatial operators) are available. Important You cannot prefix the field name with an expansion. { <field1>: <literal1|expression1|value|namedpipeline|general expansion>, <field2>: <literal2|expression2|value|namedpipeline|general expansion>, ... } or { \"%or\": [ { \"<field1>\": <literal1|exp1|value|namedpipeline|general expansion> }, { \"<field2>\": <literal2|exp2|value|namedpipeline|general expansion> }, ... ] } Filter Behavior\u00b6 When you specify multiple filter conditions, for each when expression that evaluates to true, the corresponding Match Expression filter is applied. Filter Example\u00b6 A collection reports contains the following documents: { \"_id\" : ObjectID(\"58c96c02fc2c7dea5720e1e0\"), \"title\" : \"Pies\", \"about\" : { \"subject\" : \"pies\", \"counts\" : { \"pages\" : 5, \"words\" : 100 } }, \"classification\" : \"Public\", \"views\" : 101 } { \"_id\" : ObjectID(\"58c96c0bfc2c7dea5720e24b\"), \"title\" : \"Pastries Part 1\", \"about\" : { \"subject\" : \"puff pastries\", \"counts\" : { \"pages\" : 50, \"words\" : 5000 } }, \"classification\" : \"Public\", \"views\" : 21 } { \"_id\" : ObjectID(\"58c96c13fc2c7dea5720e272\"), \"title\" : \"Cakes\", \"about\" : { \"subject\" : \"cupcakes\", \"counts\" : { \"pages\" : 1, \"words\" : 200 } }, \"classification\" : \"Internal\", \"views\" : 50 } Specify the following two filter rules: When Match Expression Description { } { \"views\": { \"$gte\": 50 } } MongoDB Stitch always applies an additional query predicate of views greater than or equal to 50 for all read and write operations. { \"%%user.idHex\": \"589a86bcfc57bd5c25c51de8\" } { \"views\": { \"$gte\": 20 } } If the user logged into MongoDB Stitch has the id value of \"589a86bcfc57bd5c25c51de8\" , MongoDB Stitch applies an additional query predicate of views greater than 20 for all read and write operations. For all read and write operations, MongoDB Stitch applies the views: { $gte: 50 } filter. In addition, if the user logged into MongoDB Stitch has the specified id value, MongoDB Stitch also applies the views: { $gte: 20 } filter. That is, for the user that meets both When conditions, the filter applied is: { \"$and\": [ { \"views\": { \"$gte\": 50 } }, { \"views\": { \"$gte\": 20 } } ] } \u2190 MongoDB Service Validation Amazon S3 Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mongodb-rules-overview.html",
      "title": "MongoDB Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Services > MongoDB Service > MongoDB Rules MongoDB Rules\u00b6 \u2190 MongoDB Service Amazon S3 \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mongodb-rules-read.html",
      "title": "MongoDB Service Read Rule \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > MongoDB Service Rules > MongoDB Service Read Rule MongoDB Service Read Rule\u00b6 On this page Read Rule Default Read Rules Rules Syntax Read Rule Examples Read Rule\u00b6 MongoDB Stitch applies the MongoDB Service read rules to filter documents for read and write operations. The read rules are in addition to any query predicates issued in the read and write operations. If a rule determines that a field is readable: Read and write operations can query on the field (and its embedded fields, if any). Read operations can include the field (and its embedded fields, if any) in their results. If a rule determines that a field is not readable: Read and write operations cannot query on the field (or its embedded fields, if any); that is, query predicates on that field (or its embedded fields, if any) will not match any documents for read or write operations. Read operations will omit the field (and its embedded fields, if any) in their results. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Default Read Rules\u00b6 By default, the collection has the following read rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are readable if the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id, no field in the document is readable. Rules Syntax\u00b6 You can specify rules as JSON documents. MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions. { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } To access elements of an array or access fields in an embedded document, use dot notation. For list of MongoDB query operators available, see Query Selectors. You can also preface the <field> name with an expansion (%%<keyword>): { \"<expansion>.<field1>\": <value1|expression1>, \"<expansion>.<field2>\": <value2|expression2>, ... } Tip When a field is referenced at the top-level of a document rule, a field name <field> without any expansion is shorthand for %%root.<field>. In a read rule, %%root refers to the document being read. However , if a compound rule includes nested expressions, you must explictly include the expansion for a field in the nested expressions. When specifying a rule at a field level, you can use %%this to refer to the field; e.g., { \"%%this\": <value> }. In a read rule for a document, %%this refers to the document being read. In a read rule for a field, %%this refers to the field. The following table lists some syntax examples: Syntax Examples Description {} An empty JSON document evaluates to true. If specified as a document rule, all documents satisfy this read rule. If specified as a field rule, the field is always readable. { \"%%true\": true } The expression always evaluates to true as the value of the expansion %%true equals the boolean true. If specified as a document rule, all documents satisfy this read rule. If specified as a field rule, the field is always readable. { \"%%true\": false } The expression always evaluates to false as the reserved expansion value %%true does not equal the boolean false. If specified as a document rule, no document satisfies this read rule. If specified as a field rule, the field is never readable. { \"<field1>\": <value1|exp1>, \"<field2>\": <value2|exp2>, ... } or { \"<expansion1>.<field1>\": <value1|exp1>, \"<expansion2>.<field2>\": <value2|exp2>, ... } The compound document/field rule evaluates to true if all conditions are satisfied. { \"%or\": [ { \"<expansion>.<field1>\": <value1|exp1> }, { \"<expansion>.<field2>\": <value2|exp2> }, ... ] } The compound document/field rule evaluates to true if any of the specified conditions is satisfied. Note You must include expansions %%<keyword> to reference fields in the nested rule expressions. Read Rule Examples\u00b6 Important When applying rules, the rules at the highest level applies. For a rule for a field to take effect, no rules must exist at a higher level. For details, see Rules Interaction. The rule examples below apply to read operations on the collection reports with the following documents: { \"_id\" : 1, \"title\" : \"Pies\", \"about\" : { \"subject\" : \"pies\", \"counts\" : { \"pages\" : 5, \"words\" : 100 } }, \"classification\" : \"Public\", \"views\" : 100 } { \"_id\" : 2, \"title\" : \"Pastries Part 1\", \"about\" : { \"subject\" : \"puff pastries\", \"counts\" : { \"pages\" : 50, \"words\" : 5000 } }, \"classification\" : \"Public\", \"views\" : 20 } { \"_id\" : 3, \"title\" : \"Cakes\", \"about\" : { \"subject\" : \"cupcakes\", \"counts\" : { \"pages\" : 1, \"words\" : 200 } }, \"classification\" : \"Internal\", \"views\" : 50 } The following table describes the effects of the read rule when either the rule is specified for the document or the rule is specified for the field about.counts. The summary table is followed by specific examples. Rule Description {} If the rule is specified for the document, any and all fields are readable for all documents if Allow All Other Fields is enabled for the document. Otherwise, only listed fields are readable. For specific examples, see All Fields Are Readable and All Listed Fields Are Readable. If the rule is specified for the field about.counts, the field and its embedded fields pages and words are readable for all documents. Other fields are determined by Allow All Other Fields setting. For this rule to take effect, rules cannot exist at the document level or for the about field. You can specify a separate rule for the title field, about.subject field, and the type field. For specific example, see Specific Embedded Fields Are Readable. { \"%%root.about.subject\": \"pies\" } If the rule is specified for the document, any and all fields are readable for documents that match this condition if Allow All Other Fields is enabled . Otherwise, only listed fields are readable for matching documents. For a specific example, see All Fields Are Readable for Documents Matching Rule Condition. If the rule is specified for the field about.counts, the field and its embedded fields pages and words are readable for documents that match this condition. Other fields are determined by Allow All Other Fields setting. For this rule to take effect, rules cannot exist at the document level or for the about field. You can, however, specify a separate rule for the title field. For a specific example, see Specify Different Read Rules for Fields. All Fields Are Readable\u00b6 This examples sets up MongoDB Stitch rules to ensure that all fields are available for reads. To make all fields available for reads without condition: Specify an empty JSON document {} as the read rule at document level. Set Allow All Other Fields to enabled. Given this rule, if you issue the following StitchClient read operation: db.getCollection(\"reports\").find( {\"classification\":\"Public\"} ); The operation returns all fields: { \"_id\":1.0, \"title\":\"Pies\", \"about\":{\"subject\":\"pies\",\"counts\":{ \"pages\": 5.0, \"words\":100.0 }}, \"classification\":\"Public\", \"views\": 100.0 } { \"_id\":2.0, \"title\":\"Pastries Part 1\", \"about\":{\"subject\":\"puff pastries\",\"counts\":{ \"pages\":50.0, \"words\":5000.0 }}, \"classification\":\"Public\", \"views\": 20.0 } All Listed Fields Are Readable\u00b6 This examples sets up MongoDB Stitch rules to ensure that only title, classification, and views fields are available for reads. To make all listed fields readable and disallow unlisted fields for all documents: Specify an empty JSON document {} as the read rule at document level. Add the fields to which you wish to apply the rule; in this example, the title, classification, and views fields. Specify Any for the field type. Do not specify any rules for the fields. Set Allow All Other Fields to disabled. Given this rule, if you issue the following StitchClient read operation: db.getCollection(\"reports\").find( {\"classification\":\"Public\"} ); The operation returns only the listed fields: {\"title\":\"Pies\",\"classification\":\"Public\",\"views\":100.0} {\"title\":\"Pastries Part 1\",\"classification\":\"Public\",\"views\":20.0} Alternatively, instead of specifying a rule at the document level, you can specify individual field level read rules for the title, classification, and views fields. All Fields Are Readable for Documents Matching Rule Condition\u00b6 This example sets up MongoDB Stitch rules to ensure that if views field is less than or equal to 50, all fields are readable. To make all fields available under this condition: Specify document { \"views\": { \"%lte\": 50 } } as the read rule at document level. Set Allow All Other Fields to enabled. Given this rule, if you issue the following StitchClient read operation: db.getCollection(\"reports\").find( {\"classification\":\"Public\"} ) The operation returns all fields for which the views field is less than or equal to 50 and the classification field is equal to \"Public\". { \"_id\":2.0, \"title\":\"Pastries Part 1\", \"classification\":\"Public\", \"views\":20.0, \"about\":{\"subject\":\"puff pastries\",\"counts\":{\"pages\":50.0,\"words\":5000.0}} } Specific Embedded Fields Are Readable\u00b6 This example sets up MongoDB Stitch rules to make only about.counts and its embedded fields readable. The about field itself and its other embedded fields are not readable. To be able to read specific fields in documents, Ensure that no read rule exists at the document level. Set Allow All Other Fields to disabled. Specify the fields to which you wish to apply the rule. If the field is an embedded document, set the Field Type to Object. For this example, add the field about and its embedded fields: Field Field Type Read Rule about Object Do not specify a rule. about.subject Any Do not specify a rule. about.counts Object {} In the about.counts document, set Allow All Other Fields to enabled. Do not specify a rule. Alternatively, you can explicitly add about.counts.pages and about.counts.words in the about.counts document. For more information, see Fields Specification. Given this rule at the about.counts, if you issue the following StitchClient read operation: db.getCollection(\"reports\").find({}) The operation returns only the about.count and its embedded fields for all documents: {\"about\":{\"counts\":{\"words\":100.0,\"pages\":5.0}}} {\"about\":{\"counts\":{\"words\":5000.0,\"pages\":50.0}}}} {\"about\":{\"counts\":{\"words\":200.0,\"pages\":1.0}}} Because about and about.subject do not have read rules, a query predicate that includes these fields will not match any documents. For example, although a document exists with \"about.subject\": \"pies\", because the field is not readable, following operation will not return any results: db.getCollection(\"reports\").find( { \"about.subject\": \"pies\" } ); Specify Different Read Rules for Fields\u00b6 This examples sets up MongoDB Stitch rules such that: title field is readable if about.subject is \"pies\" about.counts and all its embedded fields are readable if about.subject is \"pies\" about.subject is readable for any document. To set up the rules: Ensure that no read rule exists at the document level. Set Allow All Other Fields to disabled. Specify the fields to which you wish to apply the rule. In this example, add the following fields. Field Field Type Read Rule title Any {\"%%root.about.subject\":\"pies\"} about Object Do not specify a rule. about.subject Any {} about.counts Object {\"%%root.about.subject\":\"pies\"} In the about.counts document, set Allow All Other Fields to enabled. Do not specify a rule. Alternatively, you can explicitly add about.counts.pages and about.counts.words in the about.counts document. For more information, see Fields Specification. Given the specified rules, if you issue the following StitchClient read operation: db.getCollection(\"reports\").find( {} ) The operation returns the following: {\"about\":{\"subject\":\"pies\",\"counts\":{\"words\":100.0,\"pages\":5.0}},\"title\":\"Pies\"} {\"about\":{\"subject\":\"puff pastries\"}} {\"about\":{\"subject\":\"cupcakes\"}} All Fields Except for the Listed Field is Readable\u00b6 This example sets up MongoDB Stitch rules to make the about field and its embedded fields unreadable. To be able to read specific fields in documents, Ensure that no read rule exists at the document level. Set Allow All Other Fields to enabled at the document level, and specify {} for the read rule. Specify the fields to which you wish to apply this rule. If the field is an embedded document or a field in the embedded document, you must add all the fields in that embedded document, even if you are not specifying rules for all. In this example, add: In this example, add: Field Field Type Read Rule about Object { \"%%true\": false } Given the specified rules, if you issue the following StitchClient read operation: db.getCollection(\"reports\").find( { \"classification\": \"Public\" } ) The operation returns the following: {\"_id\":1.0,\"title\":\"Pies\",\"classification\":\"Public\",\"views\":100.0} {\"_id\":2.0,\"title\":\"Pastries Part 1\",\"classification\":\"Public\",\"views\":20.0} \u2190 MongoDB Service Rules MongoDB Service Write Rule \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mongodb-rules-write.html",
      "title": "MongoDB Service Write Rule \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > MongoDB Service Rules > MongoDB Service Write Rule MongoDB Service Write Rule\u00b6 On this page Write Rule Stop on Error Behavior Default Write Rules Rules Syntax Write Rule Examples Write Rule\u00b6 MongoDB Stitch applies the MongoDB Service write rules to determine whether a write operation is permissible. The client can modify those fields for which the write rule evaluates to true. Important Query predicates do not match any documents if the predicates include fields that are unreadable as determined by the read rules. See MongoDB Service Read Rule for more information on read rules. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Stop on Error Behavior\u00b6 If a write operation modifies multiple documents and one of the document violates the write rules, the write operation stops upon error and does not continue processing any remaining documents. This can occur if you add write rules to an existing collection with documents that may violate the new write rules. To modify existing fields that violate new write rules, such as to delete documents that contain these fields or to $unset these fields, you can add each of these fields with a write rule {\"%%this\": {\"%exists\": false}}. Default Write Rules\u00b6 By default, the collection has the following write rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are writable when after the write operation, the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id after the write operation, no field in the document is writable. Rules Syntax\u00b6 You can specify rules as JSON documents. MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions. { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } To access elements of an array or access fields in an embedded document, use dot notation. For list of MongoDB query operators available, see Query Selectors. You can also preface the <field> name with an expansion (%%<keyword>): { \"<expansion>.<field1>\": <value1|expression1>, \"<expansion>.<field2>\": <value2|expression2>, ... } Tip When a field is referenced at the top-level of a document rule, a field name <field> without any expansion is shorthand for %%root.<field>. In a write rule, %%root refers to the document after the write operation. However , if a compound rule includes nested expressions, you must explictly include the expansion for a field in the nested expressions. When specifying a rule at a field level, you can use %%this to refer to the field; e.g., { \"%%this\": <value> }. In a write rule for a document, %%this refers to the document after the write operation. In a write rule for a field, %%this refers to the field after the write operation. The following table lists some syntax examples: Syntax Examples Description {} An empty JSON document evaluates to true. If specified as a document rule, all documents satisfy this write rule. If specified as a field rule, the field is always writeable. { \"%%true\": true } The expression always evaluates to true as the value of the expansion %%true equals the boolean true. If specified as a document rule, all documents satisfy this write rule. If specified as a field rule, the field is always writeable. { \"%%true\": false } The expression always evaluates to false as the reserved expansion value %%true does not equal the boolean false. If specified as a document rule, no document satisfies this write rule. If specified as a field rule, the field is never writeable. { \"<field1>\": <value1|exp1>, \"<field2>\": <value2|exp2>, ... } or { \"<expansion1>.<field1>\": <value1|exp1>, \"<expansion2>.<field2>\": <value2|exp2>, ... } The compound document/field rule evaluates to true if all conditions are satisfied. { \"%or\": [ { \"<expansion>.<field1>\": <value1|exp1> }, { \"<expansion>.<field2>\": <value2|exp2> }, ... ] } The compound document/field rule evaluates to true if any of the specified conditions is satisfied. Note You must include expansions %%<keyword> to reference fields in the nested rule expressions. Write Rule Examples\u00b6 Important When applying rules, the rules at the highest level applies. For a rule for a field to take effect, no rules must exist at a higher level. For details, see Rules Interaction. The examples below add write rules on an existing collection reports that already contains the following documents: { \"_id\" : 1, \"title\" : \"Pies\", \"about\" : { \"subject\" : \"pies\", \"counts\" : { \"pages\" : 5, \"words\" : 100 } }, \"classification\" : \"Public\", \"views\" : 100 } { \"_id\" : 2, \"title\" : \"Pastries Part 1\", \"about\" : { \"subject\" : \"puff pastries\", \"counts\" : { \"pages\" : 50, \"words\" : 5000 } }, \"classification\" : \"Public\", \"views\" : 20 } { \"_id\" : 3, \"title\" : \"Cakes\", \"about\" : { \"subject\" : \"cupcakes\", \"counts\" : { \"pages\" : 1, \"words\" : 200 } }, \"classification\" : \"Internal\", \"views\" : 50 } The following table describe the effects of the write rule when either the rule is specified for the document or the rule is specified for the field about.counts. The summary table is followed by specific examples. Examples Description {} If the rule is specified for the document, any and all fields are writable for any document if Allow All Other Fields is enabled. Otherwise, only listed fields are writable. For specific examples, see All Fields Are Writable for Any Write Operation. If the rule is specified for the field about.counts, the field and its embedded fields pages and words are writable for all documents. Other fields are determined by Allow All Other Fields setting. For this field rule to take effect, rules cannot exist at the document level or for the about field. You can specify a separate rule for the title field, about.subject field, and the type field. For specific example, see Only Specific Embedded Fields Are Writable. If specifying the rule at the document level { \"%or\": [ {\"%%root.about.counts.words\": {\"%gt\": 0}}, {\"%%prevRoot.about.counts.words\": {\"%gt\": 0}, \"%%root.about.counts.words\": {\"%exists\": false}} ] } - or - If specifying the rule for the about.count field { \"%or\": [ { \"%%this.words\": { \"%gt\": 0 } }, { \"%%prev.words\": { \"%gt\": 0 }, \"%%this.words\": { \"%exists\": false } } ] } If the rule is specified for the document, fields are writable: if the \"about.count.words\" field is greater than 0 after the write operation, or if the field was greater than 0 before the write operation and no longer exists after the write operation. The determination of which fields this document rule applies to depends on the Allow All Other Fields setting and listed fields. If the rule is specified for the field about.counts, then the field and its embedded fields pages and words are writable if the \"about.count.words\" field is greater than 0 after the write operation (or prior to the write is greater than 0 and is deleted after the write operation). Other fields are determined by Allow All Other Fields setting. For this rule to take effect, rules cannot exist at the document level or for the about field. You can, however, specify a separate rule for the title field. For a specific example, see Specify Different Write Rules for Fields. All Fields Are Writable for Any Write Operation\u00b6 Note Query predicates do not match any documents if the predicates include fields that are determined unreadable by the read rules. For simplicity, the following examples assume all fields are readable. See MongoDB Service Read Rule for more information on read rules. This examples sets up MongoDB Stitch rules to ensure that all fields are available for insert, update, and delete operations. To make all fields available for any write operations: Specify an empty JSON document {} as the write rule at document level. Set Allow All Other Fields to enabled. Given these rule at the document level, all write operations are allowed. For example, the following StitchClient write operations are allowed: db.getCollection(\"reports\").insert( { \"title\": \"Tarts\", \"classification\": \"Public\", \"views\": 101, \"about\": { \"subject\": \"pies\", \"counts\": { \"pages\": 10, \"words\": 500 } } } ); db.getCollection(\"reports\").updateMany( { \"classification\":\"Public\" }, { \"$inc\": { \"views\": 1 } } ); db.getCollection(\"reports\").deleteOne( { \"classification\":\"Public\" } ); All Listed Fields Are Writable for Documents Matching Rule Condition\u00b6 Note Query predicates do not match any documents if the predicates include fields that are determined unreadable by the read rules. For simplicity, the following examples assume all fields are readable. See MongoDB Service Read Rule for more information on read rules. This examples sets up MongoDB Stitch rules to ensure that all fields are writable: if the \"about.count.words\" field is greater than 0 after the write operation, or if the field was greater than 0 and no longer exists after the write operation. To make all fields available under these conditions: Specify the following write rule for the document { \"%or\": [ { \"%%root.about.counts.words\": { \"%gt\": 0 } }, { \"%%prevRoot.about.counts.words\": { \"%gt\": 0 }, \"%%root.about.counts.words\": { \"%exists\": false } } ] } Set Allow All Other Fields to enabled. Given these rule at the document level, insert and update operations that result in documents where \"about.count.words\" field is greater than 0 as well as delete operations of documents where \"about.count.words\" field is greater than 0. For example, the following StitchClient write operations are allowed: db.getCollection(\"reports\").insert( { \"title\": \"Apples\", \"classification\": \"Public\", \"views\": 101, \"about\": { \"subject\": \"fruit\", \"counts\": { \"pages\": 10, \"words\": 500 } } } ); db.getCollection(\"reports\").updateMany( { \"classification\":\"Public\", \"about.counts.words\": { \"$gt\": 0 } }, { \"$inc\": { \"views\": 1 } } ); db.getCollection(\"reports\").deleteOne( { \"about.counts.words\": 1 } ); Only Specific Embedded Fields Are Writable\u00b6 Note Query predicates do not match any documents if the predicates include fields that are determined unreadable by the read rules. For simplicity, the following examples assume all fields are readable. See MongoDB Service Read Rule for more information on read rules. This example sets up MongoDB Stitch rules to make the about.counts field and its embedded fields writable. To be able to write specific embedded fields, Ensure that no write rule exists at the document level. Set Allow All Other Fields to enabled and modify the write rule to { \"%%true\": false } to ensure that unlisted fields are readable but not writable. Specify the fields to which you wish to apply the rule. If the field is an embedded document or a field in the embedded document, you must add all the fields in that embedded document, even if you are not specifying rules for all. In this example, add: Field Field Type Write Rule about Object Do not specify a rule. about.subject Any Do not specify a rule. about.counts Object {} In the about.counts document, set Allow All Other Fields to enabled. Do not specify a rule. Alternatively, you can explicitly add about.counts.pages and about.counts.words in the about.counts document. For more information, see Fields Specification. Given these rule, you can: Update the about.counts and its embedded fields only. Replace a document that only contains the _id field, about.counts and its listed embedded fields with a replacement document that only contains the _id field (immutable), about.counts and its embedded fields. Insert documents that only contains about.counts and its listed embedded fields. Delete documents that only contains _id field, about.counts and its listed embedded fields. For example, the following StitchClient write operations are allowed: Note If a write operation modifies multiple documents and one of the document violates the write rules, the write operation stops upon error and does not continue processing any remaining documents. This can occur if you add write rules to an existing collection with documents that may violate the new write rules. For details, see Stop on Error Behavior. db.getCollection(\"reports\").insert( { \"about\": { \"counts\": { \"pages\": 10, \"words\": 500 } } } ); db.getCollection(\"reports\").updateMany( { \"classification\":\"Public\" }, { \"$set\": { \"about.counts.words\": 550 } } ); db.getCollection(\"reports\").deleteMany( { \"title\": { \"$exists\": false }, \"views\": { \"$exists\": false }, \"classification\": { \"$exists\": false }, \"about.subject\": { \"$exists\": false } } ); However, write operations that attempt to modify fields that are not writable are not allowed. For example, the following write operations are disallowed on the example collection which contains existing documents that may violate the new write rules: db.getCollection(\"reports\").insert( { \"about\": { \"subject\": \"cookies\", \"counts\": { \"pages\": 10, \"words\": 500 } } } ); db.getCollection(\"reports\").updateMany( { \"classification\":\"Public\" }, { \"$inc\": { \"views\": 1 } } ); db.getCollection(\"reports\").deleteMany( { \"classification\":\"Public\" } ); Specify Different Write Rules for Fields\u00b6 Note Query predicates do not match any documents if the predicates include fields that are determined unreadable by the read rules. For simplicity, the following examples assume all fields are readable. See MongoDB Service Read Rule for more information on read rules. This examples sets up MongoDB Stitch rules such that: title field is writable if before the write operation, the about.subject is \"pies\". about.counts and all its embedded fields are writable if after the write operation, about.counts.words value is greater than 0. about.subject is writable. To set up the rules: Ensure that no write rule exists at the document level. Set Allow All Other Fields to enabled and modify the write rule to { \"%%true\": false } to ensure that unlisted fields are readable but not writable. Specify the fields to which you wish to apply the rule. If the field is an embedded document or a field in the embedded document, you must add all the fields in that embedded document, even if you are not specifying rules for all. In this example, add: Field Field Type Write Rule title Any {\"%%prevRoot.about.subject\":\"pies\"} about Object Do not specify a rule. about.subject Any {} about.counts Object { \"%%this.words\": {\"%gt\": 0} } In the about.counts document, set Allow All Other Fields to enabled. Do not specify a rule. Alternatively, you can explicitly add about.counts.pages and about.counts.words in the about.counts document. For more information, see Fields Specification. Note If a write operation modifies multiple documents and one of the document violates the write rules, the write operation stops upon error and does not continue processing any remaining documents. This can occur if you add write rules to an existing collection with documents that may violate the new write rules. For details, see Stop on Error Behavior. Given these rules, you can: Update the about.counts and its embedded fields only. Replace a document that only contains the _id field, about.counts and its listed embedded fields with a replacement document that only contains the _id field (immutable), about.counts and its embedded fields. Insert documents that only contains about.counts and its listed embedded fields. Delete documents that only contains _id field, about.counts and its listed embedded fields. For example, the following StitchClient write operations are allowed: db.getCollection(\"reports\").insert( { \"about\": { \"counts\": { \"pages\": 2, \"words\": 1000 } } } ); db.getCollection(\"reports\").updateMany( { \"classification\":\"Public\", \"about.subject\": \"pies\" }, { \"$set\": { \"about.subject\": \"pudding\", \"title\": \"Chocolate Puddings\", \"about.counts\": { \"words\": 500, \"pages\": 1 } } } ); db.getCollection(\"reports\").deleteMany( { \"about.counts.pages\": 1, \"title\": { \"$exists\": false }, \"views\": { \"$exists\": false }, \"classification\": { \"$exists\": false }, \"about.subject\": { \"$exists\": false } }); However, write operations that attempt to modify fields that are not writable are not allowed. For example, the following write operations are disallowed on the example collection: db.getCollection(\"reports\").insert( { \"about\": { \"counts\": { \"pages\": 10, \"words\": 0 } } } ); db.getCollection(\"reports\").updateMany( { \"about.subject\": \"cupcakes\" }, { \"$set\": { \"title\": \"Small Cakes\", \"about.counts\": { \"words\": 500, \"pages\": 2 } } } ); db.getCollection(\"reports\").deleteMany( { \"about.counts.words\": 0, \"title\": { \"$exists\": false }, \"views\": { \"$exists\": false }, \"classification\": { \"$exists\": false }, \"about.subject\": { \"$exists\": false } }); \u2190 MongoDB Service Read Rule MongoDB Service Validation \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mongodb-rules.html",
      "title": "MongoDB Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > MongoDB Service Rules MongoDB Service Rules\u00b6 On this page Add Namespace Default Rules Rules Interaction Fields Specification Rules Syntax For a MongoDB Service, you must set up rules to control access to fields for read and write operations. If a rule evaluates to true, read and write operation can access the fields for which the rule applies. If a rule evaluates to false, access is denied. MongoDB Authorization MongoDB Stitch rules do not override the read and write access (i.e. authorization) that may have been set up separately in MongoDB. That is, MongoDB Stitch rules determine whether the fields are readable or writable; not whether the client has authorization to read or write to a particular database or collection. Add Namespace\u00b6 Important You must create a rule for each collection you wish to access. To add a rule for a collection, from the Rules tab, click the New button, and enter the the database and collection names. Default Rules\u00b6 Read Rule\u00b6 By default, the collection has the following read rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are readable if the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id, no field in the document is readable. MongoDB Stitch applies the MongoDB Service read rules to filter documents for read and write operations. The read rules are in addition to any query predicates issued in the read and write operations. If a rule determines that a field is readable: Read and write operations can query on the field. Read operations can include the field in their results. If a rule determines that a field is not readable: Read and write operations cannot query on the field; query predicates on that field will not match any documents for read or write operations. Read operations will omit the field in their results. For examples, see Read Rule Examples. Write Rule\u00b6 By default, the collection has the following write rule at the document level: { \"owner_id\": \"%%user.id\" } With this rule, all fields in a document are writable when after the write operation, the document contains an owner_id field that equals the id of the user logged in to the ToDo app (%%user.id). If the owner_id field does not equal the user id after the write operation, no field in the document is writable. MongoDB Stitch applies the write rules to determine whether a write operation is permissible. The client can modify those fields for which the write rule evaluates to true. Important For write operations, MongoDB Stitch clients can access fields that are readable as determined by the read rules. See MongoDB Service Read Rule for more information on read rules. If a write operation modifies multiple documents and one of the document violates the write rules, the write operation stops upon error and does not continue processing any remaining documents. For examples, see Write Rule Examples. Validation Rule\u00b6 By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. For a MongoDB Service, you can specify validation rules for update and insert operations. If the update and insert operations do not pass the validation rule, MongoDB Stitch fails the operations. For details, see MongoDB Service Validation. Filter\u00b6 By default, the collection has the following filter rule: When Match Expression { \"%%true\": true } { \"owner_id\": \"%%user.id\" } This filter indicates that when %%true equals true (i.e. always), apply the following filter { \"owner_id\": \"%%user.id\" } to the read and write operations. This filter is in addition to the query predicates for read and write operations. For a MongoDB Service, you can specify filters that are applied to documents when a specified condition is met. These filters are in addition to the query predicates for read and write operations. For details, see MongoDB Service Filters. Rules Interaction\u00b6 You can specify rules for any and all fields in a document or for specific fields (and their descendants). Important When applying read/write rules, the rules at the highest level applies. For a read/write rule for a field to take effect, no rules must exist at a higher level. For instance, if you have rules both for the document and for specific fields, the document rule determines access to all fields and overrides any specific field rules. Or if you have a rule for a field and a separate rule for one of its nested fields, the rule for the field determines access to all its nested fields and overrides the specific rule for its nested field. Example Given documents with the following fields: { _id: 1, \"title\": \"Report: Pies\", \"about\": { \"subject\": \"pies\", \"counts\": { \"pages\": 5, \"words\": 100 } }, \"views\":20 } If a read rule exists for the field about and another rule exists for the field about.counts, the rule for the field about determines the read access for all the fields in about, including the field counts and its nested fields. If instead you want to specify a rule for about.counts.pages, omit rules for about and about.counts. To specify a rule that applies to any and all fields: Specify the rule on the document. To specify the rule on the document, click on the outermost curly braces, i.e. { or }, for the document. Set Allow All Other Fields to enabled. To specify a document level rule that applies only to listed fields and their descendants: Specify the rule on the document. To specify the rule on the document, click on the outermost curly braces, i.e. { or }, for the document. Set the Allow All Other Fields in the main document to disabled. In the document, add all the fields that you wish to apply this rule. For each listed field, you must specify its Field Type. If a listed field is an embedded document (i.e. Field Type is Object), you can explicitly add its embedded fields and/or set its Allow All Other Fields accordingly. See Fields Specification for details. Tip If you want to specify a rule for an embedded field but not the embedded document itself, do not specify a rule at the document level but specify rules at the embedded field level. See Specify rules for specific fields and deny access to unlisted fields. To specify rules for various fields (and their descendants if any) and deny access to any other fields: Ensure that a rule does not exists at document level. Set the Allow All Other Fields disabled at the document level. In the document, add the field(s) and specify the rules for each field or fields. A rule for a field applies to all its embedded fields, if any. If a listed field is an embedded document, you can either add all its fields or set its Allow All Other Fields to enabled. See Fields Specification for details. Fields Specification\u00b6 In the Rules for a namespace, you can explicitly specify the fields in the document and optionally, specify a corresponding rule for a field. To explicitly specify a field, click + Add, type in the field name, and hit Enter key: If the field is an embedded document, select Field Type of Object. If a write operation attempts to store a primitive value or an array in the field, MongoDB Stitch throws an error. If the stored field value is not a document, a read operation does not return the field. If the field is an array, select Field Type of Array. If a write operation attempts to store a primitive value or a document in the field, MongoDB Stitch throws an error. If the stored field value is not an array, a read operation does not return the field. If the field is not an embedded document or an array, select Field Type of Any. If a write operation attempts to store a document or an array in the field, MongoDB Stitch throws an error. If the stored field value is not a primitive type, a read operation does not return the field. Embedded Documents and Fields\u00b6 If the field is an embedded document, select Field Type of Object. For example, if the documents of a collection contain an embedded document author with content such as the following: \"author\": { \"first\": \"P.\", \"last\": \"Crust\" } Add the author field. Select Field Type of Object. Note If a write operation specifies a primitive-type value for author, MongoDB Stitch returns an error. For the embedded document, you can list its embedded fields as well as enable/disable its Allow All Other Fields setting. For example, you can add the fields \"first\" and \"last\" to the author document and set Allow All Other Fields to: enabled to allow unlisted fields in the author document. disabled to allow no other fields in the author document. Rules Syntax\u00b6 You can specify rules as JSON documents. MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions. { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } To access elements of an array or access fields in an embedded document, use dot notation. For list of MongoDB query operators available, see Query Selectors. You can also preface the <field> name with an expansion (%%<keyword>): { \"<expansion>.<field1>\": <value1|expression1>, \"<expansion>.<field2>\": <value2|expression2>, ... } Tip When a field is referenced at the top-level of a document rule, a field name <field> without any expansion is shorthand for %%root.<field>: In a read rule, %%root refers to the document being read. In a write or validation rule, %%root refers to the document after the write operation. However , if a compound rule includes nested expressions, you must explictly include the expansion for a field in the nested expressions. When specifying a rule at a field level, you can use %%this to refer to the field; e.g., { \"%%this\": <value> }. In a read rule for a document, %%this refers to the document being read. In a read rule for a field, %%this refers to the field. In a write rule or validation rule for a document, %%this refers to the document after the write operation. In a write rule for a field, %%this refers to the field after the write operation. The following table lists some syntax examples: Syntax Examples Description {} An empty JSON document evaluates to true. If specified as a document rule, all documents satisfy this read/write rule. If specified as a field rule, the field is always readable/writeable. { \"%%true\": true } The expression always evaluates to true as the value of the expansion %%true equals the boolean true. If specified as a document rule, all documents satisfy this read/write rule. If specified as a field rule, the field is always readable/writeable. { \"%%true\": false } The expression always evaluates to false as the reserved expansion value %%true does not equal the boolean false. If specified as a document rule, no document satisfies this read/write rule. If specified as a field rule, the field is never readable/writeable. { \"<field1>\": <value1|exp1>, \"<field2>\": <value2|exp2>, ... } or { \"<expansion1>.<field1>\": <value1|exp1>, \"<expansion2>.<field2>\": <value2|exp2>, ... } The compound document/field rule evaluates to true if all conditions are satisfied. { \"%or\": [ { \"<expansion>.<field1>\": <value1|exp1> }, { \"<expansion>.<field2>\": <value2|exp2> }, ... ] } The compound document/field rule evaluates to true if any of the specified conditions is satisfied. Note You must include expansions %%<keyword> to reference fields in the nested rule expressions. MongoDB Service Read Rule MongoDB Service Write Rule MongoDB Service Validation MongoDB Service Filters \u2190 Rules MongoDB Service Read Rule \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/mongodb-validation.html",
      "title": "MongoDB Service Validation \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > MongoDB Service Rules > MongoDB Service Validation MongoDB Service Validation\u00b6 On this page Default Validation Rule Validation Rules Syntax Validation Rule Example Validation Rules and Write Rules For a MongoDB Service, you can specify validation rules for update and insert operations. If the update and insert operations do not pass the validation rule, MongoDB Stitch fails the operations. MongoDB Document Validataion MongoDB Stitch validation rules do not override the document validation that may have been set up separately in MongoDB. Default Validation Rule\u00b6 By default, the collection has the following validation rule specified on the owner_id field that determines whether a write operation is permissible: { \"%or\": [ { \"%%prev\": \"%%user.id\" }, { \"%%prev\": { \"%exists\": false } } ] } With this rule, a write operation is valid if either: The write operation modifies a document where the owner_id field value equals the %%user.id before the write operation. -or- The write operation modifies a document that previously did not have the owner_id field, such as an insert of a new document. Validation Rules Syntax\u00b6 You can specify rules as JSON documents. MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions. { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } To access elements of an array or access fields in an embedded document, use dot notation. For list of MongoDB query operators available, see Query Selectors. You can also preface the <field> name with an expansion (%%<keyword>): { \"<expansion>.<field1>\": <value1|expression1>, \"<expansion>.<field2>\": <value2|expression2>, ... } Tip When a field is referenced at the top-level of a document rule, a field name <field> without any expansion is shorthand for %%root.<field>. In a validation rule, %%root refers to the document after the write operation. However , if a compound rule includes nested expressions, you must explicitly include the expansion for a field in the nested expressions. For example: { \"%or\": [ { \"%%this.views\": { \"%gt\": 0 } }, { \"%%prev.views\": { \"%exists\": 0 } } ] } When specifying a rule at a field level, you can use %%this to refer to the field; e.g., { \"%%this\": <value> }. In a validation rule for a document, %%this refers to the document after the write operation. In a validation rule for a field, %%this refers to the field after the write operation. The following table lists some syntax examples: Syntax Examples Description {} An empty JSON document evaluates to true. If specified as a document rule, all documents satisfy this validation rule. If specified as a field rule, the field is always valid. { \"%%true\": true } The expression always evaluates to true as the value of the expansion %%true equals the boolean true. If specified as a document rule, all documents satisfy this validation rule. If specified as a field rule, the field is always valid. { \"%%true\": false } The expression always evaluates to false as the reserved expansion value %%true does not equal the boolean false. If specified as a document rule, no document satisfies this validation rule. If specified as a field rule, the field is never valid. { \"<field1>\": <value1|exp1>, \"<field2>\": <value2|exp2>, ... } or { \"<expansion1>.<field1>\": <value1|exp1>, \"<expansion2>.<field2>\": <value2|exp2>, ... } The compound document/field rule evaluates to true if all conditions are satisfied. { \"%or\": [ { \"<expansion>.<field1>\": <value1|exp1> }, { \"<expansion>.<field2>\": <value2|exp2> }, ... ] } The compound document/field rule evaluates to true if any of the specified conditions is satisfied. Note You must include expansions %%<keyword> to reference fields in the nested rule expressions. Validation Rule Example\u00b6 The validation rule example below applies to insert/update operations on the collection reports with the following documents: { \"_id\" : 1, \"title\" : \"Pies\", \"about\" : { \"subject\" : \"pies\", \"counts\" : { \"pages\" : 5, \"words\" : 100 } }, \"type\" : \"Public\", \"views\" : 101 } { \"_id\" : 2, \"title\" : \"Pastries Part 1\", \"about\" : { \"subject\" : \"puff pastries\", \"counts\" : { \"pages\" : 50, \"words\" : 5000 } }, \"type\" : \"Public\", \"views\" : 21 } { \"_id\" : 3, \"title\" : \"Cakes\", \"about\" : { \"subject\" : \"cupcakes\", \"counts\" : { \"pages\" : 1, \"words\" : 200 } }, \"type\" : \"Internal\", \"views\" : 50 } To ensure that all documents inserted or updated in the reports collection have: type field with one of two values, \"Public\" or \"Internal\", and about.counts.words field contains contains a number greater than 0. You can specify the following validation rule at the document level: { \"type\": { \"%in\": [ \"Public\", \"Internal\" ] }, \"about.counts.words\": { \"%type\": \"number\", \"%gt\": 0 } } This validation rule would disallow any insert or update opertions that results in documents that do not violate the rule. For example, the following insert operation would fail: db.reports.insert( { \"title\" : \"\", \"about\" : { \"subject\" : \"\", \"counts\" : { \"pages\" : 1, \"words\" : 0 } }, \"type\" : \"Public\", \"views\" : 50 } ) You could specify the above validation rule as separate field level validation rules for the type field and about.counts.words field. That is, The type field has the following validation rule: { \"%%this\": { \"%in\": [ \"Public\", \"Internal\" ] } } The about.counts.words field has the following validation rule: { \"%%this\": { \"%type\": \"number\", \"%gt\": 0 } } Validation Rules and Write Rules\u00b6 Delete Operations\u00b6 Validation rules apply for insert and update operations only. Write rules apply to insert, update, and delete operations. Rule Cascade\u00b6 Unlike a write rule where the rule at the highest level overrides any rule specified at a lower level, validation rules do not propagate down to lower levels. That is, if a document validation rule and field validation rule exist, the document validation rule has no implication for the field validation. For example, if the following document-level validation rule exists: { \"about.counts.words\": { \"%exists\": 1 } } And, the following field-level validation rule exists for the about.counts.words field: { \"%%this\": { \"%type\": \"number\", \"%gt\": 0 } } The following insert operation will fail because it fails the field level validation rule even though it passes the document level validation rule: { \"title\" : \"Brioche\", \"about\" : { \"subject\" : \"breads\", \"counts\" : { \"pages\" : 10, \"words\" : 0 } }, \"type\" : \"Public\", \"views\" : 50 } \u2190 MongoDB Service Write Rule MongoDB Service Filters \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/s3-rules.html",
      "title": "Amazon S3 Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > Amazon S3 Service Rules Amazon S3 Service Rules\u00b6 On this page Specify a Rule Amazon S3 Service Arguments Example For an Amazon S3 Service, you must specify rules to enable its actions. The rules must evaluate to true for the action to be enabled. Specify a Rule\u00b6 Select the action(s) for which the rule applies. Specify the rule in valid JSON that evaluates to a boolean. You can specify MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions.: { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } You can specify rules based on an argument to the action. For details and examples, see Amazon S3 Service Arguments. Amazon S3 Service Arguments\u00b6 To specify a rule based on arguments: { \"%%args.<argument1>\": <value1|expression1>, \"%%args.<argument2>\": <value1|expression2>, ... } Or you can omit the %%args prefix if you do not specify any expansion prefixes for the fields (i.e., you cannot specify %%args.argument1 and argument2 in a single rule): { \"<argument1>\": <value1|expression1>, \"<argument2>\": <value1|expression2>, ... } You can use the following arguments in S3 service rules. bucket\u00b6 The bucket argument is a string that corresponds to the S3 bucket name. key\u00b6 The key argument is a string that corresponds to the object key, or key name, which uniquely identifies the object in the bucket; i.e. the path to the object in the bucket. acl\u00b6 The acl argument is a string that corresponds to the access control list (ACL) permissions. The value can be one of the following strings: \"private\" \"public-read\" \"public-read-write\" \"aws-exec-read\" \"authenticated-read\" \"bucket-owner-read\" \"bucket-owner-full-control\" contentType\u00b6 The contentType argument is a string that corresponds to the MIME type of the content, such as text/plain or audio/mpeg. Example\u00b6 Actions When \u2611 put { \"bucket\" : { \"%in\": \"%%values.mybuckets\" }, \"contentType\" : \"text/plain\" } The S3 rule ensures that applications can only perform a put action when the: bucket is a string listed in mybuckets, where mybuckets is a user-defined constant. For more information in defining constants, see Values. contentType is \"text/plain\". \u2190 MongoDB Service Filters Amazon SES Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/ses-rules.html",
      "title": "Amazon SES Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > Amazon SES Service Rules Amazon SES Service Rules\u00b6 On this page Specify a Rule SES Service Arguments Example For an Amazon SES Service, you must specify rules to enable its actions. The rules must evaluate to true for the action to be enabled. Specify a Rule\u00b6 Select the action(s) for which the rule applies. Specify the rule in valid JSON that evaluates to a boolean. You can specify MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions.: { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } You can specify rules based on an argument to the action. For details and examples, see SES Service Arguments. SES Service Arguments\u00b6 To specify a rule based on arguments: { \"%%args.<argument1>\": <value1|expression1>, \"%%args.<argument2>\": <value1|expression2>, ... } Or you can omit the %%args prefix if you do not specify any expansion prefixes for the fields (i.e., you cannot specify %%args.argument1 and argument2 in a single rule): { \"<argument1>\": <value1|expression1>, \"<argument2>\": <value1|expression2>, ... } You can use the following arguments in SES service rules. toAddress\u00b6 The toAddress argument is a string that corresponds to the destination email address. fromAddress\u00b6 The fromAddress argument is a string that corresponds to the originating email address. subject\u00b6 The subject argument is a string that corresponds to the subject of the message. body\u00b6 The body argument is a string that corresponds to the body of the message. Example\u00b6 Actions When \u2611 send { \"fromAddress\" : \"someone@mongodb.com\", \"toAddress\": { \"%in\": \"%%values.opt-ins\" } } The rule ensures that applications can only perform a send action when: fromAddress is someone@mongodb.com, and toAddress is an email listed in the opt-ins, where opt-ins is a user-defined constant. For more information in defining constants, see Values. \u2190 Amazon S3 Service Rules GCM Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/slack-rules.html",
      "title": "Slack Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > Slack Service Rules Slack Service Rules\u00b6 On this page Specify a Rule Slack Service Arguments Example For a Slack Service, you must specify rules to enable the post action. The rules must evaluate to true for the action to be enabled. An empty document ({}) always evaluates to true. Specify a Rule\u00b6 Select the action(s) for which the rule applies. Specify the rule in valid JSON that evaluates to a boolean. You can specify MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions.: { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } You can specify rules based on an argument to the action. For details and examples, see Slack Service Arguments. Slack Service Arguments\u00b6 To specify a rule based on arguments: { \"%%args.<argument1>\": <value1|expression1>, \"%%args.<argument2>\": <value1|expression2>, ... } Or you can omit the %%args prefix if you do not specify any expansion prefixes for the fields (i.e., you cannot specify %%args.argument1 and argument2 in a single rule): { \"<argument1>\": <value1|expression1>, \"<argument2>\": <value1|expression2>, ... } You can use the following arguments in Slack service rules. channel\u00b6 The channel argument is a string that corresponds to the Slack channel you wish to post to. username\u00b6 The username argument is a string that corresponds to the username under which the Slack message appears. text\u00b6 The text argument is a string that corresponds to the body of the Slack message. iconUrl\u00b6 The iconUrl argument is a string that specifies a URL which points to an icon for a Slack user. iconEmoji\u00b6 The iconEmoji argument is a string that represents an emoji. Example\u00b6 Actions When \u2611 post { \"channel\" : \"general\", \"username\": \"fred\" } The rule ensures that applications can only perform a post action when: channel is general, and username is fred. \u2190 Twilio Service Rules Mailgun Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/rules/twilio-rules.html",
      "title": "Twilio Service Rules \u2014 MongoDB Stitch (Beta)",
      "text": "Rules > Twilio Service Rules Twilio Service Rules\u00b6 On this page Specify a Rule Twilio Service Arguments Example For a Twilio Service, you must specify rules to enable its actions. The rules must evaluate to true for the action to be enabled. Specify a Rule\u00b6 Select the send checkbox under Actions. Specify the rule in valid JSON that evaluates to a boolean. You can specify MongoDB query expression operators (with the exception of the %text and the geospatial operators) are available for rule expressions.: { <field1>: <value1|expression1>, <field2>: <value2|expression2>, ... } You can specify rules based on an argument to the action. For details and examples, see Twilio Service Arguments. Twilio Service Arguments\u00b6 To specify a rule based on arguments: { \"%%args.<argument1>\": <value1|expression1>, \"%%args.<argument2>\": <value1|expression2>, ... } Or you can omit the %%args prefix if you do not specify any expansion prefixes for the fields (i.e., you cannot specify %%args.argument1 and argument2 in a single rule): { \"<argument1>\": <value1|expression1>, \"<argument2>\": <value1|expression2>, ... } You can use the following action arguments in Twilio service rules. to\u00b6 The to argument is a string that corresponds to the destination phone number in E.164 format, such as \"+15551112222\". from\u00b6 The from argument is a string that corresponds to the originating phone number in E.164 format, such as \"+15551112222\". body\u00b6 The body argument is a string that corresponds to the body of the message. Example\u00b6 Actions When \u2611 send { \"to\" : { \"%in\": \"%%values.confirmedNumbers\" }, } This rule ensures that applications can only perform a send action when the to argument is a string listed in confirmedNumbers, where confirmedNumbers is a user-defined constant. For more information in defining constants, see Values. \u2190 HTTP Service Rules Slack Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/amazon-s3.html",
      "title": "Amazon S3 \u2014 MongoDB Stitch (Beta)",
      "text": "Services > Amazon S3 Amazon S3\u00b6 Amazon S3 is a component of Amazon Web Services providing a simple key-value store especially useful for storing and serving static resources. To set up an Amazon S3 service in MongoDB Stitch: Click the ADD SERVICE button in the left-side navigation pane. Select the S3 box. Enter the Service Name. Click Add service. Select the Amazon Region where you deployed your bucket (the US Standard region is us-east-1). Enter your Amazon Access Key ID and Secret Access Key. Click on the Rules tab. You must specify rules to enable the S3 actions. The rules must evaluate to true for the action to be enabled. For details, see Amazon S3 Service Rules. Pipelines and Amazon S3 Service\u00b6 MongoDB Stitch provides the ability to define a sequence of actions to perform as a pipeline. For the Amazon S3 service, MongoDB Stitch provides the following actions: Action Description put Uploads a binary data to an S3 bucket. signPolicy Generates a document that contains the policy, signature, and accessKeyId, which you can use to issue a POST request directly to S3. Note A pipeline can consist of stages that use different MongoDB Stitch services. \u2190 MongoDB Rules Amazon SES \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/amazon-ses.html",
      "title": "Amazon SES \u2014 MongoDB Stitch (Beta)",
      "text": "Services > Amazon SES Amazon SES\u00b6 On this page Set up SES Add an SES Service to Your App Pipelines and Amazon SES Service Test Your Address with the Debug Console Amazon SES is a component of Amazon Web Services which provides a way to send and receive email in response to events in your app. To use it, you need: A MongoDB Stitch app with at least one user. An Amazon AWS account with permission to use the SES service. At least one verified email address. Set up SES\u00b6 Log in at the Amazon AWS console. Amazon recommends that you set up an IAM (Identity and Access Management) user for running AWS services, rather than running services as your root AWS user, and grant that user only the permissions necessary to run the services you need. See Amazon\u2019s documentation for more information about IAM users. Navigate to the SES dashboard through the Services menu in the top left of the AWS console. Verify at least one email address in the Email Addresses area. Add an SES Service to Your App\u00b6 If you don\u2019t have a MongoDB Stitch app set up yet, see Getting Started. If your app doesn\u2019t have an SES service yet, click Add Service in the left side navigation. Select SES. Enter a name for your service in the Service Name box. Click Add Service. Enter your AWS credentials. Make sure the region matches the region your AWS user is registered with. Click Save. Pipelines and Amazon SES Service\u00b6 MongoDB Stitch provides the ability to define a sequence of actions to perform as a pipeline. For the Amazon SES service, MongoDB Stitch provides the following actions: Action Description send Sends an email message to a specified address. Note A pipeline can consist of stages that use different MongoDB Stitch services. Test Your Address with the Debug Console\u00b6 In the MongoDB Stitch admin console, click Debug Console in the left side navigation. Click choose user... near the top of the page. Make sure the app user\u2019s email address is verified with Amazon SES (see above). In the Pipeline to execute: section, select your app\u2019s SES service from the Service dropdown menu. Select send from the Action dropdown menu. Add the following document to the Arguments input box. Fill in the JSON values appropriately. { \"toAddress\": \"email@address.com\", \"body\": \"test message\", \"fromAddress\": \"email@address.com\", \"subject\": \"test subject\" } Click Execute. The result should be an empty array. { \"result\": [] } Check the recipient\u2019s inbox. Note The message is sent by Amazon SES. Depending on your email provider\u2019s policies and your SES setup, the message\u2019s From address may not match the sender\u2019s idetity. Check your junk mail folder if you don\u2019t see the message in your inbox. \u2190 Amazon S3 Push Notifications \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/http.html",
      "title": "HTTP Service \u2014 MongoDB Stitch (Beta)",
      "text": "Services > HTTP Service HTTP Service\u00b6 On this page Add an HTTP Service to Make Outgoing HTTP Requests Add an HTTP Service to Respond to Incoming HTTP Requests Pipelines and HTTP Service Use the HTTP service to integrate MongoDB Stitch apps with any third-party service that provides a REST API over HTTP, such as AWS Lambda. Use the HTTP service to make outgoing HTTP requests to these services and to respond to incoming HTTP requests from them. Add an HTTP Service to Make Outgoing HTTP Requests\u00b6 Use the following procedure to set up an HTTP service to make outgoing HTTP requests. Set up an HTTP Service\u00b6 Select your MongoDB Stitch app in the MongoDB Stitch console. If you haven\u2019t yet created a MongoDB Stitch app, see Getting Started. In the MongoDB Stitch console, click Add service in the left nav panel. Select HTTP. In the Service name box at the bottom, enter a name for your HTTP service. Create Rules\u00b6 Click Rules if you want to specify rules for specific HTTP methods. See HTTP Service Rules for more information. Select the HTTP methods in the Actions column for which you want to add rules. Enter your rule in the WHEN text box. Click Save. Add an HTTP Service to Respond to Incoming HTTP Requests\u00b6 Use the following procedure to set up an HTTP service to respond to incoming HTTP requests. See HTTP JavaScript Tutorial for an example integration with the Sendgrid email platform. Set up an HTTP Service\u00b6 Select your MongoDB Stitch app in the MongoDB Stitch console. If you haven\u2019t yet created a MongoDB Stitch app, see Getting Started. In the MongoDB Stitch console, click Add service in the left nav panel. Select HTTP. In the Service name box at the bottom, enter a name for your HTTP service. Create a MongoDB Stitch Incoming Webhook\u00b6 1 Click the Incoming Webhooks tab.\u00b6 2 Click New Incoming Webhook.\u00b6 3 Specify a service.\u00b6 Mouse over the pipeline stage area, near the bottom of the Webhook panel, to reveal the EDIT and DELETE buttons. Click the Edit icon and select the service you\u2019d like to invoke with your webhook from the SERVICE list. 4 Specify an action.\u00b6 Select the desired action from the ACTION list and enter optional arguments to pass to the selected service action. 5 Bind data to %%vars (optional).\u00b6 If you need to create stage variables, enable Bind data to %%vars. Arguments for the current stage can access stage variables using the %%vars expansion. 6 Click Done.\u00b6 7 (Optional) Click Add Stage and repeat previous steps to add another stage to the pipeline.\u00b6 8 Select an output type for the pipeline from the Output Type list.\u00b6 To return a single document processed by the pipeline, select Single Document. To return a boolean value indicating whether the pipeline returned any output, select Boolean. To return all documents processed by the pipeline, select Array. 9 (Optional) Check Respond with Result to send responses to URLs that invoke the incoming webhook.\u00b6 10 Choose a method to validate HTTP requests in the Request Validation pane.\u00b6 Click the Verify Payload Signature and enter a secret key required to generate the HMAC hash in the Secret box. See Example: Payload Signature for an example of how to generate an HMAC SHA-256 hash and attach it to an HTTP request. Alternatively, click Require Secret as Query Param and enter the secret parameter in the Secret box. See Example: Secret Query Parameter for an example of how to include a secret query parameter in an HTTP request. 11 Click SAVE.\u00b6 Example: Signing Message Payload\u00b6 Sign message payloads by attaching a hexadecimal-encoded HMAC SHA-256 hash to HTTP requests. The message body must be a valid JSON document. The following Python code generates a hash of 828ee180512eaf8a6229eda7eea72323f68e9c0f0093b11a578b0544c5777862 from the following inputs: Secret: \u201812345\u2019 Message: \u2018{\u201cmessage\u201d:\u201dMESSAGE\u201d}\u2019 import hashlib; import hmac; message = bytes('{\"message\":\"MESSAGE\"}'); secret = bytes('12345'); hash = hmac.new(secret, message, hashlib.sha256); print hash.hexdigest(); Attach the hash to the X-Stitch-Signature header, which has the following format: X-Hook-Signature:sha256=<hex-encoded-hash> The following curl statement demonstrates how to attach the generated hash to an HTTP request. Replace the URL with the URL for your MongoDB Stitch app\u2019s incoming webhook. curl -X POST -H \"Content-Type: application/json\" -H \"X-Hook-Signature:sha256=828ee180512eaf8a6229eda7eea72323f68e9c0f0093b11a578b0544c5777862\" -d '{\"message\":\"MESSAGE\"}' https://stitch.mongodb.com/api/client/v1.0/app/hmac-test-vxdts/svc/http1/incomingWebhook/593ebc9d57e0fa4051f173e6 See hmac-examples for more examples of generating HMAC SHA-256 hashes. See Hash-based message authentication code for more information about HMAC. Example: Secret Query Parameter\u00b6 Secret query parameters are HTTP query parameters with the following format: secret=<SECRET> The following curl statement attaches 12345 as the secret query parameter. Replace the URL with the URL for your Stitch app\u2019s incoming webhook. curl -X POST -H \"Content-Type: application/json\" -d {} -i https://stitch.mongodb.com/api/client/v1.0/app/hmac-test-vxdts/svc/http1/incomingWebhook/593ebc9d57e0fa4051f173e6?secret=12345 Pipelines and HTTP Service\u00b6 With MongoDB Stitch, you can define a sequence of actions to perform as a pipeline of stages. For the HTTP service, MongoDB Stitch provides the following actions: Action Description get Corresponds to the HTTP method GET. post Corresponds to the HTTP method POST. put Corresponds to the HTTP method PUT. delete Corresponds to the HTTP method DELETE. head Corresponds to the HTTP method HEAD. patch Corresponds to the HTTP method PATCH. Note A pipeline can consist of stages that use different MongoDB Stitch services. \u2190 Twilio Service Slack Service \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/mailgun.html",
      "title": "Mailgun Service \u2014 MongoDB Stitch (Beta)",
      "text": "Services > Mailgun Service Mailgun Service\u00b6 On this page Set up Mailgun Add a Mailgun Service to Your App Send a Test Email with the Debug Console Mailgun is a service which provides a way to send and receive email in response to events in your app. To use it, you need: A MongoDB Stitch app with the Mailgun service enabled. A Mailgun account with permission to send email. At least one verified email address. Set up Mailgun\u00b6 If you already have a Mailgun account set up, you can skip this section. Visit Mailgun and create an account. Ensure that you have at least one authorized email address you can send to. Check your account\u2019s Security tab for your API key and list of authorized recipients. Check your accounts list of domains. Add a Mailgun Service to Your App\u00b6 If you don\u2019t have a MongoDB Stitch app set up yet, see Getting Started. If your app doesn\u2019t have a Mailgun service yet, click Add Service in the left side navigation. Select Mailgun. Enter a name for your service in the Service Name box. Click Add Service. Enter your Mailgun domain and API key. Click Save. Click the Rules tab. Click the ADD RULE button. Check the Send box in the ACTIONS column and enter any necessary rules in the WHEN box. Click the SAVE button in the lower right corner. Send a Test Email with the Debug Console\u00b6 Navigate to the MongoDB Stitch console in your web browser. If your MongoDB Stitch app doesn\u2019t have any users yet: Click Authentication in the left nav of the console. Click the Edit button in the API Keys row. Create an API key. Click Debug Console in the left side navigation. Click choose user... near the top of the page. Select an app user. Mouse over the Pipeline to execute: section and click the edit icon. Select your app\u2019s Mailgun service from the Service dropdown menu. Select send from the Action dropdown menu. Add the following document to the Arguments input box. Fill in the JSON values appropriately. { \"to\": [ \"your-address@your-domain.com\" ], \"from\": \"test@example.com\", \"subject\": \"Mailgun test\", \"text\": \"This is a Mailgun test message.\" } Make sure the to address is on your Mailgun account\u2019s list of authenticated recipients. Click Execute. The result should be an empty array. { \"result\": [] } Check the recipient\u2019s inbox. Note The message is sent by Mailgun. Depending on your email provider\u2019s policies and your Mailgun setup, the message\u2019s From address may not match the sender\u2019s identity. Check your junk mail folder if you don\u2019t see the message in your inbox. \u2190 Slack Service Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/mongodb.html",
      "title": "MongoDB Service \u2014 MongoDB Stitch (Beta)",
      "text": "Services > MongoDB Service MongoDB Service\u00b6 On this page Integrate an Atlas Cluster with MongoDB Stitch Pipelines and MongoDB Service Incorporate into a Web Application Incorporate into an Android Application Examples The MongoDB Stitch requires an MongoDB Atlas-managed cluster. For more information on Atlas, visit MongoDB Atlas, or visit the Atlas documentation. Integrate an Atlas Cluster with MongoDB Stitch\u00b6 You can integrate an Atlas cluster with MongoDB Stitch during the creation of a MongoDB Stitch application. 1 Log into Atlas.\u00b6 To use MongoDB Stitch, you must be logged into MongoDB Atlas. If you do not have an Atlas account, follow the instructions in the Atlas documentation to create an account. 2 Create an Atlas cluster.\u00b6 If you do not already have an Atlas cluster for use with MongoDB Stitch, create a cluster. Atlas provides a Free Tier M0 replica set as well as paid M10+ clusters. Free Tier deployments have restrictions as compared to paid M10+ deployments. For complete documentation on these restrictions, see Atlas M0 (Free Tier) Limitations. Important Atlas clusters must be MongoDB version 3.4 or greater. 3 Add a MongoDB Stitch application.\u00b6 Click Stitch Apps in the left-hand navigation. Click the Create New Application. The name can only contain ASCII letters, numbers, underscores, and hyphens. Select your Atlas cluster for your MongoDB service. Click Create. Upon creation of your app, you will be redirected to the MongoDB Stitch console. Your app is created with a MongoDB service named mongodb-atlas. 4 Add rules for each collection the MongoDB service must access.\u00b6 You must add rules for each collection the MongoDB service accesses. Under Atlas Clusters in the sidebar, click on the mongodb-atlas service. Click the Rules tab. You can ignore or delete the default namespace. Click the New button. Enter the database name in the Database field. Enter the collection name in the Collection field. Click Create. After you add the namespace, click on the namespace to expand the view. Configure the rules to control access to fields for read and write operations. MongoDB Stitch creates Default Rules for namespaces. For complete documentation on the default rules as well as configuring rules, see MongoDB Service Rules. Pipelines and MongoDB Service\u00b6 With MongoDB Stitch, you can define a sequence of actions to perform as a pipeline of stages. For the MongoDB service, MongoDB Stitch provides the following actions: Action Description find Queries a collection in MongoDB. insert Inserts the stage\u2019s input documents into the specified MongoDB collection. update Modifies one or more documents in a MongoDB collection. aggregate Executes an aggregation pipeline. delete Deletes documents from a MongoDB collection. Note A pipeline can consist of stages that use different MongoDB Stitch services. Incorporate into a Web Application\u00b6 To incorporate MongoDB service into a web application: Note The following lists the code snippets to incorporate MongoDB service into a web application. The numbered list of items is not meant to be a comprehensive step-by-step procedure. For runnable code examples, see the list of tutorials at the end of the section. In your HTML file, include the MongoDB Stitch library . <script defer type=\"text/javascript\" src=\"https://s3.amazonaws.com/stitch-sdks/js/library/298a2b586d91d462099e5d9f66fba0a687837abe/stitch.min.js\"></script> In your JavaScript file, include the code to instantiate a StitchClient: import { StitchClient } from 'stitch'; const stitchClient = new StitchClient('<your-app-id>'); Replace <your-app-id> with your MongoDB Stitch app ID. In the MongoDB Stitch console, you can find your App ID in the Clients view. StitchClient provides various functions to authenticate. For example, if your MongoDB Stitch application allows Anonymous authentication, include the following code to log in anonymously: stitchClient.anonymousAuth(); To access MongoDB database and collection using the MongoDB service, use: The StitchClient.service() method to return an instance of MongoDB Stitch MongoDBService. The MongoDBService.db() method to returns a DB object. The DB.collection() method to return a Collection object. let db = stitchClient.service('mongodb', 'mongodb-atlas').db('<dbname>'); let myCollection = db.collection('<collection>'); Replace <dbname> with the database to access. Replace <collection> with the collection in the database to access. The Collection provides various CRUD methods for operating on the collection. Note To perform operations on a collection, you must have defined rules in the MongoDB Stitch console for the collection. See ToDo (Web App) Integrate the MongoDB Service into a Web Application using Javascript Incorporate into an Android Application\u00b6 Note The following lists the code snippets to incorporate MongoDB service into an Android application. The numbered list of items is not meant to be a comprehensive step-by-step procedure. For runnable code examples, see the list of tutorials at the end of the section. Include the following repositories and depencies in your module-level build.gradle file. repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } // ... } dependencies { compile 'org.mongodb:stitch:0.1.0-SNAPSHOT' // ... } Instantiate a StitchClient to create a connection to your MongoDB Stitch app. For example: final StitchClient _client = new StitchClient(this, \"<your-app-id>\");; where \"<your-app-id>\" is your MongoDB Stitch app ID. In the MongoDB Stitch console, click on Clients in the left-hand navigation pane. You can also instantiate a StitchClient object using a properties file stitch.properties which contains the appId set to your MongoDB Stitch app ID. See StitchClient for more information. Use the logInWithProvider() method to authenticate. For example, if your MongoDB Stitch application allows Anonymous authentication, include the following code to log in anonymously: _client.logInWithProvider(new AnonymousAuthProvider()) Instantiate a MongoClient to connect to the MongoDB service. For example: private MongoClient _mongoClient; //... _mongoClient = new MongoClient(_client, \"mongodb-atlas\"); To access a collection: Collection coll = _mongoClient.getDatabase(\"<dbname>\").getCollection(\"<collName>\"); For more information, see Database and Collection. The Collection class provides various CRUD methods for operating on the collection. Note To perform operations on a collection, you must have defined rules in the MongoDB Stitch console for the collection. Examples\u00b6 MongoDB Android Tutorial MongoDB Javascript Tutorial MongoDB Rules \u2190 Services MongoDB Rules \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/push-notifications.html",
      "title": "Push Notifications \u2014 MongoDB Stitch (Beta)",
      "text": "Services > Push Notifications Push Notifications\u00b6 MongoDB Stitch supports integrating Android apps with Google Cloud Messaging (GCM) service to provide push notifications. Set up Firebase Project\u00b6 To integrate with your MongoDB Stitch app, you need a Firebase project (preferred for new projects) or Google Cloud Messaging project (if your app is already using GCM). 1 Create a Firebase Project.\u00b6 Go to https://console.firebase.google.com/ and add a project. Upon successful creation, you will be redirected to your Firebase project overview page. 2 Add Firebase to your Android app.\u00b6 Click Add Firebase to your Android app. Enter information to register your app and click Skip to the Console (i.e., skip both the download config file step and add Firebase SDK step). The console displays your Firebase project overview page. 3 Get Cloud Messaging credentials.\u00b6 On the left-hand navigation bar, click on the the gear icon next to Overview and select Project settings. Click Cloud Messaging. Copy the Legacy server key and the Sender ID. You will use the information when configuring the GCM service in the MongoDB Stitch console. 4 Go to the MongoDB Stitch console.\u00b6 Configure GCM with Cloud Messaging Credentials\u00b6 Click on the Push Notifications service. In the Config tab: In Sender ID, enter your Firebase project\u2019s Sender ID. In API Key, enter your Firebase project\u2019s Legacy server key. Click Save. Create a Push Notification\u00b6 To create a notification: Click Send New Notification. Enter the following information: Message Text Enter the message to send. Limit to 250 characters. Message Label Enter a descriptive identifier for the message. Topic Specify the topic to send messages to users who have opted into the specified topic. Click either: Save Draft to continue working on later - or - Send Message to send the message immediately. View Sent Messages\u00b6 From the Sent tab, you can view a list of the sent messages. For the sent messages: Resend sent messages. Duplicate sent messages. View Draft Messages\u00b6 In the Draft tab, you can view a list of the draft messages. For the draft messages, you can: Duplicate draft messages. Edit draft messages. Delete draft messages. Create Rules\u00b6 You can add rules to control conditions regarding when to send. See GCM Service Rules for more information. Integrating into Application Code\u00b6 To receive push notification, in your Android application code: Note The following is a numbered list of code snippets and project configuration for incorporating push notification into your Android application. The list is not meant to be a step-by-step guide. Create a class that extends the abstract GCMListenerService and implement the onPushMessageReceived() method. import com.mongodb.stitch.android.push.gcm.GCMListenerService; public class MyGCMListenerService extends GCMListenerService { public void onPushMessageReceived(PushMessage message) { // Implementation } } In your MainActivity.java, declare and initialize a connection to Stitch: final StitchClient _client = new StitchClient(this, \"your-app-id\"); where \"your-app-id\" is your MongoDB Stitch app ID. In the MongoDB Stitch console, you can find your App ID in the Clients view. In your MainActivity.java, add code to create a GCM Push Provider using the Firebase project\u2019s Sender ID and Legacy server key stored in MongoDB Stitch for your app\u2019s GCM service. _client.getPushProviders().addOnSuccessListener(new OnSuccessListener<AvailablePushProviders>() { @Override public void onSuccess(final AvailablePushProviders availablePushProviders) { if (!availablePushProviders.hasGCM()) { return; } final PushClient pushClient = _client.getPush().forProvider(availablePushProviders.getGCM()); } }); Alternatively, StitchClient can read the Sender ID and Legacy server key from a properties file stitch.properties. To use the properties file instead: Set push.gcm.senderId and push.gcm.service properties in the stitch.properties file. Use the following code to create a GCM Push Provider: final PushClient pushClient = _client.getPush().forProvider(GCMPushProviderInfo.fromProperties()); You can use the the PushClient\u2019s register() method to register the client for push notifications. For example: _pushClient.register().addOnCompleteListener(new OnCompleteListener<Void>() { @Override public void onComplete(@NonNull final Task<Void> task) { if (!task.isSuccessful()) { Log.d(TAG, \"Registration failed: \" + task.getException()); return; } Log.d(TAG, \"Registration completed\"); } }); You can use the PushClient\u2019s deregister() method to deregister the client from push notification. For example: _pushClient.deregister().addOnCompleteListener(new OnCompleteListener<Void>() { @Override public void onComplete(@NonNull final Task<Void> task) { if (!task.isSuccessful()) { Log.d(TAG, \"Deregistration failed: \" + task.getException()); return; } Log.d(TAG, \"Deregistration completed\"); } }); Update AndroidManifest.xml file for your Android project to register your GCMListenerService and a receiver: <receiver android:name=\"com.google.android.gms.gcm.GcmReceiver\" android:exported=\"true\"> <intent-filter> <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" /> <category android:name=\"your.app.package.name\" /> </intent-filter> </receiver> <service android:name=\".MyGCMListenerService\" android:exported=\"false\" > <intent-filter> <action android:name=\"com.google.android.c2dm.intent.RECEIVE\" /> </intent-filter> </service> Optional. You can also add a WAKE_LOCK user-permission in the AndroidManifest.xml file to give the service a chance to process the message before sleeping. <uses-permission android:name=\"android.permission.WAKE_LOCK\" /> \u2190 Amazon SES Twilio Service \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/slack.html",
      "title": "Slack Service \u2014 MongoDB Stitch (Beta)",
      "text": "Services > Slack Service Slack Service\u00b6 On this page Set up Slack Add a Slack Service to Your MongoDB Stitch App Pipelines and Slack Service Slack provides team-based messaging services for web and mobile apps. MongoDB Stitch supports integrating apps with Slack. You will need the following to integrate Slack with your MongoDB Stitch app: Slack team ID Slack Incoming Webhook URL You will also need a MongoDB Stitch incoming webhook to receive requests from Slack. However, your app may send messages to Slack without a webhook. Set up Slack\u00b6 Use the following procedure to get started with Slack: Visit Slack and either create a new account or log in with your existing credentials. Click the team name in the upper left corner and select Apps & integrations. Locate Incoming Webhooks with the search tool. Click the Add Configuration button and complete the form. Copy the Webhook URL for later use. Note If you are using a Slack account of which you are not the owner, you\u2019ll need to request permission from the account owner to add an incoming webhook. Add a Slack Service to Your MongoDB Stitch App\u00b6 Use the following procedure to add a Slack service to your MongoDB Stitch app: If you haven\u2019t yet created a MongoDB Stitch app , see Stitch app setup. Click Add Service in the navigation pane. Select Slack. Enter a name for your service in the Service Name box. Click Add Service. Enter your Slack team ID in the Team ID box. Enter your Slack Incoming Webhook URL in the Incoming Webhook URL box. Click Save. If you are going to post messages to Slack, click the Rules tab, enable the post action, and specify any necessary rules. Click Save. See also Slack Javascript Tutorial Pipelines and Slack Service\u00b6 With MongoDB Stitch, you can define a sequence of actions to perform as a pipeline of stages. For the Slack service, MongoDB Stitch provides the following actions: Action Description post Sends a Slack message to a specified channel. Note A pipeline can consist of stages that use different MongoDB Stitch services. \u2190 HTTP Service Mailgun Service \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    },
    {
      "slug": "/services/twilio.html",
      "title": "Twilio Service \u2014 MongoDB Stitch (Beta)",
      "text": "Services > Twilio Service Twilio Service\u00b6 On this page Set up Twilio Add a Twilio Service to Your MongoDB Stitch App Pipelines and Twilio Service Create a MongoDB Stitch Incoming Webhook Add MongoDB Stitch Incoming Webhook to Your Twilio Messaging Service Twilio provides messaging, voice, and chat services for web and mobile apps. MongoDB Stitch supports integrating apps with Twilio\u2019s Programmable SMS service. You will need the following to integrate Twilio with your MongoDB Stitch app: Twilio account SID Twilio authorization token Twilio phone number You will also need a MongoDB Stitch incoming webhook to receive requests from Twilio. However, your app may send messages to Twilio without a webhook. Set up Twilio\u00b6 Use the following procedure to get started with Twilio: Visit Twilio and either create a new account or log in with your existing credentials. In the navigation pane, click the ellipses icon and Programmable SMS Dashboard. Click Messaging Services. Click the plus sign to create a new messaging service. Alternatively, if this is the first messaging service for your Twilio account, click Get Started to first get a Twilio phone number. Add a Twilio Service to Your MongoDB Stitch App\u00b6 Use the following procedure to add a Twilio service to your MongoDB Stitch app: If you haven\u2019t yet created a MongoDB Stitch app , see Stitch app setup. Click Add Service in the navigation pane. Select Twilio. Enter a name for your service in the Service Name box. Click Add Service. Enter your Twilio account ID in the SID box. Enter your Twilio authorization token in the Auth Token box. Click Save. Pipelines and Twilio Service\u00b6 With MongoDB Stitch, you can define a sequence of actions to perform as a pipeline of stages. For the Twilio service, MongoDB Stitch provides the following actions: Action Description send Sends an email message to a specified address. Note A pipeline can consist of stages that use different MongoDB Stitch services. Create a MongoDB Stitch Incoming Webhook\u00b6 A MongoDB Stitch incoming webhook is a callback URL used by a third-party service, such as Twilio, to execute a MongoDB Stitch pipeline. MongoDB Stitch pipelines provide developers the flexibility to concatenate multiple services in the same app. A pipeline defines one or more stages, where each stage consists of the following: A MongoDB Stitch service defined for the app An action for the specified service Arguments to pass to the service Use the following procedure to create a MongoDB Stitch incoming webhook for your app: 1 Click the Incoming Webhooks tab.\u00b6 2 Click New Incoming Webhook.\u00b6 3 Specify a service.\u00b6 Mouse over the pipeline stage area, near the bottom of the Webhook panel, to reveal the EDIT and DELETE buttons. Click the Edit icon and select the service you\u2019d like to invoke with your webhook from the SERVICE list. 4 Specify an action.\u00b6 Select the desired action from the ACTION list and enter optional arguments to pass to the selected service action. 5 Bind data to %%vars (optional).\u00b6 If you need to create stage variables, enable Bind data to %%vars. Arguments for the current stage can access stage variables using the %%vars expansion. 6 Click Done.\u00b6 7 (Optional) Click Add Stage and repeat previous steps to add another stage to the pipeline.\u00b6 8 Select an output type for the pipeline from the Output Type list.\u00b6 To return a single document processed by the pipeline, select Single Document. To return a boolean value indicating whether the pipeline returned any output, select Boolean. To return all documents processed by the pipeline, select Array. 9 (Optional) Check Respond with Result to send responses to URLs that invoke the incoming webhook.\u00b6 10 Choose a method to validate HTTP requests in the Request Validation pane.\u00b6 Click the Verify Payload Signature and enter a secret key required to generate the HMAC hash in the Secret box. See Example: Payload Signature for an example of how to generate an HMAC SHA-256 hash and attach it to an HTTP request. Alternatively, click Require Secret as Query Param and enter the secret parameter in the Secret box. See Example: Secret Query Parameter for an example of how to include a secret query parameter in an HTTP request. 11 Click SAVE.\u00b6 Add MongoDB Stitch Incoming Webhook to Your Twilio Messaging Service\u00b6 Use the following procedure to add your MongoDB Stitch incoming webhook to your Twilio Programmable SMS messaging service: Log into Twilio. Select the messaging service that you created earlier. Check the PROCESS INBOUND MESSAGES box. Enter the MongoDB Stitch incoming webhook URL in the Request URL box. Click Save. Your MongoDB Stitch app is now integrated with Twilio\u2019s SMS messaging service. Send a message to your Twilio phone number to invoke the incoming webhook for your MongoDB Stitch app. For an example, see Integrate ToDo with Twilio. \u2190 Push Notifications HTTP Service \u2192 \u00a9 MongoDB, Inc 2011-2017. MongoDB, Mongo, and the leaf logo are registered trademarks of MongoDB, Inc.",
      "preview": "",
      "tags": []
    }
  ]
}